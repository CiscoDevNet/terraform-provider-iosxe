// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin types
type IPHost struct {
	Device     types.String      `tfsdk:"device"`
	Id         types.String      `tfsdk:"id"`
	DeleteMode types.String      `tfsdk:"delete_mode"`
	HostLists  []IPHostHostLists `tfsdk:"host_lists"`
	Vrf        []IPHostVrf       `tfsdk:"vrf"`
}

type IPHostData struct {
	Device    types.String      `tfsdk:"device"`
	Id        types.String      `tfsdk:"id"`
	HostLists []IPHostHostLists `tfsdk:"host_lists"`
	Vrf       []IPHostVrf       `tfsdk:"vrf"`
}
type IPHostHostLists struct {
	Name   types.String `tfsdk:"name"`
	IpList types.List   `tfsdk:"ip_list"`
}
type IPHostVrf struct {
	Vrf      types.String        `tfsdk:"vrf"`
	HostName []IPHostVrfHostName `tfsdk:"host_name"`
}
type IPHostVrfHostName struct {
	HostName types.String `tfsdk:"host_name"`
	IpList   types.List   `tfsdk:"ip_list"`
}

// End of section. //template:end types

// Section below is generated&owned by "gen/generator.go". //template:begin getPath

func (data IPHost) getPath() string {
	return "Cisco-IOS-XE-native:native/ip/host"
}

func (data IPHostData) getPath() string {
	return "Cisco-IOS-XE-native:native/ip/host"
}

// if last path element has a key -> remove it
func (data IPHost) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

// End of section. //template:end getPath

// Section below is generated&owned by "gen/generator.go". //template:begin toBody

func (data IPHost) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if len(data.HostLists) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"host-list", []interface{}{})
		for index, item := range data.HostLists {
			if !item.Name.IsNull() && !item.Name.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"host-list"+"."+strconv.Itoa(index)+"."+"name", item.Name.ValueString())
			}
			if !item.IpList.IsNull() && !item.IpList.IsUnknown() {
				var values []string
				item.IpList.ElementsAs(ctx, &values, false)
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"host-list"+"."+strconv.Itoa(index)+"."+"ip-list-ordered", values)
			}
		}
	}
	if len(data.Vrf) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"vrf", []interface{}{})
		for index, item := range data.Vrf {
			if !item.Vrf.IsNull() && !item.Vrf.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"vrf"+"."+strconv.Itoa(index)+"."+"vrf-name", item.Vrf.ValueString())
			}
			if len(item.HostName) > 0 {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"vrf"+"."+strconv.Itoa(index)+"."+"host-name", []interface{}{})
				for cindex, citem := range item.HostName {
					if !citem.HostName.IsNull() && !citem.HostName.IsUnknown() {
						body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"vrf"+"."+strconv.Itoa(index)+"."+"host-name"+"."+strconv.Itoa(cindex)+"."+"host-name", citem.HostName.ValueString())
					}
					if !citem.IpList.IsNull() && !citem.IpList.IsUnknown() {
						var values []string
						citem.IpList.ElementsAs(ctx, &values, false)
						body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"vrf"+"."+strconv.Itoa(index)+"."+"host-name"+"."+strconv.Itoa(cindex)+"."+"ip-list", values)
					}
				}
			}
		}
	}
	return body
}

// End of section. //template:end toBody

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBody

func (data *IPHost) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	for i := range data.HostLists {
		keys := [...]string{"name"}
		keyValues := [...]string{data.HostLists[i].Name.ValueString()}

		var r gjson.Result
		res.Get(prefix + "host-list").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("name"); value.Exists() && !data.HostLists[i].Name.IsNull() {
			data.HostLists[i].Name = types.StringValue(value.String())
		} else {
			data.HostLists[i].Name = types.StringNull()
		}
		if value := r.Get("ip-list-ordered"); value.Exists() && !data.HostLists[i].IpList.IsNull() {
			data.HostLists[i].IpList = helpers.GetStringList(value.Array())
		} else {
			data.HostLists[i].IpList = types.ListNull(types.StringType)
		}
	}
	for i := range data.Vrf {
		keys := [...]string{"vrf-name"}
		keyValues := [...]string{data.Vrf[i].Vrf.ValueString()}

		var r gjson.Result
		res.Get(prefix + "vrf").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("vrf-name"); value.Exists() && !data.Vrf[i].Vrf.IsNull() {
			data.Vrf[i].Vrf = types.StringValue(value.String())
		} else {
			data.Vrf[i].Vrf = types.StringNull()
		}
		for ci := range data.Vrf[i].HostName {
			keys := [...]string{"host-name"}
			keyValues := [...]string{data.Vrf[i].HostName[ci].HostName.ValueString()}

			var cr gjson.Result
			r.Get("host-name").ForEach(
				func(_, v gjson.Result) bool {
					found := false
					for ik := range keys {
						if v.Get(keys[ik]).String() == keyValues[ik] {
							found = true
							continue
						}
						found = false
						break
					}
					if found {
						cr = v
						return false
					}
					return true
				},
			)
			if value := cr.Get("host-name"); value.Exists() && !data.Vrf[i].HostName[ci].HostName.IsNull() {
				data.Vrf[i].HostName[ci].HostName = types.StringValue(value.String())
			} else {
				data.Vrf[i].HostName[ci].HostName = types.StringNull()
			}
			if value := cr.Get("ip-list"); value.Exists() && !data.Vrf[i].HostName[ci].IpList.IsNull() {
				data.Vrf[i].HostName[ci].IpList = helpers.GetStringList(value.Array())
			} else {
				data.Vrf[i].HostName[ci].IpList = types.ListNull(types.StringType)
			}
		}
	}
}

// End of section. //template:end updateFromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBody

func (data *IPHost) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "host-list"); value.Exists() {
		data.HostLists = make([]IPHostHostLists, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := IPHostHostLists{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ip-list-ordered"); cValue.Exists() {
				item.IpList = helpers.GetStringList(cValue.Array())
			} else {
				item.IpList = types.ListNull(types.StringType)
			}
			data.HostLists = append(data.HostLists, item)
			return true
		})
	}
	if value := res.Get(prefix + "vrf"); value.Exists() {
		data.Vrf = make([]IPHostVrf, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := IPHostVrf{}
			if cValue := v.Get("vrf-name"); cValue.Exists() {
				item.Vrf = types.StringValue(cValue.String())
			}
			if cValue := v.Get("host-name"); cValue.Exists() {
				item.HostName = make([]IPHostVrfHostName, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := IPHostVrfHostName{}
					if ccValue := cv.Get("host-name"); ccValue.Exists() {
						cItem.HostName = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("ip-list"); ccValue.Exists() {
						cItem.IpList = helpers.GetStringList(ccValue.Array())
					} else {
						cItem.IpList = types.ListNull(types.StringType)
					}
					item.HostName = append(item.HostName, cItem)
					return true
				})
			}
			data.Vrf = append(data.Vrf, item)
			return true
		})
	}
}

// End of section. //template:end fromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyData

func (data *IPHostData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "host-list"); value.Exists() {
		data.HostLists = make([]IPHostHostLists, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := IPHostHostLists{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ip-list-ordered"); cValue.Exists() {
				item.IpList = helpers.GetStringList(cValue.Array())
			} else {
				item.IpList = types.ListNull(types.StringType)
			}
			data.HostLists = append(data.HostLists, item)
			return true
		})
	}
	if value := res.Get(prefix + "vrf"); value.Exists() {
		data.Vrf = make([]IPHostVrf, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := IPHostVrf{}
			if cValue := v.Get("vrf-name"); cValue.Exists() {
				item.Vrf = types.StringValue(cValue.String())
			}
			if cValue := v.Get("host-name"); cValue.Exists() {
				item.HostName = make([]IPHostVrfHostName, 0)
				cValue.ForEach(func(ck, cv gjson.Result) bool {
					cItem := IPHostVrfHostName{}
					if ccValue := cv.Get("host-name"); ccValue.Exists() {
						cItem.HostName = types.StringValue(ccValue.String())
					}
					if ccValue := cv.Get("ip-list"); ccValue.Exists() {
						cItem.IpList = helpers.GetStringList(ccValue.Array())
					} else {
						cItem.IpList = types.ListNull(types.StringType)
					}
					item.HostName = append(item.HostName, cItem)
					return true
				})
			}
			data.Vrf = append(data.Vrf, item)
			return true
		})
	}
}

// End of section. //template:end fromBodyData

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletedItems

func (data *IPHost) getDeletedItems(ctx context.Context, state IPHost) []string {
	deletedItems := make([]string, 0)
	for i := range state.Vrf {
		stateKeyValues := [...]string{state.Vrf[i].Vrf.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Vrf[i].Vrf.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Vrf {
			found = true
			if state.Vrf[i].Vrf.ValueString() != data.Vrf[j].Vrf.ValueString() {
				found = false
			}
			if found {
				for ci := range state.Vrf[i].HostName {
					cstateKeyValues := [...]string{state.Vrf[i].HostName[ci].HostName.ValueString()}

					cemptyKeys := true
					if !reflect.ValueOf(state.Vrf[i].HostName[ci].HostName.ValueString()).IsZero() {
						cemptyKeys = false
					}
					if cemptyKeys {
						continue
					}

					found := false
					for cj := range data.Vrf[j].HostName {
						found = true
						if state.Vrf[i].HostName[ci].HostName.ValueString() != data.Vrf[j].HostName[cj].HostName.ValueString() {
							found = false
						}
						if found {
							if !state.Vrf[i].HostName[ci].IpList.IsNull() {
								if data.Vrf[j].HostName[cj].IpList.IsNull() {
									deletedItems = append(deletedItems, fmt.Sprintf("%v/vrf=%v/host-name=%v/ip-list", state.getPath(), strings.Join(stateKeyValues[:], ","), strings.Join(cstateKeyValues[:], ",")))
								} else {
									var dataValues, stateValues []string
									data.Vrf[i].HostName[ci].IpList.ElementsAs(ctx, &dataValues, false)
									state.Vrf[j].HostName[cj].IpList.ElementsAs(ctx, &stateValues, false)
									for _, v := range stateValues {
										found := false
										for _, vv := range dataValues {
											if v == vv {
												found = true
												break
											}
										}
										if !found {
											deletedItems = append(deletedItems, fmt.Sprintf("%v/vrf=%v/host-name=%v/ip-list=%v", state.getPath(), strings.Join(stateKeyValues[:], ","), strings.Join(cstateKeyValues[:], ","), v))
										}
									}
								}
							}
							break
						}
					}
					if !found {
						deletedItems = append(deletedItems, fmt.Sprintf("%v/vrf=%v/host-name=%v", state.getPath(), strings.Join(stateKeyValues[:], ","), strings.Join(cstateKeyValues[:], ",")))
					}
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/vrf=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	for i := range state.HostLists {
		stateKeyValues := [...]string{state.HostLists[i].Name.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.HostLists[i].Name.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.HostLists {
			found = true
			if state.HostLists[i].Name.ValueString() != data.HostLists[j].Name.ValueString() {
				found = false
			}
			if found {
				if !state.HostLists[i].IpList.IsNull() {
					if data.HostLists[j].IpList.IsNull() {
						deletedItems = append(deletedItems, fmt.Sprintf("%v/host-list=%v/ip-list-ordered", state.getPath(), strings.Join(stateKeyValues[:], ",")))
					} else {
						var dataValues, stateValues []string
						data.HostLists[i].IpList.ElementsAs(ctx, &dataValues, false)
						state.HostLists[j].IpList.ElementsAs(ctx, &stateValues, false)
						for _, v := range stateValues {
							found := false
							for _, vv := range dataValues {
								if v == vv {
									found = true
									break
								}
							}
							if !found {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/host-list=%v/ip-list-ordered=%v", state.getPath(), strings.Join(stateKeyValues[:], ","), v))
							}
						}
					}
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/host-list=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}

	return deletedItems
}

// End of section. //template:end getDeletedItems

// Section below is generated&owned by "gen/generator.go". //template:begin getEmptyLeafsDelete

func (data *IPHost) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}

// End of section. //template:end getEmptyLeafsDelete

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletePaths

func (data *IPHost) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	for i := range data.Vrf {
		keyValues := [...]string{data.Vrf[i].Vrf.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/vrf=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	for i := range data.HostLists {
		keyValues := [...]string{data.HostLists[i].Name.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/host-list=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}

	return deletePaths
}

// End of section. //template:end getDeletePaths
