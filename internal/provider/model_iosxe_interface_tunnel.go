// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type InterfaceTunnel struct {
	Device                        types.String                           `tfsdk:"device"`
	Id                            types.String                           `tfsdk:"id"`
	DeleteMode                    types.String                           `tfsdk:"delete_mode"`
	Name                          types.Int64                            `tfsdk:"name"`
	Ipv6Enable                    types.Bool                             `tfsdk:"ipv6_enable"`
	Ipv6Mtu                       types.Int64                            `tfsdk:"ipv6_mtu"`
	Ipv6NdSuppressAll             types.Bool                             `tfsdk:"ipv6_nd_suppress_all"`
	Ipv6AddressAutoconfigDefault  types.Bool                             `tfsdk:"ipv6_address_autoconfig_default"`
	Ipv6AddressDhcp               types.Bool                             `tfsdk:"ipv6_address_dhcp"`
	Ipv6LinkLocalAddress          []InterfaceTunnelIpv6LinkLocalAddress  `tfsdk:"ipv6_link_local_address"`
	Ipv6PrefixListAddress         []InterfaceTunnelIpv6PrefixListAddress `tfsdk:"ipv6_prefix_list_address"`
	TunnelSource                  types.String                           `tfsdk:"tunnel_source"`
	TunnelDestinationConfigIpv4   types.String                           `tfsdk:"tunnel_destination_config_ipv4"`
	TunnelProtectionIpsecProfiles types.String                           `tfsdk:"tunnel_protection_ipsec_profiles"`
	CryptoIpsecDfBit              types.String                           `tfsdk:"crypto_ipsec_df_bit"`
	IpPrimaryAddress              types.String                           `tfsdk:"ip_primary_address"`
	IpPrimaryAddressMask          types.String                           `tfsdk:"ip_primary_address_mask"`
	TunnelModeIpsecIpv4           types.Bool                             `tfsdk:"tunnel_mode_ipsec_ipv4"`
}

type InterfaceTunnelData struct {
	Device                        types.String                           `tfsdk:"device"`
	Id                            types.String                           `tfsdk:"id"`
	Name                          types.Int64                            `tfsdk:"name"`
	Ipv6Enable                    types.Bool                             `tfsdk:"ipv6_enable"`
	Ipv6Mtu                       types.Int64                            `tfsdk:"ipv6_mtu"`
	Ipv6NdSuppressAll             types.Bool                             `tfsdk:"ipv6_nd_suppress_all"`
	Ipv6AddressAutoconfigDefault  types.Bool                             `tfsdk:"ipv6_address_autoconfig_default"`
	Ipv6AddressDhcp               types.Bool                             `tfsdk:"ipv6_address_dhcp"`
	Ipv6LinkLocalAddress          []InterfaceTunnelIpv6LinkLocalAddress  `tfsdk:"ipv6_link_local_address"`
	Ipv6PrefixListAddress         []InterfaceTunnelIpv6PrefixListAddress `tfsdk:"ipv6_prefix_list_address"`
	TunnelSource                  types.String                           `tfsdk:"tunnel_source"`
	TunnelDestinationConfigIpv4   types.String                           `tfsdk:"tunnel_destination_config_ipv4"`
	TunnelProtectionIpsecProfiles types.String                           `tfsdk:"tunnel_protection_ipsec_profiles"`
	CryptoIpsecDfBit              types.String                           `tfsdk:"crypto_ipsec_df_bit"`
	IpPrimaryAddress              types.String                           `tfsdk:"ip_primary_address"`
	IpPrimaryAddressMask          types.String                           `tfsdk:"ip_primary_address_mask"`
	TunnelModeIpsecIpv4           types.Bool                             `tfsdk:"tunnel_mode_ipsec_ipv4"`
}
type InterfaceTunnelIpv6LinkLocalAddress struct {
	Address   types.String `tfsdk:"address"`
	LinkLocal types.Bool   `tfsdk:"link_local"`
}
type InterfaceTunnelIpv6PrefixListAddress struct {
	Prefix types.String `tfsdk:"prefix"`
	Eui64  types.Bool   `tfsdk:"eui_64"`
}

func (data InterfaceTunnel) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/interface/Tunnel=%s", url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueInt64())))
}

func (data InterfaceTunnelData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/interface/Tunnel=%s", url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueInt64())))
}

// if last path element has a key -> remove it
func (data InterfaceTunnel) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data InterfaceTunnel) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Name.IsNull() && !data.Name.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"name", strconv.FormatInt(data.Name.ValueInt64(), 10))
	}
	if !data.Ipv6Enable.IsNull() && !data.Ipv6Enable.IsUnknown() {
		if data.Ipv6Enable.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ipv6.enable", map[string]string{})
		}
	}
	if !data.Ipv6Mtu.IsNull() && !data.Ipv6Mtu.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ipv6.mtu", strconv.FormatInt(data.Ipv6Mtu.ValueInt64(), 10))
	}
	if !data.Ipv6NdSuppressAll.IsNull() && !data.Ipv6NdSuppressAll.IsUnknown() {
		if data.Ipv6NdSuppressAll.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ipv6.nd.Cisco-IOS-XE-nd:ra.suppress.all", map[string]string{})
		}
	}
	if !data.Ipv6AddressAutoconfigDefault.IsNull() && !data.Ipv6AddressAutoconfigDefault.IsUnknown() {
		if data.Ipv6AddressAutoconfigDefault.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ipv6.address.autoconfig.default", map[string]string{})
		}
	}
	if !data.Ipv6AddressDhcp.IsNull() && !data.Ipv6AddressDhcp.IsUnknown() {
		if data.Ipv6AddressDhcp.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ipv6.address.dhcp", map[string]string{})
		}
	}
	if !data.TunnelSource.IsNull() && !data.TunnelSource.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-tunnel:tunnel.source", data.TunnelSource.ValueString())
	}
	if !data.TunnelDestinationConfigIpv4.IsNull() && !data.TunnelDestinationConfigIpv4.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"tunnel.destination-config.ipv4", data.TunnelDestinationConfigIpv4.ValueString())
	}
	if !data.TunnelProtectionIpsecProfiles.IsNull() && !data.TunnelProtectionIpsecProfiles.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-tunnel:tunnel.protection.Cisco-IOS-XE-crypto:ipsec.profile", data.TunnelProtectionIpsecProfiles.ValueString())
	}
	if !data.CryptoIpsecDfBit.IsNull() && !data.CryptoIpsecDfBit.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-crypto:crypto.ipsec.df-bit", data.CryptoIpsecDfBit.ValueString())
	}
	if !data.IpPrimaryAddress.IsNull() && !data.IpPrimaryAddress.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.address.primary.address", data.IpPrimaryAddress.ValueString())
	}
	if !data.IpPrimaryAddressMask.IsNull() && !data.IpPrimaryAddressMask.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.address.primary.mask", data.IpPrimaryAddressMask.ValueString())
	}
	if !data.TunnelModeIpsecIpv4.IsNull() && !data.TunnelModeIpsecIpv4.IsUnknown() {
		if data.TunnelModeIpsecIpv4.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"tunnel.mode.ipsec.ipv4", map[string]string{})
		}
	}
	if len(data.Ipv6LinkLocalAddress) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ipv6.address.link-local-address", []interface{}{})
		for index, item := range data.Ipv6LinkLocalAddress {
			if !item.Address.IsNull() && !item.Address.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ipv6.address.link-local-address"+"."+strconv.Itoa(index)+"."+"address", item.Address.ValueString())
			}
			if !item.LinkLocal.IsNull() && !item.LinkLocal.IsUnknown() {
				if item.LinkLocal.ValueBool() {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ipv6.address.link-local-address"+"."+strconv.Itoa(index)+"."+"link-local", map[string]string{})
				}
			}
		}
	}
	if len(data.Ipv6PrefixListAddress) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ipv6.address.prefix-list", []interface{}{})
		for index, item := range data.Ipv6PrefixListAddress {
			if !item.Prefix.IsNull() && !item.Prefix.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ipv6.address.prefix-list"+"."+strconv.Itoa(index)+"."+"prefix", item.Prefix.ValueString())
			}
			if !item.Eui64.IsNull() && !item.Eui64.IsUnknown() {
				if item.Eui64.ValueBool() {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ipv6.address.prefix-list"+"."+strconv.Itoa(index)+"."+"eui-64", map[string]string{})
				}
			}
		}
	}
	return body
}

func (data *InterfaceTunnel) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "name"); value.Exists() && !data.Name.IsNull() {
		data.Name = types.Int64Value(value.Int())
	} else {
		data.Name = types.Int64Null()
	}
	if value := res.Get(prefix + "ipv6.enable"); !data.Ipv6Enable.IsNull() {
		if value.Exists() {
			data.Ipv6Enable = types.BoolValue(true)
		} else {
			data.Ipv6Enable = types.BoolValue(false)
		}
	} else {
		data.Ipv6Enable = types.BoolNull()
	}
	if value := res.Get(prefix + "ipv6.mtu"); value.Exists() && !data.Ipv6Mtu.IsNull() {
		data.Ipv6Mtu = types.Int64Value(value.Int())
	} else {
		data.Ipv6Mtu = types.Int64Null()
	}
	if value := res.Get(prefix + "ipv6.nd.Cisco-IOS-XE-nd:ra.suppress.all"); !data.Ipv6NdSuppressAll.IsNull() {
		if value.Exists() {
			data.Ipv6NdSuppressAll = types.BoolValue(true)
		} else {
			data.Ipv6NdSuppressAll = types.BoolValue(false)
		}
	} else {
		data.Ipv6NdSuppressAll = types.BoolNull()
	}
	if value := res.Get(prefix + "ipv6.address.autoconfig.default"); !data.Ipv6AddressAutoconfigDefault.IsNull() {
		if value.Exists() {
			data.Ipv6AddressAutoconfigDefault = types.BoolValue(true)
		} else {
			data.Ipv6AddressAutoconfigDefault = types.BoolValue(false)
		}
	} else {
		data.Ipv6AddressAutoconfigDefault = types.BoolNull()
	}
	if value := res.Get(prefix + "ipv6.address.dhcp"); !data.Ipv6AddressDhcp.IsNull() {
		if value.Exists() {
			data.Ipv6AddressDhcp = types.BoolValue(true)
		} else {
			data.Ipv6AddressDhcp = types.BoolValue(false)
		}
	} else {
		data.Ipv6AddressDhcp = types.BoolNull()
	}
	for i := range data.Ipv6LinkLocalAddress {
		keys := [...]string{"address"}
		keyValues := [...]string{data.Ipv6LinkLocalAddress[i].Address.ValueString()}

		var r gjson.Result
		res.Get(prefix + "ipv6.address.link-local-address").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("address"); value.Exists() && !data.Ipv6LinkLocalAddress[i].Address.IsNull() {
			data.Ipv6LinkLocalAddress[i].Address = types.StringValue(value.String())
		} else {
			data.Ipv6LinkLocalAddress[i].Address = types.StringNull()
		}
		if value := r.Get("link-local"); !data.Ipv6LinkLocalAddress[i].LinkLocal.IsNull() {
			if value.Exists() {
				data.Ipv6LinkLocalAddress[i].LinkLocal = types.BoolValue(true)
			} else {
				data.Ipv6LinkLocalAddress[i].LinkLocal = types.BoolValue(false)
			}
		} else {
			data.Ipv6LinkLocalAddress[i].LinkLocal = types.BoolNull()
		}
	}
	for i := range data.Ipv6PrefixListAddress {
		keys := [...]string{"prefix"}
		keyValues := [...]string{data.Ipv6PrefixListAddress[i].Prefix.ValueString()}

		var r gjson.Result
		res.Get(prefix + "ipv6.address.prefix-list").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("prefix"); value.Exists() && !data.Ipv6PrefixListAddress[i].Prefix.IsNull() {
			data.Ipv6PrefixListAddress[i].Prefix = types.StringValue(value.String())
		} else {
			data.Ipv6PrefixListAddress[i].Prefix = types.StringNull()
		}
		if value := r.Get("eui-64"); !data.Ipv6PrefixListAddress[i].Eui64.IsNull() {
			if value.Exists() {
				data.Ipv6PrefixListAddress[i].Eui64 = types.BoolValue(true)
			} else {
				data.Ipv6PrefixListAddress[i].Eui64 = types.BoolValue(false)
			}
		} else {
			data.Ipv6PrefixListAddress[i].Eui64 = types.BoolNull()
		}
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-tunnel:tunnel.source"); value.Exists() && !data.TunnelSource.IsNull() {
		data.TunnelSource = types.StringValue(value.String())
	} else {
		data.TunnelSource = types.StringNull()
	}
	if value := res.Get(prefix + "tunnel.destination-config.ipv4"); value.Exists() && !data.TunnelDestinationConfigIpv4.IsNull() {
		data.TunnelDestinationConfigIpv4 = types.StringValue(value.String())
	} else {
		data.TunnelDestinationConfigIpv4 = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-tunnel:tunnel.protection.Cisco-IOS-XE-crypto:ipsec.profile"); value.Exists() && !data.TunnelProtectionIpsecProfiles.IsNull() {
		data.TunnelProtectionIpsecProfiles = types.StringValue(value.String())
	} else {
		data.TunnelProtectionIpsecProfiles = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-crypto:crypto.ipsec.df-bit"); value.Exists() && !data.CryptoIpsecDfBit.IsNull() {
		data.CryptoIpsecDfBit = types.StringValue(value.String())
	} else {
		data.CryptoIpsecDfBit = types.StringNull()
	}
	if value := res.Get(prefix + "ip.address.primary.address"); value.Exists() && !data.IpPrimaryAddress.IsNull() {
		data.IpPrimaryAddress = types.StringValue(value.String())
	} else {
		data.IpPrimaryAddress = types.StringNull()
	}
	if value := res.Get(prefix + "ip.address.primary.mask"); value.Exists() && !data.IpPrimaryAddressMask.IsNull() {
		data.IpPrimaryAddressMask = types.StringValue(value.String())
	} else {
		data.IpPrimaryAddressMask = types.StringNull()
	}
	if value := res.Get(prefix + "tunnel.mode.ipsec.ipv4"); !data.TunnelModeIpsecIpv4.IsNull() {
		if value.Exists() {
			data.TunnelModeIpsecIpv4 = types.BoolValue(true)
		} else {
			data.TunnelModeIpsecIpv4 = types.BoolValue(false)
		}
	} else {
		data.TunnelModeIpsecIpv4 = types.BoolNull()
	}
}

func (data *InterfaceTunnelData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "ipv6.enable"); value.Exists() {
		data.Ipv6Enable = types.BoolValue(true)
	} else {
		data.Ipv6Enable = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ipv6.mtu"); value.Exists() {
		data.Ipv6Mtu = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "ipv6.nd.Cisco-IOS-XE-nd:ra.suppress.all"); value.Exists() {
		data.Ipv6NdSuppressAll = types.BoolValue(true)
	} else {
		data.Ipv6NdSuppressAll = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ipv6.address.autoconfig.default"); value.Exists() {
		data.Ipv6AddressAutoconfigDefault = types.BoolValue(true)
	} else {
		data.Ipv6AddressAutoconfigDefault = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ipv6.address.dhcp"); value.Exists() {
		data.Ipv6AddressDhcp = types.BoolValue(true)
	} else {
		data.Ipv6AddressDhcp = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ipv6.address.link-local-address"); value.Exists() {
		data.Ipv6LinkLocalAddress = make([]InterfaceTunnelIpv6LinkLocalAddress, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceTunnelIpv6LinkLocalAddress{}
			if cValue := v.Get("address"); cValue.Exists() {
				item.Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("link-local"); cValue.Exists() {
				item.LinkLocal = types.BoolValue(true)
			} else {
				item.LinkLocal = types.BoolValue(false)
			}
			data.Ipv6LinkLocalAddress = append(data.Ipv6LinkLocalAddress, item)
			return true
		})
	}
	if value := res.Get(prefix + "ipv6.address.prefix-list"); value.Exists() {
		data.Ipv6PrefixListAddress = make([]InterfaceTunnelIpv6PrefixListAddress, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := InterfaceTunnelIpv6PrefixListAddress{}
			if cValue := v.Get("prefix"); cValue.Exists() {
				item.Prefix = types.StringValue(cValue.String())
			}
			if cValue := v.Get("eui-64"); cValue.Exists() {
				item.Eui64 = types.BoolValue(true)
			} else {
				item.Eui64 = types.BoolValue(false)
			}
			data.Ipv6PrefixListAddress = append(data.Ipv6PrefixListAddress, item)
			return true
		})
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-tunnel:tunnel.source"); value.Exists() {
		data.TunnelSource = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "tunnel.destination-config.ipv4"); value.Exists() {
		data.TunnelDestinationConfigIpv4 = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-tunnel:tunnel.protection.Cisco-IOS-XE-crypto:ipsec.profile"); value.Exists() {
		data.TunnelProtectionIpsecProfiles = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-crypto:crypto.ipsec.df-bit"); value.Exists() {
		data.CryptoIpsecDfBit = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "ip.address.primary.address"); value.Exists() {
		data.IpPrimaryAddress = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "ip.address.primary.mask"); value.Exists() {
		data.IpPrimaryAddressMask = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "tunnel.mode.ipsec.ipv4"); value.Exists() {
		data.TunnelModeIpsecIpv4 = types.BoolValue(true)
	} else {
		data.TunnelModeIpsecIpv4 = types.BoolValue(false)
	}
}

func (data *InterfaceTunnel) getDeletedListItems(ctx context.Context, state InterfaceTunnel) []string {
	deletedListItems := make([]string, 0)
	for i := range state.Ipv6LinkLocalAddress {
		stateKeyValues := [...]string{state.Ipv6LinkLocalAddress[i].Address.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv6LinkLocalAddress[i].Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv6LinkLocalAddress {
			found = true
			if state.Ipv6LinkLocalAddress[i].Address.ValueString() != data.Ipv6LinkLocalAddress[j].Address.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/ipv6/address/link-local-address=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	for i := range state.Ipv6PrefixListAddress {
		stateKeyValues := [...]string{state.Ipv6PrefixListAddress[i].Prefix.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Ipv6PrefixListAddress[i].Prefix.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ipv6PrefixListAddress {
			found = true
			if state.Ipv6PrefixListAddress[i].Prefix.ValueString() != data.Ipv6PrefixListAddress[j].Prefix.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/ipv6/address/prefix-list=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *InterfaceTunnel) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.Ipv6Enable.IsNull() && !data.Ipv6Enable.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv6/enable", data.getPath()))
	}
	if !data.Ipv6NdSuppressAll.IsNull() && !data.Ipv6NdSuppressAll.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv6/nd/Cisco-IOS-XE-nd:ra/suppress/all", data.getPath()))
	}
	if !data.Ipv6AddressAutoconfigDefault.IsNull() && !data.Ipv6AddressAutoconfigDefault.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv6/address/autoconfig/default", data.getPath()))
	}
	if !data.Ipv6AddressDhcp.IsNull() && !data.Ipv6AddressDhcp.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv6/address/dhcp", data.getPath()))
	}

	for i := range data.Ipv6LinkLocalAddress {
		keyValues := [...]string{data.Ipv6LinkLocalAddress[i].Address.ValueString()}
		if !data.Ipv6LinkLocalAddress[i].LinkLocal.IsNull() && !data.Ipv6LinkLocalAddress[i].LinkLocal.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv6/address/link-local-address=%v/link-local", data.getPath(), strings.Join(keyValues[:], ",")))
		}
	}

	for i := range data.Ipv6PrefixListAddress {
		keyValues := [...]string{data.Ipv6PrefixListAddress[i].Prefix.ValueString()}
		if !data.Ipv6PrefixListAddress[i].Eui64.IsNull() && !data.Ipv6PrefixListAddress[i].Eui64.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv6/address/prefix-list=%v/eui-64", data.getPath(), strings.Join(keyValues[:], ",")))
		}
	}
	if !data.TunnelModeIpsecIpv4.IsNull() && !data.TunnelModeIpsecIpv4.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/tunnel/mode/ipsec/ipv4", data.getPath()))
	}
	return emptyLeafsDelete
}

func (data *InterfaceTunnel) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.Ipv6Enable.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/enable", data.getPath()))
	}
	if !data.Ipv6Mtu.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/mtu", data.getPath()))
	}
	if !data.Ipv6NdSuppressAll.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/nd/Cisco-IOS-XE-nd:ra/suppress/all", data.getPath()))
	}
	if !data.Ipv6AddressAutoconfigDefault.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/address/autoconfig/default", data.getPath()))
	}
	if !data.Ipv6AddressDhcp.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/address/dhcp", data.getPath()))
	}
	for i := range data.Ipv6LinkLocalAddress {
		keyValues := [...]string{data.Ipv6LinkLocalAddress[i].Address.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/address/link-local-address=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	for i := range data.Ipv6PrefixListAddress {
		keyValues := [...]string{data.Ipv6PrefixListAddress[i].Prefix.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/address/prefix-list=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	if !data.TunnelSource.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-tunnel:tunnel/source", data.getPath()))
	}
	if !data.TunnelDestinationConfigIpv4.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/tunnel/destination-config/ipv4", data.getPath()))
	}
	if !data.TunnelProtectionIpsecProfiles.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-tunnel:tunnel/protection/Cisco-IOS-XE-crypto:ipsec/profile", data.getPath()))
	}
	if !data.CryptoIpsecDfBit.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-crypto:crypto/ipsec/df-bit", data.getPath()))
	}
	if !data.IpPrimaryAddress.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/address/primary/address", data.getPath()))
	}
	if !data.IpPrimaryAddressMask.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/address/primary/mask", data.getPath()))
	}
	if !data.TunnelModeIpsecIpv4.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/tunnel/mode/ipsec/ipv4", data.getPath()))
	}
	return deletePaths
}
