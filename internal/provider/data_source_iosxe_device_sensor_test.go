// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin testAccDataSource

func TestAccDataSourceIosxeDeviceSensor(t *testing.T) {
	if os.Getenv("C9000V") == "" {
		t.Skip("skipping test, set environment variable C9000V")
	}
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "filter_lists_lldp.0.name", "lldp1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "filter_lists_lldp.0.tlv_name_port_id", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "filter_lists_lldp.0.tlv_name_port_description", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "filter_lists_lldp.0.tlv_name_system_name", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "filter_lists_lldp.0.tlv_name_system_description", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "filter_lists_lldp.0.tlv_name_system_capabilities", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "filter_lists_dhcp.0.name", "dhcp1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "filter_lists_dhcp.0.option_name_host_name", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "filter_lists_dhcp.0.option_name_default_ip_ttl", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "filter_lists_dhcp.0.option_name_requested_address", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "filter_lists_dhcp.0.option_name_parameter_request_list", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "filter_lists_dhcp.0.option_name_class_identifier", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "filter_lists_dhcp.0.option_name_client_identifier", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "filter_lists_dhcp.0.option_name_client_fqdn", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "filter_spec_dhcp_includes.0.name", "dhcp1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "filter_spec_lldp_includes.0.name", "lldp1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_device_sensor.test", "notify_all_changes", "true"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxeDeviceSensorConfig(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

// End of section. //template:end testAccDataSource

// Section below is generated&owned by "gen/generator.go". //template:begin testPrerequisites
// End of section. //template:end testPrerequisites

// Section below is generated&owned by "gen/generator.go". //template:begin testAccDataSourceConfig

func testAccDataSourceIosxeDeviceSensorConfig() string {
	config := `resource "iosxe_device_sensor" "test" {` + "\n"
	config += `	delete_mode = "attributes"` + "\n"
	config += `	filter_lists_lldp = [{` + "\n"
	config += `		name = "lldp1"` + "\n"
	config += `		tlv_name_port_id = true` + "\n"
	config += `		tlv_name_port_description = true` + "\n"
	config += `		tlv_name_system_name = true` + "\n"
	config += `		tlv_name_system_description = true` + "\n"
	config += `		tlv_name_system_capabilities = true` + "\n"
	config += `	}]` + "\n"
	config += `	filter_lists_dhcp = [{` + "\n"
	config += `		name = "dhcp1"` + "\n"
	config += `		option_name_host_name = true` + "\n"
	config += `		option_name_default_ip_ttl = true` + "\n"
	config += `		option_name_requested_address = true` + "\n"
	config += `		option_name_parameter_request_list = true` + "\n"
	config += `		option_name_class_identifier = true` + "\n"
	config += `		option_name_client_identifier = true` + "\n"
	config += `		option_name_client_fqdn = true` + "\n"
	config += `	}]` + "\n"
	config += `	filter_spec_dhcp_includes = [{` + "\n"
	config += `		name = "dhcp1"` + "\n"
	config += `	}]` + "\n"
	config += `	filter_spec_lldp_includes = [{` + "\n"
	config += `		name = "lldp1"` + "\n"
	config += `	}]` + "\n"
	config += `	notify_all_changes = true` + "\n"
	config += `}` + "\n"

	config += `
		data "iosxe_device_sensor" "test" {
			depends_on = [iosxe_device_sensor.test]
		}
	`
	return config
}

// End of section. //template:end testAccDataSourceConfig
