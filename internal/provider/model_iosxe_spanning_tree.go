// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-netconf"
	"github.com/netascode/xmldot"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin types
type SpanningTree struct {
	Device                   types.String               `tfsdk:"device"`
	Id                       types.String               `tfsdk:"id"`
	Mode                     types.String               `tfsdk:"mode"`
	Logging                  types.Bool                 `tfsdk:"logging"`
	LoopguardDefault         types.Bool                 `tfsdk:"loopguard_default"`
	PortfastDefault          types.Bool                 `tfsdk:"portfast_default"`
	PortfastBpduguardDefault types.Bool                 `tfsdk:"portfast_bpduguard_default"`
	ExtendSystemId           types.Bool                 `tfsdk:"extend_system_id"`
	MstInstances             []SpanningTreeMstInstances `tfsdk:"mst_instances"`
	Vlans                    []SpanningTreeVlans        `tfsdk:"vlans"`
}

type SpanningTreeData struct {
	Device                   types.String               `tfsdk:"device"`
	Id                       types.String               `tfsdk:"id"`
	Mode                     types.String               `tfsdk:"mode"`
	Logging                  types.Bool                 `tfsdk:"logging"`
	LoopguardDefault         types.Bool                 `tfsdk:"loopguard_default"`
	PortfastDefault          types.Bool                 `tfsdk:"portfast_default"`
	PortfastBpduguardDefault types.Bool                 `tfsdk:"portfast_bpduguard_default"`
	ExtendSystemId           types.Bool                 `tfsdk:"extend_system_id"`
	MstInstances             []SpanningTreeMstInstances `tfsdk:"mst_instances"`
	Vlans                    []SpanningTreeVlans        `tfsdk:"vlans"`
}
type SpanningTreeMstInstances struct {
	Id      types.Int64 `tfsdk:"id"`
	VlanIds types.List  `tfsdk:"vlan_ids"`
}
type SpanningTreeVlans struct {
	Id       types.String `tfsdk:"id"`
	Priority types.Int64  `tfsdk:"priority"`
}

// End of section. //template:end types

// Section below is generated&owned by "gen/generator.go". //template:begin getPath

func (data SpanningTree) getPath() string {
	return "Cisco-IOS-XE-native:native/spanning-tree"
}

func (data SpanningTreeData) getPath() string {
	return "Cisco-IOS-XE-native:native/spanning-tree"
}

// if last path element has a key -> remove it
func (data SpanningTree) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

// getXPath returns the XPath for NETCONF operations
func (data SpanningTree) getXPath() string {
	path := helpers.ConvertRestconfPathToXPath("Cisco-IOS-XE-native:native/spanning-tree")
	return path
}

func (data SpanningTreeData) getXPath() string {
	path := helpers.ConvertRestconfPathToXPath("Cisco-IOS-XE-native:native/spanning-tree")
	return path
}

// End of section. //template:end getPath

// Section below is generated&owned by "gen/generator.go". //template:begin toBody

func (data SpanningTree) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Mode.IsNull() && !data.Mode.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-spanning-tree:mode", data.Mode.ValueString())
	}
	if !data.Logging.IsNull() && !data.Logging.IsUnknown() {
		if data.Logging.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-spanning-tree:logging", map[string]string{})
		}
	}
	if !data.LoopguardDefault.IsNull() && !data.LoopguardDefault.IsUnknown() {
		if data.LoopguardDefault.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-spanning-tree:loopguard.default", map[string]string{})
		}
	}
	if !data.PortfastDefault.IsNull() && !data.PortfastDefault.IsUnknown() {
		if data.PortfastDefault.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-spanning-tree:portfast.default", map[string]string{})
		}
	}
	if !data.PortfastBpduguardDefault.IsNull() && !data.PortfastBpduguardDefault.IsUnknown() {
		if data.PortfastBpduguardDefault.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-spanning-tree:portfast.bpduguard.default", map[string]string{})
		}
	}
	if !data.ExtendSystemId.IsNull() && !data.ExtendSystemId.IsUnknown() {
		if data.ExtendSystemId.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-spanning-tree:extend.system-id", map[string]string{})
		}
	}
	if len(data.MstInstances) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-spanning-tree:mst.configuration.instance", []interface{}{})
		for index, item := range data.MstInstances {
			if !item.Id.IsNull() && !item.Id.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-spanning-tree:mst.configuration.instance"+"."+strconv.Itoa(index)+"."+"id", strconv.FormatInt(item.Id.ValueInt64(), 10))
			}
			if !item.VlanIds.IsNull() && !item.VlanIds.IsUnknown() {
				var values []int
				item.VlanIds.ElementsAs(ctx, &values, false)
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-spanning-tree:mst.configuration.instance"+"."+strconv.Itoa(index)+"."+"vlan-ids", values)
			}
		}
	}
	if len(data.Vlans) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-spanning-tree:vlan", []interface{}{})
		for index, item := range data.Vlans {
			if !item.Id.IsNull() && !item.Id.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-spanning-tree:vlan"+"."+strconv.Itoa(index)+"."+"id", item.Id.ValueString())
			}
			if !item.Priority.IsNull() && !item.Priority.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-spanning-tree:vlan"+"."+strconv.Itoa(index)+"."+"priority", strconv.FormatInt(item.Priority.ValueInt64(), 10))
			}
		}
	}
	return body
}

// End of section. //template:end toBody

// Section below is generated&owned by "gen/generator.go". //template:begin toBodyXML

func (data SpanningTree) toBodyXML(ctx context.Context) string {
	body := netconf.Body{}
	if !data.Mode.IsNull() && !data.Mode.IsUnknown() {
		body = helpers.SetFromXPath(body, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:mode", data.Mode.ValueString())
	}
	if !data.Logging.IsNull() && !data.Logging.IsUnknown() {
		if data.Logging.ValueBool() {
			body = helpers.SetFromXPath(body, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:logging", "")
		} else {
			body = helpers.RemoveFromXPath(body, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:logging")
		}
	}
	if !data.LoopguardDefault.IsNull() && !data.LoopguardDefault.IsUnknown() {
		if data.LoopguardDefault.ValueBool() {
			body = helpers.SetFromXPath(body, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:loopguard/default", "")
		} else {
			body = helpers.RemoveFromXPath(body, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:loopguard/default")
		}
	}
	if !data.PortfastDefault.IsNull() && !data.PortfastDefault.IsUnknown() {
		if data.PortfastDefault.ValueBool() {
			body = helpers.SetFromXPath(body, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:portfast/default", "")
		} else {
			body = helpers.RemoveFromXPath(body, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:portfast/default")
		}
	}
	if !data.PortfastBpduguardDefault.IsNull() && !data.PortfastBpduguardDefault.IsUnknown() {
		if data.PortfastBpduguardDefault.ValueBool() {
			body = helpers.SetFromXPath(body, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:portfast/bpduguard/default", "")
		} else {
			body = helpers.RemoveFromXPath(body, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:portfast/bpduguard/default")
		}
	}
	if !data.ExtendSystemId.IsNull() && !data.ExtendSystemId.IsUnknown() {
		if data.ExtendSystemId.ValueBool() {
			body = helpers.SetFromXPath(body, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:extend/system-id", "")
		} else {
			body = helpers.RemoveFromXPath(body, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:extend/system-id")
		}
	}
	if len(data.MstInstances) > 0 {
		for _, item := range data.MstInstances {
			cBody := netconf.Body{}
			if !item.Id.IsNull() && !item.Id.IsUnknown() {
				cBody = helpers.SetFromXPath(cBody, "id", strconv.FormatInt(item.Id.ValueInt64(), 10))
			}
			if !item.VlanIds.IsNull() && !item.VlanIds.IsUnknown() {
				var values []int
				item.VlanIds.ElementsAs(ctx, &values, false)
				cBody = helpers.SetFromXPath(cBody, "vlan-ids", values)
			}
			body = helpers.SetRawFromXPath(body, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:mst/configuration/instance", cBody.Res())
		}
	}
	if len(data.Vlans) > 0 {
		for _, item := range data.Vlans {
			cBody := netconf.Body{}
			if !item.Id.IsNull() && !item.Id.IsUnknown() {
				cBody = helpers.SetFromXPath(cBody, "id", item.Id.ValueString())
			}
			if !item.Priority.IsNull() && !item.Priority.IsUnknown() {
				cBody = helpers.SetFromXPath(cBody, "priority", strconv.FormatInt(item.Priority.ValueInt64(), 10))
			}
			body = helpers.SetRawFromXPath(body, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:vlan", cBody.Res())
		}
	}
	bodyString, err := body.String()
	if err != nil {
		tflog.Error(ctx, fmt.Sprintf("Error converting body to string: %s", err))
	}
	return bodyString
}

// End of section. //template:end toBodyXML

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBody

func (data *SpanningTree) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:mode"); value.Exists() && !data.Mode.IsNull() {
		data.Mode = types.StringValue(value.String())
	} else {
		data.Mode = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:logging"); !data.Logging.IsNull() {
		if value.Exists() {
			data.Logging = types.BoolValue(true)
		} else {
			data.Logging = types.BoolValue(false)
		}
	} else {
		data.Logging = types.BoolNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:loopguard.default"); !data.LoopguardDefault.IsNull() {
		if value.Exists() {
			data.LoopguardDefault = types.BoolValue(true)
		} else {
			data.LoopguardDefault = types.BoolValue(false)
		}
	} else {
		data.LoopguardDefault = types.BoolNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:portfast.default"); !data.PortfastDefault.IsNull() {
		if value.Exists() {
			data.PortfastDefault = types.BoolValue(true)
		} else {
			data.PortfastDefault = types.BoolValue(false)
		}
	} else {
		data.PortfastDefault = types.BoolNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:portfast.bpduguard.default"); !data.PortfastBpduguardDefault.IsNull() {
		if value.Exists() {
			data.PortfastBpduguardDefault = types.BoolValue(true)
		} else {
			data.PortfastBpduguardDefault = types.BoolValue(false)
		}
	} else {
		data.PortfastBpduguardDefault = types.BoolNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:extend.system-id"); !data.ExtendSystemId.IsNull() {
		if value.Exists() {
			data.ExtendSystemId = types.BoolValue(true)
		} else {
			data.ExtendSystemId = types.BoolValue(false)
		}
	} else {
		data.ExtendSystemId = types.BoolNull()
	}
	for i := range data.MstInstances {
		keys := [...]string{"id"}
		keyValues := [...]string{strconv.FormatInt(data.MstInstances[i].Id.ValueInt64(), 10)}

		var r gjson.Result
		res.Get(prefix + "Cisco-IOS-XE-spanning-tree:mst.configuration.instance").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("id"); value.Exists() && !data.MstInstances[i].Id.IsNull() {
			data.MstInstances[i].Id = types.Int64Value(value.Int())
		} else {
			data.MstInstances[i].Id = types.Int64Null()
		}
		if value := r.Get("vlan-ids"); value.Exists() && !data.MstInstances[i].VlanIds.IsNull() {
			data.MstInstances[i].VlanIds = helpers.GetInt64List(value.Array())
		} else {
			data.MstInstances[i].VlanIds = types.ListNull(types.Int64Type)
		}
	}
	for i := range data.Vlans {
		keys := [...]string{"id"}
		keyValues := [...]string{data.Vlans[i].Id.ValueString()}

		var r gjson.Result
		res.Get(prefix + "Cisco-IOS-XE-spanning-tree:vlan").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("id"); value.Exists() && !data.Vlans[i].Id.IsNull() {
			data.Vlans[i].Id = types.StringValue(value.String())
		} else {
			data.Vlans[i].Id = types.StringNull()
		}
		if value := r.Get("priority"); value.Exists() && !data.Vlans[i].Priority.IsNull() {
			data.Vlans[i].Priority = types.Int64Value(value.Int())
		} else {
			data.Vlans[i].Priority = types.Int64Null()
		}
	}
}

// End of section. //template:end updateFromBody

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBodyXML

func (data *SpanningTree) updateFromBodyXML(ctx context.Context, res xmldot.Result) {
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:mode"); value.Exists() && !data.Mode.IsNull() {
		data.Mode = types.StringValue(value.String())
	} else {
		data.Mode = types.StringNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:logging"); !data.Logging.IsNull() {
		if value.Exists() {
			data.Logging = types.BoolValue(true)
		} else {
			data.Logging = types.BoolValue(false)
		}
	} else {
		data.Logging = types.BoolNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:loopguard/default"); !data.LoopguardDefault.IsNull() {
		if value.Exists() {
			data.LoopguardDefault = types.BoolValue(true)
		} else {
			data.LoopguardDefault = types.BoolValue(false)
		}
	} else {
		data.LoopguardDefault = types.BoolNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:portfast/default"); !data.PortfastDefault.IsNull() {
		if value.Exists() {
			data.PortfastDefault = types.BoolValue(true)
		} else {
			data.PortfastDefault = types.BoolValue(false)
		}
	} else {
		data.PortfastDefault = types.BoolNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:portfast/bpduguard/default"); !data.PortfastBpduguardDefault.IsNull() {
		if value.Exists() {
			data.PortfastBpduguardDefault = types.BoolValue(true)
		} else {
			data.PortfastBpduguardDefault = types.BoolValue(false)
		}
	} else {
		data.PortfastBpduguardDefault = types.BoolNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:extend/system-id"); !data.ExtendSystemId.IsNull() {
		if value.Exists() {
			data.ExtendSystemId = types.BoolValue(true)
		} else {
			data.ExtendSystemId = types.BoolValue(false)
		}
	} else {
		data.ExtendSystemId = types.BoolNull()
	}
	for i := range data.MstInstances {
		keys := [...]string{"id"}
		keyValues := [...]string{strconv.FormatInt(data.MstInstances[i].Id.ValueInt64(), 10)}

		var r xmldot.Result
		helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:mst/configuration/instance").ForEach(
			func(_ int, v xmldot.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := helpers.GetFromXPath(r, "id"); value.Exists() && !data.MstInstances[i].Id.IsNull() {
			data.MstInstances[i].Id = types.Int64Value(value.Int())
		} else {
			data.MstInstances[i].Id = types.Int64Null()
		}
		if value := helpers.GetFromXPath(r, "vlan-ids"); value.Exists() && !data.MstInstances[i].VlanIds.IsNull() {
			data.MstInstances[i].VlanIds = helpers.GetInt64ListXML(value.Array())
		} else {
			data.MstInstances[i].VlanIds = types.ListNull(types.Int64Type)
		}
	}
	for i := range data.Vlans {
		keys := [...]string{"id"}
		keyValues := [...]string{data.Vlans[i].Id.ValueString()}

		var r xmldot.Result
		helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:vlan").ForEach(
			func(_ int, v xmldot.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := helpers.GetFromXPath(r, "id"); value.Exists() && !data.Vlans[i].Id.IsNull() {
			data.Vlans[i].Id = types.StringValue(value.String())
		} else {
			data.Vlans[i].Id = types.StringNull()
		}
		if value := helpers.GetFromXPath(r, "priority"); value.Exists() && !data.Vlans[i].Priority.IsNull() {
			data.Vlans[i].Priority = types.Int64Value(value.Int())
		} else {
			data.Vlans[i].Priority = types.Int64Null()
		}
	}
}

// End of section. //template:end updateFromBodyXML

// Section below is generated&owned by "gen/generator.go". //template:begin fromBody

func (data *SpanningTree) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:mode"); value.Exists() {
		data.Mode = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:logging"); value.Exists() {
		data.Logging = types.BoolValue(true)
	} else {
		data.Logging = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:loopguard.default"); value.Exists() {
		data.LoopguardDefault = types.BoolValue(true)
	} else {
		data.LoopguardDefault = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:portfast.default"); value.Exists() {
		data.PortfastDefault = types.BoolValue(true)
	} else {
		data.PortfastDefault = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:portfast.bpduguard.default"); value.Exists() {
		data.PortfastBpduguardDefault = types.BoolValue(true)
	} else {
		data.PortfastBpduguardDefault = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:extend.system-id"); value.Exists() {
		data.ExtendSystemId = types.BoolValue(true)
	} else {
		data.ExtendSystemId = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:mst.configuration.instance"); value.Exists() {
		data.MstInstances = make([]SpanningTreeMstInstances, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SpanningTreeMstInstances{}
			if cValue := v.Get("id"); cValue.Exists() {
				item.Id = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("vlan-ids"); cValue.Exists() {
				item.VlanIds = helpers.GetInt64List(cValue.Array())
			} else {
				item.VlanIds = types.ListNull(types.Int64Type)
			}
			data.MstInstances = append(data.MstInstances, item)
			return true
		})
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:vlan"); value.Exists() {
		data.Vlans = make([]SpanningTreeVlans, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SpanningTreeVlans{}
			if cValue := v.Get("id"); cValue.Exists() {
				item.Id = types.StringValue(cValue.String())
			}
			if cValue := v.Get("priority"); cValue.Exists() {
				item.Priority = types.Int64Value(cValue.Int())
			}
			data.Vlans = append(data.Vlans, item)
			return true
		})
	}
}

// End of section. //template:end fromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyData

func (data *SpanningTreeData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:mode"); value.Exists() {
		data.Mode = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:logging"); value.Exists() {
		data.Logging = types.BoolValue(true)
	} else {
		data.Logging = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:loopguard.default"); value.Exists() {
		data.LoopguardDefault = types.BoolValue(true)
	} else {
		data.LoopguardDefault = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:portfast.default"); value.Exists() {
		data.PortfastDefault = types.BoolValue(true)
	} else {
		data.PortfastDefault = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:portfast.bpduguard.default"); value.Exists() {
		data.PortfastBpduguardDefault = types.BoolValue(true)
	} else {
		data.PortfastBpduguardDefault = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:extend.system-id"); value.Exists() {
		data.ExtendSystemId = types.BoolValue(true)
	} else {
		data.ExtendSystemId = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:mst.configuration.instance"); value.Exists() {
		data.MstInstances = make([]SpanningTreeMstInstances, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SpanningTreeMstInstances{}
			if cValue := v.Get("id"); cValue.Exists() {
				item.Id = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("vlan-ids"); cValue.Exists() {
				item.VlanIds = helpers.GetInt64List(cValue.Array())
			} else {
				item.VlanIds = types.ListNull(types.Int64Type)
			}
			data.MstInstances = append(data.MstInstances, item)
			return true
		})
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-spanning-tree:vlan"); value.Exists() {
		data.Vlans = make([]SpanningTreeVlans, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SpanningTreeVlans{}
			if cValue := v.Get("id"); cValue.Exists() {
				item.Id = types.StringValue(cValue.String())
			}
			if cValue := v.Get("priority"); cValue.Exists() {
				item.Priority = types.Int64Value(cValue.Int())
			}
			data.Vlans = append(data.Vlans, item)
			return true
		})
	}
}

// End of section. //template:end fromBodyData

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyXML

func (data *SpanningTree) fromBodyXML(ctx context.Context, res xmldot.Result) {
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:mode"); value.Exists() {
		data.Mode = types.StringValue(value.String())
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:logging"); value.Exists() {
		data.Logging = types.BoolValue(true)
	} else {
		data.Logging = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:loopguard/default"); value.Exists() {
		data.LoopguardDefault = types.BoolValue(true)
	} else {
		data.LoopguardDefault = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:portfast/default"); value.Exists() {
		data.PortfastDefault = types.BoolValue(true)
	} else {
		data.PortfastDefault = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:portfast/bpduguard/default"); value.Exists() {
		data.PortfastBpduguardDefault = types.BoolValue(true)
	} else {
		data.PortfastBpduguardDefault = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:extend/system-id"); value.Exists() {
		data.ExtendSystemId = types.BoolValue(true)
	} else {
		data.ExtendSystemId = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:mst/configuration/instance"); value.Exists() {
		data.MstInstances = make([]SpanningTreeMstInstances, 0)
		value.ForEach(func(_ int, v xmldot.Result) bool {
			item := SpanningTreeMstInstances{}
			if cValue := helpers.GetFromXPath(v, "id"); cValue.Exists() {
				item.Id = types.Int64Value(cValue.Int())
			}
			if cValue := helpers.GetFromXPath(v, "vlan-ids"); cValue.Exists() {
				item.VlanIds = helpers.GetInt64ListXML(cValue.Array())
			} else {
				item.VlanIds = types.ListNull(types.Int64Type)
			}
			data.MstInstances = append(data.MstInstances, item)
			return true
		})
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:vlan"); value.Exists() {
		data.Vlans = make([]SpanningTreeVlans, 0)
		value.ForEach(func(_ int, v xmldot.Result) bool {
			item := SpanningTreeVlans{}
			if cValue := helpers.GetFromXPath(v, "id"); cValue.Exists() {
				item.Id = types.StringValue(cValue.String())
			}
			if cValue := helpers.GetFromXPath(v, "priority"); cValue.Exists() {
				item.Priority = types.Int64Value(cValue.Int())
			}
			data.Vlans = append(data.Vlans, item)
			return true
		})
	}
}

// End of section. //template:end fromBodyXML

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyDataXML

func (data *SpanningTreeData) fromBodyXML(ctx context.Context, res xmldot.Result) {
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:mode"); value.Exists() {
		data.Mode = types.StringValue(value.String())
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:logging"); value.Exists() {
		data.Logging = types.BoolValue(true)
	} else {
		data.Logging = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:loopguard/default"); value.Exists() {
		data.LoopguardDefault = types.BoolValue(true)
	} else {
		data.LoopguardDefault = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:portfast/default"); value.Exists() {
		data.PortfastDefault = types.BoolValue(true)
	} else {
		data.PortfastDefault = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:portfast/bpduguard/default"); value.Exists() {
		data.PortfastBpduguardDefault = types.BoolValue(true)
	} else {
		data.PortfastBpduguardDefault = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:extend/system-id"); value.Exists() {
		data.ExtendSystemId = types.BoolValue(true)
	} else {
		data.ExtendSystemId = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:mst/configuration/instance"); value.Exists() {
		data.MstInstances = make([]SpanningTreeMstInstances, 0)
		value.ForEach(func(_ int, v xmldot.Result) bool {
			item := SpanningTreeMstInstances{}
			if cValue := helpers.GetFromXPath(v, "id"); cValue.Exists() {
				item.Id = types.Int64Value(cValue.Int())
			}
			if cValue := helpers.GetFromXPath(v, "vlan-ids"); cValue.Exists() {
				item.VlanIds = helpers.GetInt64ListXML(cValue.Array())
			} else {
				item.VlanIds = types.ListNull(types.Int64Type)
			}
			data.MstInstances = append(data.MstInstances, item)
			return true
		})
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/Cisco-IOS-XE-spanning-tree:vlan"); value.Exists() {
		data.Vlans = make([]SpanningTreeVlans, 0)
		value.ForEach(func(_ int, v xmldot.Result) bool {
			item := SpanningTreeVlans{}
			if cValue := helpers.GetFromXPath(v, "id"); cValue.Exists() {
				item.Id = types.StringValue(cValue.String())
			}
			if cValue := helpers.GetFromXPath(v, "priority"); cValue.Exists() {
				item.Priority = types.Int64Value(cValue.Int())
			}
			data.Vlans = append(data.Vlans, item)
			return true
		})
	}
}

// End of section. //template:end fromBodyDataXML

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletedItems

func (data *SpanningTree) getDeletedItems(ctx context.Context, state SpanningTree) []string {
	deletedItems := make([]string, 0)
	for i := range state.Vlans {
		stateKeyValues := [...]string{state.Vlans[i].Id.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Vlans[i].Id.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Vlans {
			found = true
			if state.Vlans[i].Id.ValueString() != data.Vlans[j].Id.ValueString() {
				found = false
			}
			if found {
				if !state.Vlans[i].Priority.IsNull() && data.Vlans[j].Priority.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:vlan=%v/priority", state.getPath(), strings.Join(stateKeyValues[:], ",")))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:vlan=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	for i := range state.MstInstances {
		stateKeyValues := [...]string{strconv.FormatInt(state.MstInstances[i].Id.ValueInt64(), 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.MstInstances[i].Id.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.MstInstances {
			found = true
			if state.MstInstances[i].Id.ValueInt64() != data.MstInstances[j].Id.ValueInt64() {
				found = false
			}
			if found {
				if !state.MstInstances[i].VlanIds.IsNull() {
					if data.MstInstances[j].VlanIds.IsNull() {
						deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:mst/configuration/instance=%v/vlan-ids", state.getPath(), strings.Join(stateKeyValues[:], ",")))
					} else {
						var dataValues, stateValues []int
						data.MstInstances[i].VlanIds.ElementsAs(ctx, &dataValues, false)
						state.MstInstances[j].VlanIds.ElementsAs(ctx, &stateValues, false)
						for _, v := range stateValues {
							found := false
							for _, vv := range dataValues {
								if v == vv {
									found = true
									break
								}
							}
							if !found {
								deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:mst/configuration/instance=%v/vlan-ids=%v", state.getPath(), strings.Join(stateKeyValues[:], ","), v))
							}
						}
					}
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:mst/configuration/instance=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	if !state.PortfastBpduguardDefault.IsNull() && data.PortfastBpduguardDefault.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:portfast/bpduguard/default", state.getPath()))
	}
	if !state.PortfastDefault.IsNull() && data.PortfastDefault.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:portfast/default", state.getPath()))
	}
	if !state.LoopguardDefault.IsNull() && data.LoopguardDefault.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:loopguard/default", state.getPath()))
	}
	if !state.Logging.IsNull() && data.Logging.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:logging", state.getPath()))
	}
	if !state.Mode.IsNull() && data.Mode.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:mode", state.getPath()))
	}

	return deletedItems
}

// End of section. //template:end getDeletedItems

// Section below is generated&owned by "gen/generator.go". //template:begin addDeletedItemsXML

func (data *SpanningTree) addDeletedItemsXML(ctx context.Context, state SpanningTree, body string) string {
	b := netconf.NewBody(body)
	if !state.Mode.IsNull() && data.Mode.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/Cisco-IOS-XE-spanning-tree:mode")
	}
	if !state.Logging.IsNull() && data.Logging.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/Cisco-IOS-XE-spanning-tree:logging")
	}
	if !state.LoopguardDefault.IsNull() && data.LoopguardDefault.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/Cisco-IOS-XE-spanning-tree:loopguard/default")
	}
	if !state.PortfastDefault.IsNull() && data.PortfastDefault.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/Cisco-IOS-XE-spanning-tree:portfast/default")
	}
	if !state.PortfastBpduguardDefault.IsNull() && data.PortfastBpduguardDefault.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/Cisco-IOS-XE-spanning-tree:portfast/bpduguard/default")
	}
	for i := range state.MstInstances {
		stateKeys := [...]string{"id"}
		stateKeyValues := [...]string{strconv.FormatInt(state.MstInstances[i].Id.ValueInt64(), 10)}
		predicates := ""
		for i := range stateKeys {
			predicates += fmt.Sprintf("[%s='%s']", stateKeys[i], stateKeyValues[i])
		}

		emptyKeys := true
		if !reflect.ValueOf(state.MstInstances[i].Id.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.MstInstances {
			found = true
			if state.MstInstances[i].Id.ValueInt64() != data.MstInstances[j].Id.ValueInt64() {
				found = false
			}
			if found {
				if !state.MstInstances[i].VlanIds.IsNull() {
					if data.MstInstances[j].VlanIds.IsNull() {
						b = helpers.RemoveFromXPath(b, fmt.Sprintf(state.getXPath()+"/Cisco-IOS-XE-spanning-tree:mst/configuration/instance%v/vlan-ids", predicates))
					} else {
						var dataValues, stateValues []int
						data.MstInstances[i].VlanIds.ElementsAs(ctx, &dataValues, false)
						state.MstInstances[j].VlanIds.ElementsAs(ctx, &stateValues, false)
						for _, v := range stateValues {
							found := false
							for _, vv := range dataValues {
								if v == vv {
									found = true
									break
								}
							}
							if !found {
								b = helpers.RemoveFromXPath(b, fmt.Sprintf(state.getXPath()+"/Cisco-IOS-XE-spanning-tree:mst/configuration/instance%v/vlan-ids[.=%v]", predicates, v))
							}
						}
					}
				}
				break
			}
		}
		if !found {
			b = helpers.RemoveFromXPath(b, fmt.Sprintf(state.getXPath()+"/Cisco-IOS-XE-spanning-tree:mst/configuration/instance%v", predicates))
		}
	}
	for i := range state.Vlans {
		stateKeys := [...]string{"id"}
		stateKeyValues := [...]string{state.Vlans[i].Id.ValueString()}
		predicates := ""
		for i := range stateKeys {
			predicates += fmt.Sprintf("[%s='%s']", stateKeys[i], stateKeyValues[i])
		}

		emptyKeys := true
		if !reflect.ValueOf(state.Vlans[i].Id.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Vlans {
			found = true
			if state.Vlans[i].Id.ValueString() != data.Vlans[j].Id.ValueString() {
				found = false
			}
			if found {
				if !state.Vlans[i].Priority.IsNull() && data.Vlans[j].Priority.IsNull() {
					b = helpers.RemoveFromXPath(b, fmt.Sprintf(state.getXPath()+"/Cisco-IOS-XE-spanning-tree:vlan%v/priority", predicates))
				}
				break
			}
		}
		if !found {
			b = helpers.RemoveFromXPath(b, fmt.Sprintf(state.getXPath()+"/Cisco-IOS-XE-spanning-tree:vlan%v", predicates))
		}
	}

	return b.Res()
}

// End of section. //template:end addDeletedItemsXML

// Section below is generated&owned by "gen/generator.go". //template:begin getEmptyLeafsDelete

func (data *SpanningTree) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	if !data.ExtendSystemId.IsNull() && !data.ExtendSystemId.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:extend/system-id", data.getPath()))
	}
	if !data.PortfastBpduguardDefault.IsNull() && !data.PortfastBpduguardDefault.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:portfast/bpduguard/default", data.getPath()))
	}
	if !data.PortfastDefault.IsNull() && !data.PortfastDefault.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:portfast/default", data.getPath()))
	}
	if !data.LoopguardDefault.IsNull() && !data.LoopguardDefault.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:loopguard/default", data.getPath()))
	}
	if !data.Logging.IsNull() && !data.Logging.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:logging", data.getPath()))
	}

	return emptyLeafsDelete
}

// End of section. //template:end getEmptyLeafsDelete

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletePaths

func (data *SpanningTree) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	for i := range data.Vlans {
		keyValues := [...]string{data.Vlans[i].Id.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:vlan=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	for i := range data.MstInstances {
		keyValues := [...]string{strconv.FormatInt(data.MstInstances[i].Id.ValueInt64(), 10)}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:mst/configuration/instance=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	if !data.PortfastBpduguardDefault.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:portfast/bpduguard/default", data.getPath()))
	}
	if !data.PortfastDefault.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:portfast/default", data.getPath()))
	}
	if !data.LoopguardDefault.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:loopguard/default", data.getPath()))
	}
	if !data.Logging.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:logging", data.getPath()))
	}
	if !data.Mode.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-spanning-tree:mode", data.getPath()))
	}

	return deletePaths
}

// End of section. //template:end getDeletePaths

// Section below is generated&owned by "gen/generator.go". //template:begin addDeletePathsXML

func (data *SpanningTree) addDeletePathsXML(ctx context.Context, body string) string {
	b := netconf.NewBody(body)
	if !data.Mode.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:mode")
	}
	if !data.Logging.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:logging")
	}
	if !data.LoopguardDefault.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:loopguard/default")
	}
	if !data.PortfastDefault.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:portfast/default")
	}
	if !data.PortfastBpduguardDefault.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/Cisco-IOS-XE-spanning-tree:portfast/bpduguard/default")
	}
	for i := range data.MstInstances {
		keys := [...]string{"id"}
		keyValues := [...]string{strconv.FormatInt(data.MstInstances[i].Id.ValueInt64(), 10)}
		predicates := ""
		for i := range keys {
			predicates += fmt.Sprintf("[%s='%s']", keys[i], keyValues[i])
		}

		b = helpers.RemoveFromXPath(b, fmt.Sprintf(data.getXPath()+"/Cisco-IOS-XE-spanning-tree:mst/configuration/instance%v", predicates))
	}
	for i := range data.Vlans {
		keys := [...]string{"id"}
		keyValues := [...]string{data.Vlans[i].Id.ValueString()}
		predicates := ""
		for i := range keys {
			predicates += fmt.Sprintf("[%s='%s']", keys[i], keyValues[i])
		}

		b = helpers.RemoveFromXPath(b, fmt.Sprintf(data.getXPath()+"/Cisco-IOS-XE-spanning-tree:vlan%v", predicates))
	}

	return b.Res()
}

// End of section. //template:end addDeletePathsXML
