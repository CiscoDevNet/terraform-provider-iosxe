// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccIosxeMDTSubscription(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_mdt_subscription.test", "subscription_id", "101"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_mdt_subscription.test", "stream", "yang-notif-native"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_mdt_subscription.test", "encoding", "encode-kvgpb"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_mdt_subscription.test", "source_vrf", "Mgmt-vrf"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_mdt_subscription.test", "source_address", "1.2.3.4"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_mdt_subscription.test", "update_policy_on_change", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_mdt_subscription.test", "filter_xpath", "/ios-events-ios-xe-oper:ospf-neighbor-state-change"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_mdt_subscription.test", "receivers.0.address", "5.6.7.8"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_mdt_subscription.test", "receivers.0.port", "57600"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_mdt_subscription.test", "receivers.0.protocol", "grpc-tcp"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccIosxeMDTSubscriptionConfig_minimum(),
			},
			{
				Config: testAccIosxeMDTSubscriptionConfig_all(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
			{
				ResourceName:  "iosxe_mdt_subscription.test",
				ImportState:   true,
				ImportStateId: "Cisco-IOS-XE-mdt-cfg:mdt-config-data/mdt-subscription=101",
			},
		},
	})
}

func testAccIosxeMDTSubscriptionConfig_minimum() string {
	config := `resource "iosxe_mdt_subscription" "test" {` + "\n"
	config += `	subscription_id = 101` + "\n"
	config += `}` + "\n"
	return config
}

func testAccIosxeMDTSubscriptionConfig_all() string {
	config := `resource "iosxe_mdt_subscription" "test" {` + "\n"
	config += `	subscription_id = 101` + "\n"
	config += `	stream = "yang-notif-native"` + "\n"
	config += `	encoding = "encode-kvgpb"` + "\n"
	config += `	source_vrf = "Mgmt-vrf"` + "\n"
	config += `	source_address = "1.2.3.4"` + "\n"
	config += `	update_policy_on_change = true` + "\n"
	config += `	filter_xpath = "/ios-events-ios-xe-oper:ospf-neighbor-state-change"` + "\n"
	config += `	receivers = [{` + "\n"
	config += `		address = "5.6.7.8"` + "\n"
	config += `		port = 57600` + "\n"
	config += `		protocol = "grpc-tcp"` + "\n"
	config += `	}]` + "\n"
	config += `}` + "\n"
	return config
}
