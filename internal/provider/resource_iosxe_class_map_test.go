// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccIosxeClassMap(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_class_map.test", "name", "CM1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_class_map.test", "type", "control"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_class_map.test", "subscriber", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_class_map.test", "prematch", "match-all"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_class_map.test", "match_authorization_status_authorized", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_class_map.test", "match_result_type_aaa_timeout", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_class_map.test", "match_activated_service_templates.0.service_name", "CRITICAL_AUTH_ACCESS"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_class_map.test", "match_authorizing_method_priority_greater_than.0", "20"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_class_map.test", "match_method_dot1x", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_class_map.test", "match_result_type_method_dot1x_authoritative", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_class_map.test", "match_result_type_method_dot1x_agent_not_found", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_class_map.test", "match_result_type_method_dot1x_method_timeout", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_class_map.test", "match_method_mab", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_class_map.test", "match_result_type_method_mab_authoritative", "true"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccIosxeClassMapConfig_minimum(),
			},
			{
				Config: testAccIosxeClassMapConfig_all(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
			{
				ResourceName:  "iosxe_class_map.test",
				ImportState:   true,
				ImportStateId: "Cisco-IOS-XE-native:native/policy/Cisco-IOS-XE-policy:class-map=CM1",
			},
		},
	})
}

func testAccIosxeClassMapConfig_minimum() string {
	config := `resource "iosxe_class_map" "test" {` + "\n"
	config += `	name = "CM1"` + "\n"
	config += `	prematch = "match-all"` + "\n"
	config += `}` + "\n"
	return config
}

func testAccIosxeClassMapConfig_all() string {
	config := `resource "iosxe_class_map" "test" {` + "\n"
	config += `	name = "CM1"` + "\n"
	config += `	type = "control"` + "\n"
	config += `	subscriber = true` + "\n"
	config += `	prematch = "match-all"` + "\n"
	config += `	match_authorization_status_authorized = true` + "\n"
	config += `	match_result_type_aaa_timeout = true` + "\n"
	config += `	match_activated_service_templates = [{` + "\n"
	config += `		service_name = "CRITICAL_AUTH_ACCESS"` + "\n"
	config += `	}]` + "\n"
	config += `	match_authorizing_method_priority_greater_than = [20]` + "\n"
	config += `	match_method_dot1x = true` + "\n"
	config += `	match_result_type_method_dot1x_authoritative = true` + "\n"
	config += `	match_result_type_method_dot1x_agent_not_found = true` + "\n"
	config += `	match_result_type_method_dot1x_method_timeout = true` + "\n"
	config += `	match_method_mab = true` + "\n"
	config += `	match_result_type_method_mab_authoritative = true` + "\n"
	config += `}` + "\n"
	return config
}
