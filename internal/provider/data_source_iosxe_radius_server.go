// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-restconf"
)

// Ensure the implementation satisfies the expected interfaces.
var (
	_ datasource.DataSource              = &RadiusServerDataSource{}
	_ datasource.DataSourceWithConfigure = &RadiusServerDataSource{}
)

func NewRadiusServerDataSource() datasource.DataSource {
	return &RadiusServerDataSource{}
}

type RadiusServerDataSource struct {
	clients map[string]*restconf.Client
}

func (d *RadiusServerDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_radius_server"
}

func (d *RadiusServerDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This data source can read the Radius Server configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the retrieved object.",
				Computed:            true,
			},
			"attributes": schema.ListNestedAttribute{
				MarkdownDescription: "Customize selected radius attributes",
				Computed:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"number": schema.StringAttribute{
							MarkdownDescription: "",
							Computed:            true,
						},
						"access_request_include": schema.BoolAttribute{
							MarkdownDescription: "Include attribute",
							Computed:            true,
						},
						"attribute_31_parameters": schema.ListNestedAttribute{
							MarkdownDescription: "",
							Computed:            true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"calling_station_id": schema.StringAttribute{
										MarkdownDescription: "",
										Computed:            true,
									},
									"id_mac_format": schema.StringAttribute{
										MarkdownDescription: "Specify format (default format ex: 0000.4096.3e4a) ietf - format ex: 00-00-40-96-3E-4A",
										Computed:            true,
									},
									"id_mac_lu_case": schema.StringAttribute{
										MarkdownDescription: "",
										Computed:            true,
									},
									"id_send_nas_port_detail": schema.BoolAttribute{
										MarkdownDescription: "",
										Computed:            true,
									},
									"id_send_mac_only": schema.BoolAttribute{
										MarkdownDescription: "",
										Computed:            true,
									},
								},
							},
						},
						"send_attributes": schema.ListAttribute{
							MarkdownDescription: "",
							ElementType:         types.StringType,
							Computed:            true,
						},
					},
				},
			},
			"dead_criteria_time": schema.Int64Attribute{
				MarkdownDescription: "The time during which no properly formed response must be received from the RADIUS server",
				Computed:            true,
			},
			"dead_criteria_tries": schema.Int64Attribute{
				MarkdownDescription: "The number of times the router must fail to receive a response from the radius server to mark it as dead",
				Computed:            true,
			},
			"deadtime": schema.Int64Attribute{
				MarkdownDescription: "Time to stop using a server that does not respond",
				Computed:            true,
			},
		},
	}
}

func (d *RadiusServerDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, _ *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.clients = req.ProviderData.(map[string]*restconf.Client)
}

func (d *RadiusServerDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var config RadiusServerData

	// Read config
	diags := req.Config.Get(ctx, &config)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	if _, ok := d.clients[config.Device.ValueString()]; !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", config.Device.ValueString()))
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", config.getPath()))

	res, err := d.clients[config.Device.ValueString()].GetData(config.getPath())
	if res.StatusCode == 404 {
		config = RadiusServerData{Device: config.Device}
	} else {
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
			return
		}

		config.fromBody(ctx, res.Res)
	}

	config.Id = types.StringValue(config.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", config.getPath()))

	diags = resp.State.Set(ctx, &config)
	resp.Diagnostics.Append(diags...)
}
