// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type SNMPServer struct {
	Device                                        types.String                `tfsdk:"device"`
	Id                                            types.String                `tfsdk:"id"`
	DeleteMode                                    types.String                `tfsdk:"delete_mode"`
	ChassisId                                     types.String                `tfsdk:"chassis_id"`
	Contact                                       types.String                `tfsdk:"contact"`
	IfindexPersist                                types.Bool                  `tfsdk:"ifindex_persist"`
	Location                                      types.String                `tfsdk:"location"`
	Packetsize                                    types.Int64                 `tfsdk:"packetsize"`
	QueueLength                                   types.Int64                 `tfsdk:"queue_length"`
	EnableLoggingGetop                            types.Bool                  `tfsdk:"enable_logging_getop"`
	EnableLoggingSetop                            types.Bool                  `tfsdk:"enable_logging_setop"`
	EnableInforms                                 types.Bool                  `tfsdk:"enable_informs"`
	EnableTraps                                   types.Bool                  `tfsdk:"enable_traps"`
	EnableTrapsSnmpAuthentication                 types.Bool                  `tfsdk:"enable_traps_snmp_authentication"`
	EnableTrapsSnmpColdstart                      types.Bool                  `tfsdk:"enable_traps_snmp_coldstart"`
	EnableTrapsSnmpLinkdown                       types.Bool                  `tfsdk:"enable_traps_snmp_linkdown"`
	EnableTrapsSnmpLinkup                         types.Bool                  `tfsdk:"enable_traps_snmp_linkup"`
	EnableTrapsSnmpWarmstart                      types.Bool                  `tfsdk:"enable_traps_snmp_warmstart"`
	SourceInterfaceInformsGigabitEthernet         types.String                `tfsdk:"source_interface_informs_gigabit_ethernet"`
	SourceInterfaceInformsTenGigabitEthernet      types.String                `tfsdk:"source_interface_informs_ten_gigabit_ethernet"`
	SourceInterfaceInformsFortyGigabitEthernet    types.String                `tfsdk:"source_interface_informs_forty_gigabit_ethernet"`
	SourceInterfaceInformsHundredGigE             types.String                `tfsdk:"source_interface_informs_hundred_gig_e"`
	SourceInterfaceInformsLoopback                types.Int64                 `tfsdk:"source_interface_informs_loopback"`
	SourceInterfaceInformsPortChannel             types.Int64                 `tfsdk:"source_interface_informs_port_channel"`
	SourceInterfaceInformsPortChannelSubinterface types.String                `tfsdk:"source_interface_informs_port_channel_subinterface"`
	SourceInterfaceInformsVlan                    types.Int64                 `tfsdk:"source_interface_informs_vlan"`
	SourceInterfaceTrapsGigabitEthernet           types.String                `tfsdk:"source_interface_traps_gigabit_ethernet"`
	SourceInterfaceTrapsTenGigabitEthernet        types.String                `tfsdk:"source_interface_traps_ten_gigabit_ethernet"`
	SourceInterfaceTrapsFortyGigabitEthernet      types.String                `tfsdk:"source_interface_traps_forty_gigabit_ethernet"`
	SourceInterfaceTrapsHundredGigE               types.String                `tfsdk:"source_interface_traps_hundred_gig_e"`
	SourceInterfaceTrapsLoopback                  types.Int64                 `tfsdk:"source_interface_traps_loopback"`
	SourceInterfaceTrapsPortChannel               types.Int64                 `tfsdk:"source_interface_traps_port_channel"`
	SourceInterfaceTrapsPortChannelSubinterface   types.String                `tfsdk:"source_interface_traps_port_channel_subinterface"`
	SourceInterfaceTrapsVlan                      types.Int64                 `tfsdk:"source_interface_traps_vlan"`
	TrapSourceGigabitEthernet                     types.String                `tfsdk:"trap_source_gigabit_ethernet"`
	TrapSourceTenGigabitEthernet                  types.String                `tfsdk:"trap_source_ten_gigabit_ethernet"`
	TrapSourceFortyGigabitEthernet                types.String                `tfsdk:"trap_source_forty_gigabit_ethernet"`
	TrapSourceHundredGigE                         types.String                `tfsdk:"trap_source_hundred_gig_e"`
	TrapSourceLoopback                            types.Int64                 `tfsdk:"trap_source_loopback"`
	TrapSourcePortChannel                         types.Int64                 `tfsdk:"trap_source_port_channel"`
	TrapSourcePortChannelSubinterface             types.String                `tfsdk:"trap_source_port_channel_subinterface"`
	TrapSourceVlan                                types.Int64                 `tfsdk:"trap_source_vlan"`
	SnmpCommunities                               []SNMPServerSnmpCommunities `tfsdk:"snmp_communities"`
	Contexts                                      []SNMPServerContexts        `tfsdk:"contexts"`
	Views                                         []SNMPServerViews           `tfsdk:"views"`
}

type SNMPServerData struct {
	Device                                        types.String                `tfsdk:"device"`
	Id                                            types.String                `tfsdk:"id"`
	ChassisId                                     types.String                `tfsdk:"chassis_id"`
	Contact                                       types.String                `tfsdk:"contact"`
	IfindexPersist                                types.Bool                  `tfsdk:"ifindex_persist"`
	Location                                      types.String                `tfsdk:"location"`
	Packetsize                                    types.Int64                 `tfsdk:"packetsize"`
	QueueLength                                   types.Int64                 `tfsdk:"queue_length"`
	EnableLoggingGetop                            types.Bool                  `tfsdk:"enable_logging_getop"`
	EnableLoggingSetop                            types.Bool                  `tfsdk:"enable_logging_setop"`
	EnableInforms                                 types.Bool                  `tfsdk:"enable_informs"`
	EnableTraps                                   types.Bool                  `tfsdk:"enable_traps"`
	EnableTrapsSnmpAuthentication                 types.Bool                  `tfsdk:"enable_traps_snmp_authentication"`
	EnableTrapsSnmpColdstart                      types.Bool                  `tfsdk:"enable_traps_snmp_coldstart"`
	EnableTrapsSnmpLinkdown                       types.Bool                  `tfsdk:"enable_traps_snmp_linkdown"`
	EnableTrapsSnmpLinkup                         types.Bool                  `tfsdk:"enable_traps_snmp_linkup"`
	EnableTrapsSnmpWarmstart                      types.Bool                  `tfsdk:"enable_traps_snmp_warmstart"`
	SourceInterfaceInformsGigabitEthernet         types.String                `tfsdk:"source_interface_informs_gigabit_ethernet"`
	SourceInterfaceInformsTenGigabitEthernet      types.String                `tfsdk:"source_interface_informs_ten_gigabit_ethernet"`
	SourceInterfaceInformsFortyGigabitEthernet    types.String                `tfsdk:"source_interface_informs_forty_gigabit_ethernet"`
	SourceInterfaceInformsHundredGigE             types.String                `tfsdk:"source_interface_informs_hundred_gig_e"`
	SourceInterfaceInformsLoopback                types.Int64                 `tfsdk:"source_interface_informs_loopback"`
	SourceInterfaceInformsPortChannel             types.Int64                 `tfsdk:"source_interface_informs_port_channel"`
	SourceInterfaceInformsPortChannelSubinterface types.String                `tfsdk:"source_interface_informs_port_channel_subinterface"`
	SourceInterfaceInformsVlan                    types.Int64                 `tfsdk:"source_interface_informs_vlan"`
	SourceInterfaceTrapsGigabitEthernet           types.String                `tfsdk:"source_interface_traps_gigabit_ethernet"`
	SourceInterfaceTrapsTenGigabitEthernet        types.String                `tfsdk:"source_interface_traps_ten_gigabit_ethernet"`
	SourceInterfaceTrapsFortyGigabitEthernet      types.String                `tfsdk:"source_interface_traps_forty_gigabit_ethernet"`
	SourceInterfaceTrapsHundredGigE               types.String                `tfsdk:"source_interface_traps_hundred_gig_e"`
	SourceInterfaceTrapsLoopback                  types.Int64                 `tfsdk:"source_interface_traps_loopback"`
	SourceInterfaceTrapsPortChannel               types.Int64                 `tfsdk:"source_interface_traps_port_channel"`
	SourceInterfaceTrapsPortChannelSubinterface   types.String                `tfsdk:"source_interface_traps_port_channel_subinterface"`
	SourceInterfaceTrapsVlan                      types.Int64                 `tfsdk:"source_interface_traps_vlan"`
	TrapSourceGigabitEthernet                     types.String                `tfsdk:"trap_source_gigabit_ethernet"`
	TrapSourceTenGigabitEthernet                  types.String                `tfsdk:"trap_source_ten_gigabit_ethernet"`
	TrapSourceFortyGigabitEthernet                types.String                `tfsdk:"trap_source_forty_gigabit_ethernet"`
	TrapSourceHundredGigE                         types.String                `tfsdk:"trap_source_hundred_gig_e"`
	TrapSourceLoopback                            types.Int64                 `tfsdk:"trap_source_loopback"`
	TrapSourcePortChannel                         types.Int64                 `tfsdk:"trap_source_port_channel"`
	TrapSourcePortChannelSubinterface             types.String                `tfsdk:"trap_source_port_channel_subinterface"`
	TrapSourceVlan                                types.Int64                 `tfsdk:"trap_source_vlan"`
	SnmpCommunities                               []SNMPServerSnmpCommunities `tfsdk:"snmp_communities"`
	Contexts                                      []SNMPServerContexts        `tfsdk:"contexts"`
	Views                                         []SNMPServerViews           `tfsdk:"views"`
}
type SNMPServerSnmpCommunities struct {
	Name           types.String `tfsdk:"name"`
	View           types.String `tfsdk:"view"`
	Permission     types.String `tfsdk:"permission"`
	Ipv6           types.String `tfsdk:"ipv6"`
	AccessListName types.String `tfsdk:"access_list_name"`
}
type SNMPServerContexts struct {
	Name types.String `tfsdk:"name"`
}
type SNMPServerViews struct {
	Name   types.String `tfsdk:"name"`
	Mib    types.String `tfsdk:"mib"`
	IncExl types.String `tfsdk:"inc_exl"`
}

func (data SNMPServer) getPath() string {
	return "Cisco-IOS-XE-native:native/snmp-server"
}

func (data SNMPServerData) getPath() string {
	return "Cisco-IOS-XE-native:native/snmp-server"
}

// if last path element has a key -> remove it
func (data SNMPServer) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data SNMPServer) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.ChassisId.IsNull() && !data.ChassisId.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:chassis-id", data.ChassisId.ValueString())
	}
	if !data.Contact.IsNull() && !data.Contact.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:contact", data.Contact.ValueString())
	}
	if !data.IfindexPersist.IsNull() && !data.IfindexPersist.IsUnknown() {
		if data.IfindexPersist.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:ifindex.persist", map[string]string{})
		}
	}
	if !data.Location.IsNull() && !data.Location.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:location", data.Location.ValueString())
	}
	if !data.Packetsize.IsNull() && !data.Packetsize.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:packetsize", strconv.FormatInt(data.Packetsize.ValueInt64(), 10))
	}
	if !data.QueueLength.IsNull() && !data.QueueLength.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:queue-length", strconv.FormatInt(data.QueueLength.ValueInt64(), 10))
	}
	if !data.EnableLoggingGetop.IsNull() && !data.EnableLoggingGetop.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.logging.getop", data.EnableLoggingGetop.ValueBool())
	}
	if !data.EnableLoggingSetop.IsNull() && !data.EnableLoggingSetop.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.logging.setop", data.EnableLoggingSetop.ValueBool())
	}
	if !data.EnableInforms.IsNull() && !data.EnableInforms.IsUnknown() {
		if data.EnableInforms.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.informs", map[string]string{})
		}
	}
	if !data.EnableTraps.IsNull() && !data.EnableTraps.IsUnknown() {
		if data.EnableTraps.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.traps", map[string]string{})
		}
	}
	if !data.EnableTrapsSnmpAuthentication.IsNull() && !data.EnableTrapsSnmpAuthentication.IsUnknown() {
		if data.EnableTrapsSnmpAuthentication.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.authentication", map[string]string{})
		}
	}
	if !data.EnableTrapsSnmpColdstart.IsNull() && !data.EnableTrapsSnmpColdstart.IsUnknown() {
		if data.EnableTrapsSnmpColdstart.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.coldstart", map[string]string{})
		}
	}
	if !data.EnableTrapsSnmpLinkdown.IsNull() && !data.EnableTrapsSnmpLinkdown.IsUnknown() {
		if data.EnableTrapsSnmpLinkdown.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.linkdown", map[string]string{})
		}
	}
	if !data.EnableTrapsSnmpLinkup.IsNull() && !data.EnableTrapsSnmpLinkup.IsUnknown() {
		if data.EnableTrapsSnmpLinkup.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.linkup", map[string]string{})
		}
	}
	if !data.EnableTrapsSnmpWarmstart.IsNull() && !data.EnableTrapsSnmpWarmstart.IsUnknown() {
		if data.EnableTrapsSnmpWarmstart.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.warmstart", map[string]string{})
		}
	}
	if !data.SourceInterfaceInformsGigabitEthernet.IsNull() && !data.SourceInterfaceInformsGigabitEthernet.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.informs.GigabitEthernet", data.SourceInterfaceInformsGigabitEthernet.ValueString())
	}
	if !data.SourceInterfaceInformsTenGigabitEthernet.IsNull() && !data.SourceInterfaceInformsTenGigabitEthernet.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.informs.TenGigabitEthernet", data.SourceInterfaceInformsTenGigabitEthernet.ValueString())
	}
	if !data.SourceInterfaceInformsFortyGigabitEthernet.IsNull() && !data.SourceInterfaceInformsFortyGigabitEthernet.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.informs.FortyGigabitEthernet", data.SourceInterfaceInformsFortyGigabitEthernet.ValueString())
	}
	if !data.SourceInterfaceInformsHundredGigE.IsNull() && !data.SourceInterfaceInformsHundredGigE.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.informs.HundredGigE", data.SourceInterfaceInformsHundredGigE.ValueString())
	}
	if !data.SourceInterfaceInformsLoopback.IsNull() && !data.SourceInterfaceInformsLoopback.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.informs.Loopback", strconv.FormatInt(data.SourceInterfaceInformsLoopback.ValueInt64(), 10))
	}
	if !data.SourceInterfaceInformsPortChannel.IsNull() && !data.SourceInterfaceInformsPortChannel.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.informs.Port-channel", strconv.FormatInt(data.SourceInterfaceInformsPortChannel.ValueInt64(), 10))
	}
	if !data.SourceInterfaceInformsPortChannelSubinterface.IsNull() && !data.SourceInterfaceInformsPortChannelSubinterface.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.informs.Port-channel-subinterface.Port-channel", data.SourceInterfaceInformsPortChannelSubinterface.ValueString())
	}
	if !data.SourceInterfaceInformsVlan.IsNull() && !data.SourceInterfaceInformsVlan.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.informs.Vlan", strconv.FormatInt(data.SourceInterfaceInformsVlan.ValueInt64(), 10))
	}
	if !data.SourceInterfaceTrapsGigabitEthernet.IsNull() && !data.SourceInterfaceTrapsGigabitEthernet.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.traps.GigabitEthernet", data.SourceInterfaceTrapsGigabitEthernet.ValueString())
	}
	if !data.SourceInterfaceTrapsTenGigabitEthernet.IsNull() && !data.SourceInterfaceTrapsTenGigabitEthernet.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.traps.TenGigabitEthernet", data.SourceInterfaceTrapsTenGigabitEthernet.ValueString())
	}
	if !data.SourceInterfaceTrapsFortyGigabitEthernet.IsNull() && !data.SourceInterfaceTrapsFortyGigabitEthernet.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.traps.FortyGigabitEthernet", data.SourceInterfaceTrapsFortyGigabitEthernet.ValueString())
	}
	if !data.SourceInterfaceTrapsHundredGigE.IsNull() && !data.SourceInterfaceTrapsHundredGigE.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.traps.HundredGigE", data.SourceInterfaceTrapsHundredGigE.ValueString())
	}
	if !data.SourceInterfaceTrapsLoopback.IsNull() && !data.SourceInterfaceTrapsLoopback.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.traps.Loopback", strconv.FormatInt(data.SourceInterfaceTrapsLoopback.ValueInt64(), 10))
	}
	if !data.SourceInterfaceTrapsPortChannel.IsNull() && !data.SourceInterfaceTrapsPortChannel.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.traps.Port-channel", strconv.FormatInt(data.SourceInterfaceTrapsPortChannel.ValueInt64(), 10))
	}
	if !data.SourceInterfaceTrapsPortChannelSubinterface.IsNull() && !data.SourceInterfaceTrapsPortChannelSubinterface.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.traps.Port-channel-subinterface.Port-channel", data.SourceInterfaceTrapsPortChannelSubinterface.ValueString())
	}
	if !data.SourceInterfaceTrapsVlan.IsNull() && !data.SourceInterfaceTrapsVlan.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:source-interface.traps.Vlan", strconv.FormatInt(data.SourceInterfaceTrapsVlan.ValueInt64(), 10))
	}
	if !data.TrapSourceGigabitEthernet.IsNull() && !data.TrapSourceGigabitEthernet.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:trap-source.GigabitEthernet", data.TrapSourceGigabitEthernet.ValueString())
	}
	if !data.TrapSourceTenGigabitEthernet.IsNull() && !data.TrapSourceTenGigabitEthernet.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:trap-source.TenGigabitEthernet", data.TrapSourceTenGigabitEthernet.ValueString())
	}
	if !data.TrapSourceFortyGigabitEthernet.IsNull() && !data.TrapSourceFortyGigabitEthernet.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:trap-source.FortyGigabitEthernet", data.TrapSourceFortyGigabitEthernet.ValueString())
	}
	if !data.TrapSourceHundredGigE.IsNull() && !data.TrapSourceHundredGigE.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:trap-source.HundredGigE", data.TrapSourceHundredGigE.ValueString())
	}
	if !data.TrapSourceLoopback.IsNull() && !data.TrapSourceLoopback.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:trap-source.Loopback", strconv.FormatInt(data.TrapSourceLoopback.ValueInt64(), 10))
	}
	if !data.TrapSourcePortChannel.IsNull() && !data.TrapSourcePortChannel.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:trap-source.Port-channel", strconv.FormatInt(data.TrapSourcePortChannel.ValueInt64(), 10))
	}
	if !data.TrapSourcePortChannelSubinterface.IsNull() && !data.TrapSourcePortChannelSubinterface.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:trap-source.Port-channel-subinterface.Port-channel", data.TrapSourcePortChannelSubinterface.ValueString())
	}
	if !data.TrapSourceVlan.IsNull() && !data.TrapSourceVlan.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:trap-source.Vlan", strconv.FormatInt(data.TrapSourceVlan.ValueInt64(), 10))
	}
	if len(data.SnmpCommunities) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:community-config", []interface{}{})
		for index, item := range data.SnmpCommunities {
			if !item.Name.IsNull() && !item.Name.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:community-config"+"."+strconv.Itoa(index)+"."+"name", item.Name.ValueString())
			}
			if !item.View.IsNull() && !item.View.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:community-config"+"."+strconv.Itoa(index)+"."+"view", item.View.ValueString())
			}
			if !item.Permission.IsNull() && !item.Permission.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:community-config"+"."+strconv.Itoa(index)+"."+"permission", item.Permission.ValueString())
			}
			if !item.Ipv6.IsNull() && !item.Ipv6.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:community-config"+"."+strconv.Itoa(index)+"."+"ipv6", item.Ipv6.ValueString())
			}
			if !item.AccessListName.IsNull() && !item.AccessListName.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:community-config"+"."+strconv.Itoa(index)+"."+"access-list-name", item.AccessListName.ValueString())
			}
		}
	}
	if len(data.Contexts) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:context", []interface{}{})
		for index, item := range data.Contexts {
			if !item.Name.IsNull() && !item.Name.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:context"+"."+strconv.Itoa(index)+"."+"name", item.Name.ValueString())
			}
		}
	}
	if len(data.Views) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:view", []interface{}{})
		for index, item := range data.Views {
			if !item.Name.IsNull() && !item.Name.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:view"+"."+strconv.Itoa(index)+"."+"name", item.Name.ValueString())
			}
			if !item.Mib.IsNull() && !item.Mib.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:view"+"."+strconv.Itoa(index)+"."+"mib", item.Mib.ValueString())
			}
			if !item.IncExl.IsNull() && !item.IncExl.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-snmp:view"+"."+strconv.Itoa(index)+"."+"inc-exl", item.IncExl.ValueString())
			}
		}
	}
	return body
}

func (data *SNMPServer) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:chassis-id"); value.Exists() && !data.ChassisId.IsNull() {
		data.ChassisId = types.StringValue(value.String())
	} else {
		data.ChassisId = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:contact"); value.Exists() && !data.Contact.IsNull() {
		data.Contact = types.StringValue(value.String())
	} else {
		data.Contact = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:ifindex.persist"); !data.IfindexPersist.IsNull() {
		if value.Exists() {
			data.IfindexPersist = types.BoolValue(true)
		} else {
			data.IfindexPersist = types.BoolValue(false)
		}
	} else {
		data.IfindexPersist = types.BoolNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:location"); value.Exists() && !data.Location.IsNull() {
		data.Location = types.StringValue(value.String())
	} else {
		data.Location = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:packetsize"); value.Exists() && !data.Packetsize.IsNull() {
		data.Packetsize = types.Int64Value(value.Int())
	} else {
		data.Packetsize = types.Int64Null()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:queue-length"); value.Exists() && !data.QueueLength.IsNull() {
		data.QueueLength = types.Int64Value(value.Int())
	} else {
		data.QueueLength = types.Int64Null()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.logging.getop"); !data.EnableLoggingGetop.IsNull() {
		if value.Exists() {
			data.EnableLoggingGetop = types.BoolValue(value.Bool())
		}
	} else {
		data.EnableLoggingGetop = types.BoolNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.logging.setop"); !data.EnableLoggingSetop.IsNull() {
		if value.Exists() {
			data.EnableLoggingSetop = types.BoolValue(value.Bool())
		}
	} else {
		data.EnableLoggingSetop = types.BoolNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.informs"); !data.EnableInforms.IsNull() {
		if value.Exists() {
			data.EnableInforms = types.BoolValue(true)
		} else {
			data.EnableInforms = types.BoolValue(false)
		}
	} else {
		data.EnableInforms = types.BoolNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps"); !data.EnableTraps.IsNull() {
		if value.Exists() {
			data.EnableTraps = types.BoolValue(true)
		} else {
			data.EnableTraps = types.BoolValue(false)
		}
	} else {
		data.EnableTraps = types.BoolNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.authentication"); !data.EnableTrapsSnmpAuthentication.IsNull() {
		if value.Exists() {
			data.EnableTrapsSnmpAuthentication = types.BoolValue(true)
		} else {
			data.EnableTrapsSnmpAuthentication = types.BoolValue(false)
		}
	} else {
		data.EnableTrapsSnmpAuthentication = types.BoolNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.coldstart"); !data.EnableTrapsSnmpColdstart.IsNull() {
		if value.Exists() {
			data.EnableTrapsSnmpColdstart = types.BoolValue(true)
		} else {
			data.EnableTrapsSnmpColdstart = types.BoolValue(false)
		}
	} else {
		data.EnableTrapsSnmpColdstart = types.BoolNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.linkdown"); !data.EnableTrapsSnmpLinkdown.IsNull() {
		if value.Exists() {
			data.EnableTrapsSnmpLinkdown = types.BoolValue(true)
		} else {
			data.EnableTrapsSnmpLinkdown = types.BoolValue(false)
		}
	} else {
		data.EnableTrapsSnmpLinkdown = types.BoolNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.linkup"); !data.EnableTrapsSnmpLinkup.IsNull() {
		if value.Exists() {
			data.EnableTrapsSnmpLinkup = types.BoolValue(true)
		} else {
			data.EnableTrapsSnmpLinkup = types.BoolValue(false)
		}
	} else {
		data.EnableTrapsSnmpLinkup = types.BoolNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.warmstart"); !data.EnableTrapsSnmpWarmstart.IsNull() {
		if value.Exists() {
			data.EnableTrapsSnmpWarmstart = types.BoolValue(true)
		} else {
			data.EnableTrapsSnmpWarmstart = types.BoolValue(false)
		}
	} else {
		data.EnableTrapsSnmpWarmstart = types.BoolNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.GigabitEthernet"); value.Exists() && !data.SourceInterfaceInformsGigabitEthernet.IsNull() {
		data.SourceInterfaceInformsGigabitEthernet = types.StringValue(value.String())
	} else {
		data.SourceInterfaceInformsGigabitEthernet = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.TenGigabitEthernet"); value.Exists() && !data.SourceInterfaceInformsTenGigabitEthernet.IsNull() {
		data.SourceInterfaceInformsTenGigabitEthernet = types.StringValue(value.String())
	} else {
		data.SourceInterfaceInformsTenGigabitEthernet = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.FortyGigabitEthernet"); value.Exists() && !data.SourceInterfaceInformsFortyGigabitEthernet.IsNull() {
		data.SourceInterfaceInformsFortyGigabitEthernet = types.StringValue(value.String())
	} else {
		data.SourceInterfaceInformsFortyGigabitEthernet = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.HundredGigE"); value.Exists() && !data.SourceInterfaceInformsHundredGigE.IsNull() {
		data.SourceInterfaceInformsHundredGigE = types.StringValue(value.String())
	} else {
		data.SourceInterfaceInformsHundredGigE = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.Loopback"); value.Exists() && !data.SourceInterfaceInformsLoopback.IsNull() {
		data.SourceInterfaceInformsLoopback = types.Int64Value(value.Int())
	} else {
		data.SourceInterfaceInformsLoopback = types.Int64Null()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.Port-channel"); value.Exists() && !data.SourceInterfaceInformsPortChannel.IsNull() {
		data.SourceInterfaceInformsPortChannel = types.Int64Value(value.Int())
	} else {
		data.SourceInterfaceInformsPortChannel = types.Int64Null()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.Port-channel-subinterface.Port-channel"); value.Exists() && !data.SourceInterfaceInformsPortChannelSubinterface.IsNull() {
		data.SourceInterfaceInformsPortChannelSubinterface = types.StringValue(value.String())
	} else {
		data.SourceInterfaceInformsPortChannelSubinterface = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.Vlan"); value.Exists() && !data.SourceInterfaceInformsVlan.IsNull() {
		data.SourceInterfaceInformsVlan = types.Int64Value(value.Int())
	} else {
		data.SourceInterfaceInformsVlan = types.Int64Null()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.GigabitEthernet"); value.Exists() && !data.SourceInterfaceTrapsGigabitEthernet.IsNull() {
		data.SourceInterfaceTrapsGigabitEthernet = types.StringValue(value.String())
	} else {
		data.SourceInterfaceTrapsGigabitEthernet = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.TenGigabitEthernet"); value.Exists() && !data.SourceInterfaceTrapsTenGigabitEthernet.IsNull() {
		data.SourceInterfaceTrapsTenGigabitEthernet = types.StringValue(value.String())
	} else {
		data.SourceInterfaceTrapsTenGigabitEthernet = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.FortyGigabitEthernet"); value.Exists() && !data.SourceInterfaceTrapsFortyGigabitEthernet.IsNull() {
		data.SourceInterfaceTrapsFortyGigabitEthernet = types.StringValue(value.String())
	} else {
		data.SourceInterfaceTrapsFortyGigabitEthernet = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.HundredGigE"); value.Exists() && !data.SourceInterfaceTrapsHundredGigE.IsNull() {
		data.SourceInterfaceTrapsHundredGigE = types.StringValue(value.String())
	} else {
		data.SourceInterfaceTrapsHundredGigE = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.Loopback"); value.Exists() && !data.SourceInterfaceTrapsLoopback.IsNull() {
		data.SourceInterfaceTrapsLoopback = types.Int64Value(value.Int())
	} else {
		data.SourceInterfaceTrapsLoopback = types.Int64Null()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.Port-channel"); value.Exists() && !data.SourceInterfaceTrapsPortChannel.IsNull() {
		data.SourceInterfaceTrapsPortChannel = types.Int64Value(value.Int())
	} else {
		data.SourceInterfaceTrapsPortChannel = types.Int64Null()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.Port-channel-subinterface.Port-channel"); value.Exists() && !data.SourceInterfaceTrapsPortChannelSubinterface.IsNull() {
		data.SourceInterfaceTrapsPortChannelSubinterface = types.StringValue(value.String())
	} else {
		data.SourceInterfaceTrapsPortChannelSubinterface = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.Vlan"); value.Exists() && !data.SourceInterfaceTrapsVlan.IsNull() {
		data.SourceInterfaceTrapsVlan = types.Int64Value(value.Int())
	} else {
		data.SourceInterfaceTrapsVlan = types.Int64Null()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.GigabitEthernet"); value.Exists() && !data.TrapSourceGigabitEthernet.IsNull() {
		data.TrapSourceGigabitEthernet = types.StringValue(value.String())
	} else {
		data.TrapSourceGigabitEthernet = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.TenGigabitEthernet"); value.Exists() && !data.TrapSourceTenGigabitEthernet.IsNull() {
		data.TrapSourceTenGigabitEthernet = types.StringValue(value.String())
	} else {
		data.TrapSourceTenGigabitEthernet = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.FortyGigabitEthernet"); value.Exists() && !data.TrapSourceFortyGigabitEthernet.IsNull() {
		data.TrapSourceFortyGigabitEthernet = types.StringValue(value.String())
	} else {
		data.TrapSourceFortyGigabitEthernet = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.HundredGigE"); value.Exists() && !data.TrapSourceHundredGigE.IsNull() {
		data.TrapSourceHundredGigE = types.StringValue(value.String())
	} else {
		data.TrapSourceHundredGigE = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.Loopback"); value.Exists() && !data.TrapSourceLoopback.IsNull() {
		data.TrapSourceLoopback = types.Int64Value(value.Int())
	} else {
		data.TrapSourceLoopback = types.Int64Null()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.Port-channel"); value.Exists() && !data.TrapSourcePortChannel.IsNull() {
		data.TrapSourcePortChannel = types.Int64Value(value.Int())
	} else {
		data.TrapSourcePortChannel = types.Int64Null()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.Port-channel-subinterface.Port-channel"); value.Exists() && !data.TrapSourcePortChannelSubinterface.IsNull() {
		data.TrapSourcePortChannelSubinterface = types.StringValue(value.String())
	} else {
		data.TrapSourcePortChannelSubinterface = types.StringNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.Vlan"); value.Exists() && !data.TrapSourceVlan.IsNull() {
		data.TrapSourceVlan = types.Int64Value(value.Int())
	} else {
		data.TrapSourceVlan = types.Int64Null()
	}
	for i := range data.SnmpCommunities {
		keys := [...]string{"name"}
		keyValues := [...]string{data.SnmpCommunities[i].Name.ValueString()}

		var r gjson.Result
		res.Get(prefix + "Cisco-IOS-XE-snmp:community-config").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("name"); value.Exists() && !data.SnmpCommunities[i].Name.IsNull() {
			data.SnmpCommunities[i].Name = types.StringValue(value.String())
		} else {
			data.SnmpCommunities[i].Name = types.StringNull()
		}
		if value := r.Get("view"); value.Exists() && !data.SnmpCommunities[i].View.IsNull() {
			data.SnmpCommunities[i].View = types.StringValue(value.String())
		} else {
			data.SnmpCommunities[i].View = types.StringNull()
		}
		if value := r.Get("permission"); value.Exists() && !data.SnmpCommunities[i].Permission.IsNull() {
			data.SnmpCommunities[i].Permission = types.StringValue(value.String())
		} else {
			data.SnmpCommunities[i].Permission = types.StringNull()
		}
		if value := r.Get("ipv6"); value.Exists() && !data.SnmpCommunities[i].Ipv6.IsNull() {
			data.SnmpCommunities[i].Ipv6 = types.StringValue(value.String())
		} else {
			data.SnmpCommunities[i].Ipv6 = types.StringNull()
		}
		if value := r.Get("access-list-name"); value.Exists() && !data.SnmpCommunities[i].AccessListName.IsNull() {
			data.SnmpCommunities[i].AccessListName = types.StringValue(value.String())
		} else {
			data.SnmpCommunities[i].AccessListName = types.StringNull()
		}
	}
	for i := range data.Contexts {
		keys := [...]string{"name"}
		keyValues := [...]string{data.Contexts[i].Name.ValueString()}

		var r gjson.Result
		res.Get(prefix + "Cisco-IOS-XE-snmp:context").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("name"); value.Exists() && !data.Contexts[i].Name.IsNull() {
			data.Contexts[i].Name = types.StringValue(value.String())
		} else {
			data.Contexts[i].Name = types.StringNull()
		}
	}
	for i := range data.Views {
		keys := [...]string{"name", "mib"}
		keyValues := [...]string{data.Views[i].Name.ValueString(), data.Views[i].Mib.ValueString()}

		var r gjson.Result
		res.Get(prefix + "Cisco-IOS-XE-snmp:view").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("name"); value.Exists() && !data.Views[i].Name.IsNull() {
			data.Views[i].Name = types.StringValue(value.String())
		} else {
			data.Views[i].Name = types.StringNull()
		}
		if value := r.Get("mib"); value.Exists() && !data.Views[i].Mib.IsNull() {
			data.Views[i].Mib = types.StringValue(value.String())
		} else {
			data.Views[i].Mib = types.StringNull()
		}
		if value := r.Get("inc-exl"); value.Exists() && !data.Views[i].IncExl.IsNull() {
			data.Views[i].IncExl = types.StringValue(value.String())
		} else {
			data.Views[i].IncExl = types.StringNull()
		}
	}
}

func (data *SNMPServerData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:chassis-id"); value.Exists() {
		data.ChassisId = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:contact"); value.Exists() {
		data.Contact = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:ifindex.persist"); value.Exists() {
		data.IfindexPersist = types.BoolValue(true)
	} else {
		data.IfindexPersist = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:location"); value.Exists() {
		data.Location = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:packetsize"); value.Exists() {
		data.Packetsize = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:queue-length"); value.Exists() {
		data.QueueLength = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.logging.getop"); value.Exists() {
		data.EnableLoggingGetop = types.BoolValue(value.Bool())
	} else {
		data.EnableLoggingGetop = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.logging.setop"); value.Exists() {
		data.EnableLoggingSetop = types.BoolValue(value.Bool())
	} else {
		data.EnableLoggingSetop = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.informs"); value.Exists() {
		data.EnableInforms = types.BoolValue(true)
	} else {
		data.EnableInforms = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps"); value.Exists() {
		data.EnableTraps = types.BoolValue(true)
	} else {
		data.EnableTraps = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.authentication"); value.Exists() {
		data.EnableTrapsSnmpAuthentication = types.BoolValue(true)
	} else {
		data.EnableTrapsSnmpAuthentication = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.coldstart"); value.Exists() {
		data.EnableTrapsSnmpColdstart = types.BoolValue(true)
	} else {
		data.EnableTrapsSnmpColdstart = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.linkdown"); value.Exists() {
		data.EnableTrapsSnmpLinkdown = types.BoolValue(true)
	} else {
		data.EnableTrapsSnmpLinkdown = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.linkup"); value.Exists() {
		data.EnableTrapsSnmpLinkup = types.BoolValue(true)
	} else {
		data.EnableTrapsSnmpLinkup = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:enable.enable-choice.traps.snmp.warmstart"); value.Exists() {
		data.EnableTrapsSnmpWarmstart = types.BoolValue(true)
	} else {
		data.EnableTrapsSnmpWarmstart = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.GigabitEthernet"); value.Exists() {
		data.SourceInterfaceInformsGigabitEthernet = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.TenGigabitEthernet"); value.Exists() {
		data.SourceInterfaceInformsTenGigabitEthernet = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.FortyGigabitEthernet"); value.Exists() {
		data.SourceInterfaceInformsFortyGigabitEthernet = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.HundredGigE"); value.Exists() {
		data.SourceInterfaceInformsHundredGigE = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.Loopback"); value.Exists() {
		data.SourceInterfaceInformsLoopback = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.Port-channel"); value.Exists() {
		data.SourceInterfaceInformsPortChannel = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.Port-channel-subinterface.Port-channel"); value.Exists() {
		data.SourceInterfaceInformsPortChannelSubinterface = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.informs.Vlan"); value.Exists() {
		data.SourceInterfaceInformsVlan = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.GigabitEthernet"); value.Exists() {
		data.SourceInterfaceTrapsGigabitEthernet = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.TenGigabitEthernet"); value.Exists() {
		data.SourceInterfaceTrapsTenGigabitEthernet = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.FortyGigabitEthernet"); value.Exists() {
		data.SourceInterfaceTrapsFortyGigabitEthernet = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.HundredGigE"); value.Exists() {
		data.SourceInterfaceTrapsHundredGigE = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.Loopback"); value.Exists() {
		data.SourceInterfaceTrapsLoopback = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.Port-channel"); value.Exists() {
		data.SourceInterfaceTrapsPortChannel = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.Port-channel-subinterface.Port-channel"); value.Exists() {
		data.SourceInterfaceTrapsPortChannelSubinterface = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:source-interface.traps.Vlan"); value.Exists() {
		data.SourceInterfaceTrapsVlan = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.GigabitEthernet"); value.Exists() {
		data.TrapSourceGigabitEthernet = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.TenGigabitEthernet"); value.Exists() {
		data.TrapSourceTenGigabitEthernet = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.FortyGigabitEthernet"); value.Exists() {
		data.TrapSourceFortyGigabitEthernet = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.HundredGigE"); value.Exists() {
		data.TrapSourceHundredGigE = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.Loopback"); value.Exists() {
		data.TrapSourceLoopback = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.Port-channel"); value.Exists() {
		data.TrapSourcePortChannel = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.Port-channel-subinterface.Port-channel"); value.Exists() {
		data.TrapSourcePortChannelSubinterface = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:trap-source.Vlan"); value.Exists() {
		data.TrapSourceVlan = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:community-config"); value.Exists() {
		data.SnmpCommunities = make([]SNMPServerSnmpCommunities, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SNMPServerSnmpCommunities{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			if cValue := v.Get("view"); cValue.Exists() {
				item.View = types.StringValue(cValue.String())
			}
			if cValue := v.Get("permission"); cValue.Exists() {
				item.Permission = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ipv6"); cValue.Exists() {
				item.Ipv6 = types.StringValue(cValue.String())
			}
			if cValue := v.Get("access-list-name"); cValue.Exists() {
				item.AccessListName = types.StringValue(cValue.String())
			}
			data.SnmpCommunities = append(data.SnmpCommunities, item)
			return true
		})
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:context"); value.Exists() {
		data.Contexts = make([]SNMPServerContexts, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SNMPServerContexts{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			data.Contexts = append(data.Contexts, item)
			return true
		})
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-snmp:view"); value.Exists() {
		data.Views = make([]SNMPServerViews, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SNMPServerViews{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			if cValue := v.Get("mib"); cValue.Exists() {
				item.Mib = types.StringValue(cValue.String())
			}
			if cValue := v.Get("inc-exl"); cValue.Exists() {
				item.IncExl = types.StringValue(cValue.String())
			}
			data.Views = append(data.Views, item)
			return true
		})
	}
}

func (data *SNMPServer) getDeletedListItems(ctx context.Context, state SNMPServer) []string {
	deletedListItems := make([]string, 0)
	for i := range state.SnmpCommunities {
		stateKeyValues := [...]string{state.SnmpCommunities[i].Name.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.SnmpCommunities[i].Name.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.SnmpCommunities {
			found = true
			if state.SnmpCommunities[i].Name.ValueString() != data.SnmpCommunities[j].Name.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:community-config=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	for i := range state.Contexts {
		stateKeyValues := [...]string{state.Contexts[i].Name.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Contexts[i].Name.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Contexts {
			found = true
			if state.Contexts[i].Name.ValueString() != data.Contexts[j].Name.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:context=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	for i := range state.Views {
		stateKeyValues := [...]string{state.Views[i].Name.ValueString(), state.Views[i].Mib.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Views[i].Name.ValueString()).IsZero() {
			emptyKeys = false
		}
		if !reflect.ValueOf(state.Views[i].Mib.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Views {
			found = true
			if state.Views[i].Name.ValueString() != data.Views[j].Name.ValueString() {
				found = false
			}
			if state.Views[i].Mib.ValueString() != data.Views[j].Mib.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:view=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *SNMPServer) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.IfindexPersist.IsNull() && !data.IfindexPersist.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:ifindex/persist", data.getPath()))
	}
	if !data.EnableInforms.IsNull() && !data.EnableInforms.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/informs", data.getPath()))
	}
	if !data.EnableTraps.IsNull() && !data.EnableTraps.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps", data.getPath()))
	}
	if !data.EnableTrapsSnmpAuthentication.IsNull() && !data.EnableTrapsSnmpAuthentication.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps/snmp/authentication", data.getPath()))
	}
	if !data.EnableTrapsSnmpColdstart.IsNull() && !data.EnableTrapsSnmpColdstart.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps/snmp/coldstart", data.getPath()))
	}
	if !data.EnableTrapsSnmpLinkdown.IsNull() && !data.EnableTrapsSnmpLinkdown.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps/snmp/linkdown", data.getPath()))
	}
	if !data.EnableTrapsSnmpLinkup.IsNull() && !data.EnableTrapsSnmpLinkup.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps/snmp/linkup", data.getPath()))
	}
	if !data.EnableTrapsSnmpWarmstart.IsNull() && !data.EnableTrapsSnmpWarmstart.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps/snmp/warmstart", data.getPath()))
	}

	return emptyLeafsDelete
}

func (data *SNMPServer) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.ChassisId.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:chassis-id", data.getPath()))
	}
	if !data.Contact.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:contact", data.getPath()))
	}
	if !data.IfindexPersist.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:ifindex/persist", data.getPath()))
	}
	if !data.Location.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:location", data.getPath()))
	}
	if !data.Packetsize.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:packetsize", data.getPath()))
	}
	if !data.QueueLength.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:queue-length", data.getPath()))
	}
	if !data.EnableLoggingGetop.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/logging/getop", data.getPath()))
	}
	if !data.EnableLoggingSetop.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/logging/setop", data.getPath()))
	}
	if !data.EnableInforms.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/informs", data.getPath()))
	}
	if !data.EnableTraps.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps", data.getPath()))
	}
	if !data.EnableTrapsSnmpAuthentication.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps/snmp/authentication", data.getPath()))
	}
	if !data.EnableTrapsSnmpColdstart.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps/snmp/coldstart", data.getPath()))
	}
	if !data.EnableTrapsSnmpLinkdown.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps/snmp/linkdown", data.getPath()))
	}
	if !data.EnableTrapsSnmpLinkup.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps/snmp/linkup", data.getPath()))
	}
	if !data.EnableTrapsSnmpWarmstart.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:enable/enable-choice/traps/snmp/warmstart", data.getPath()))
	}
	if !data.SourceInterfaceInformsGigabitEthernet.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:source-interface/informs/GigabitEthernet", data.getPath()))
	}
	if !data.SourceInterfaceInformsTenGigabitEthernet.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:source-interface/informs/TenGigabitEthernet", data.getPath()))
	}
	if !data.SourceInterfaceInformsFortyGigabitEthernet.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:source-interface/informs/FortyGigabitEthernet", data.getPath()))
	}
	if !data.SourceInterfaceInformsHundredGigE.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:source-interface/informs/HundredGigE", data.getPath()))
	}
	if !data.SourceInterfaceInformsLoopback.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:source-interface/informs/Loopback", data.getPath()))
	}
	if !data.SourceInterfaceInformsPortChannel.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:source-interface/informs/Port-channel", data.getPath()))
	}
	if !data.SourceInterfaceInformsPortChannelSubinterface.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:source-interface/informs/Port-channel-subinterface/Port-channel", data.getPath()))
	}
	if !data.SourceInterfaceInformsVlan.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:source-interface/informs/Vlan", data.getPath()))
	}
	if !data.SourceInterfaceTrapsGigabitEthernet.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:source-interface/traps/GigabitEthernet", data.getPath()))
	}
	if !data.SourceInterfaceTrapsTenGigabitEthernet.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:source-interface/traps/TenGigabitEthernet", data.getPath()))
	}
	if !data.SourceInterfaceTrapsFortyGigabitEthernet.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:source-interface/traps/FortyGigabitEthernet", data.getPath()))
	}
	if !data.SourceInterfaceTrapsHundredGigE.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:source-interface/traps/HundredGigE", data.getPath()))
	}
	if !data.SourceInterfaceTrapsLoopback.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:source-interface/traps/Loopback", data.getPath()))
	}
	if !data.SourceInterfaceTrapsPortChannel.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:source-interface/traps/Port-channel", data.getPath()))
	}
	if !data.SourceInterfaceTrapsPortChannelSubinterface.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:source-interface/traps/Port-channel-subinterface/Port-channel", data.getPath()))
	}
	if !data.SourceInterfaceTrapsVlan.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:source-interface/traps/Vlan", data.getPath()))
	}
	if !data.TrapSourceGigabitEthernet.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:trap-source/GigabitEthernet", data.getPath()))
	}
	if !data.TrapSourceTenGigabitEthernet.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:trap-source/TenGigabitEthernet", data.getPath()))
	}
	if !data.TrapSourceFortyGigabitEthernet.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:trap-source/FortyGigabitEthernet", data.getPath()))
	}
	if !data.TrapSourceHundredGigE.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:trap-source/HundredGigE", data.getPath()))
	}
	if !data.TrapSourceLoopback.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:trap-source/Loopback", data.getPath()))
	}
	if !data.TrapSourcePortChannel.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:trap-source/Port-channel", data.getPath()))
	}
	if !data.TrapSourcePortChannelSubinterface.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:trap-source/Port-channel-subinterface/Port-channel", data.getPath()))
	}
	if !data.TrapSourceVlan.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:trap-source/Vlan", data.getPath()))
	}
	for i := range data.SnmpCommunities {
		keyValues := [...]string{data.SnmpCommunities[i].Name.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:community-config=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	for i := range data.Contexts {
		keyValues := [...]string{data.Contexts[i].Name.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:context=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	for i := range data.Views {
		keyValues := [...]string{data.Views[i].Name.ValueString(), data.Views[i].Mib.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-snmp:view=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	return deletePaths
}
