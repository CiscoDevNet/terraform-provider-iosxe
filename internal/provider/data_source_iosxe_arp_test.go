// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceIosxeARP(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_arp.test", "incomplete_entries", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_arp.test", "proxy_disable", "true"))
	if os.Getenv("C9000V") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_arp.test", "inspection_filters.0.name", "FIL1"))
		checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_arp.test", "inspection_filters.0.vlan.0.vlan_range", "3-5"))
		checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_arp.test", "inspection_filters.0.vlan.0.static", "true"))
	}
	if os.Getenv("C9000V") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_arp.test", "inspection_validate_src_mac", "true"))
	}
	if os.Getenv("C9000V") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_arp.test", "inspection_validate_dst_mac", "true"))
	}
	if os.Getenv("C9000V") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_arp.test", "inspection_validate_ip", "true"))
	}
	if os.Getenv("C9000V") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_arp.test", "inspection_validate_allow_zeros", "true"))
	}
	if os.Getenv("C9000V") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_arp.test", "inspection_log_buffer_entries", "10"))
	}
	if os.Getenv("C9000V") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_arp.test", "inspection_log_buffer_logs_entries", "10"))
	}
	if os.Getenv("C9000V") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_arp.test", "inspection_log_buffer_logs_interval", "1000"))
	}
	if os.Getenv("C9000V") != "" {
		checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_arp.test", "inspection_vlan", "6-8"))
	}
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxeARPConfig(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

func testAccDataSourceIosxeARPConfig() string {
	config := `resource "iosxe_arp" "test" {` + "\n"
	config += `	delete_mode = "attributes"` + "\n"
	config += `	incomplete_entries = 10` + "\n"
	config += `	proxy_disable = true` + "\n"
	if os.Getenv("C9000V") != "" {
		config += `	inspection_filters = [{` + "\n"
		config += `		name = "FIL1"` + "\n"
		config += `		vlan = [{` + "\n"
		config += `			vlan_range = "3-5"` + "\n"
		config += `			static = true` + "\n"
		config += `		}]` + "\n"
		config += `	}]` + "\n"
	}
	if os.Getenv("C9000V") != "" {
		config += `	inspection_validate_src_mac = true` + "\n"
	}
	if os.Getenv("C9000V") != "" {
		config += `	inspection_validate_dst_mac = true` + "\n"
	}
	if os.Getenv("C9000V") != "" {
		config += `	inspection_validate_ip = true` + "\n"
	}
	if os.Getenv("C9000V") != "" {
		config += `	inspection_validate_allow_zeros = true` + "\n"
	}
	if os.Getenv("C9000V") != "" {
		config += `	inspection_log_buffer_entries = 10` + "\n"
	}
	if os.Getenv("C9000V") != "" {
		config += `	inspection_log_buffer_logs_entries = 10` + "\n"
	}
	if os.Getenv("C9000V") != "" {
		config += `	inspection_log_buffer_logs_interval = 1000` + "\n"
	}
	if os.Getenv("C9000V") != "" {
		config += `	inspection_vlan = "6-8"` + "\n"
	}
	config += `}` + "\n"

	config += `
		data "iosxe_arp" "test" {
			depends_on = [iosxe_arp.test]
		}
	`
	return config
}
