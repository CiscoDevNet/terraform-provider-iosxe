// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type CryptoIKEv2Profile struct {
	Device                         types.String                                       `tfsdk:"device"`
	Id                             types.String                                       `tfsdk:"id"`
	DeleteMode                     types.String                                       `tfsdk:"delete_mode"`
	Name                           types.String                                       `tfsdk:"name"`
	MatchIdentityRemoteAddressIpv4 []CryptoIKEv2ProfileMatchIdentityRemoteAddressIpv4 `tfsdk:"match_identity_remote_address_ipv4"`
	AuthenticationRemotePreShare   types.Bool                                         `tfsdk:"authentication_remote_pre_share"`
	AuthenticationLocalPreShare    types.Bool                                         `tfsdk:"authentication_local_pre_share"`
	KeyringLocalName               types.String                                       `tfsdk:"keyring_local_name"`
	DpdInterval                    types.Int64                                        `tfsdk:"dpd_interval"`
	DpdRetry                       types.Int64                                        `tfsdk:"dpd_retry"`
	DpdQuery                       types.String                                       `tfsdk:"dpd_query"`
	ConfigExchangeRequest1         types.Bool                                         `tfsdk:"config_exchange_request_1"`
}

type CryptoIKEv2ProfileData struct {
	Device                         types.String                                       `tfsdk:"device"`
	Id                             types.String                                       `tfsdk:"id"`
	Name                           types.String                                       `tfsdk:"name"`
	MatchIdentityRemoteAddressIpv4 []CryptoIKEv2ProfileMatchIdentityRemoteAddressIpv4 `tfsdk:"match_identity_remote_address_ipv4"`
	AuthenticationRemotePreShare   types.Bool                                         `tfsdk:"authentication_remote_pre_share"`
	AuthenticationLocalPreShare    types.Bool                                         `tfsdk:"authentication_local_pre_share"`
	KeyringLocalName               types.String                                       `tfsdk:"keyring_local_name"`
	DpdInterval                    types.Int64                                        `tfsdk:"dpd_interval"`
	DpdRetry                       types.Int64                                        `tfsdk:"dpd_retry"`
	DpdQuery                       types.String                                       `tfsdk:"dpd_query"`
	ConfigExchangeRequest1         types.Bool                                         `tfsdk:"config_exchange_request_1"`
}
type CryptoIKEv2ProfileMatchIdentityRemoteAddressIpv4 struct {
	Ipv4Address types.String `tfsdk:"ipv4_address"`
	Ipv4Mask    types.String `tfsdk:"ipv4_mask"`
}

func (data CryptoIKEv2Profile) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ikev2/profile=%v", url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
}

func (data CryptoIKEv2ProfileData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ikev2/profile=%v", url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
}

// if last path element has a key -> remove it
func (data CryptoIKEv2Profile) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data CryptoIKEv2Profile) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Name.IsNull() && !data.Name.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"name", data.Name.ValueString())
	}
	if !data.AuthenticationRemotePreShare.IsNull() && !data.AuthenticationRemotePreShare.IsUnknown() {
		if data.AuthenticationRemotePreShare.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"authentication.remote.pre-share", map[string]string{})
		}
	}
	if !data.AuthenticationLocalPreShare.IsNull() && !data.AuthenticationLocalPreShare.IsUnknown() {
		if data.AuthenticationLocalPreShare.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"authentication.local.pre-share", map[string]string{})
		}
	}
	if !data.KeyringLocalName.IsNull() && !data.KeyringLocalName.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"keyring.local.name", data.KeyringLocalName.ValueString())
	}
	if !data.DpdInterval.IsNull() && !data.DpdInterval.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"dpd.interval", strconv.FormatInt(data.DpdInterval.ValueInt64(), 10))
	}
	if !data.DpdRetry.IsNull() && !data.DpdRetry.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"dpd.retry", strconv.FormatInt(data.DpdRetry.ValueInt64(), 10))
	}
	if !data.DpdQuery.IsNull() && !data.DpdQuery.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"dpd.query", data.DpdQuery.ValueString())
	}
	if !data.ConfigExchangeRequest1.IsNull() && !data.ConfigExchangeRequest1.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"config-exchange.request-1", data.ConfigExchangeRequest1.ValueBool())
	}
	if len(data.MatchIdentityRemoteAddressIpv4) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"match.identity.remote.address.ipv4", []interface{}{})
		for index, item := range data.MatchIdentityRemoteAddressIpv4 {
			if !item.Ipv4Address.IsNull() && !item.Ipv4Address.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"match.identity.remote.address.ipv4"+"."+strconv.Itoa(index)+"."+"ipv4-address", item.Ipv4Address.ValueString())
			}
			if !item.Ipv4Mask.IsNull() && !item.Ipv4Mask.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"match.identity.remote.address.ipv4"+"."+strconv.Itoa(index)+"."+"ipv4-mask", item.Ipv4Mask.ValueString())
			}
		}
	}
	return body
}

func (data *CryptoIKEv2Profile) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "name"); value.Exists() && !data.Name.IsNull() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	for i := range data.MatchIdentityRemoteAddressIpv4 {
		keys := [...]string{"ipv4-address"}
		keyValues := [...]string{data.MatchIdentityRemoteAddressIpv4[i].Ipv4Address.ValueString()}

		var r gjson.Result
		res.Get(prefix + "match.identity.remote.address.ipv4").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("ipv4-address"); value.Exists() && !data.MatchIdentityRemoteAddressIpv4[i].Ipv4Address.IsNull() {
			data.MatchIdentityRemoteAddressIpv4[i].Ipv4Address = types.StringValue(value.String())
		} else {
			data.MatchIdentityRemoteAddressIpv4[i].Ipv4Address = types.StringNull()
		}
		if value := r.Get("ipv4-mask"); value.Exists() && !data.MatchIdentityRemoteAddressIpv4[i].Ipv4Mask.IsNull() {
			data.MatchIdentityRemoteAddressIpv4[i].Ipv4Mask = types.StringValue(value.String())
		} else {
			data.MatchIdentityRemoteAddressIpv4[i].Ipv4Mask = types.StringNull()
		}
	}
	if value := res.Get(prefix + "authentication.remote.pre-share"); !data.AuthenticationRemotePreShare.IsNull() {
		if value.Exists() {
			data.AuthenticationRemotePreShare = types.BoolValue(true)
		} else {
			data.AuthenticationRemotePreShare = types.BoolValue(false)
		}
	} else {
		data.AuthenticationRemotePreShare = types.BoolNull()
	}
	if value := res.Get(prefix + "authentication.local.pre-share"); !data.AuthenticationLocalPreShare.IsNull() {
		if value.Exists() {
			data.AuthenticationLocalPreShare = types.BoolValue(true)
		} else {
			data.AuthenticationLocalPreShare = types.BoolValue(false)
		}
	} else {
		data.AuthenticationLocalPreShare = types.BoolNull()
	}
	if value := res.Get(prefix + "keyring.local.name"); value.Exists() && !data.KeyringLocalName.IsNull() {
		data.KeyringLocalName = types.StringValue(value.String())
	} else {
		data.KeyringLocalName = types.StringNull()
	}
	if value := res.Get(prefix + "dpd.interval"); value.Exists() && !data.DpdInterval.IsNull() {
		data.DpdInterval = types.Int64Value(value.Int())
	} else {
		data.DpdInterval = types.Int64Null()
	}
	if value := res.Get(prefix + "dpd.retry"); value.Exists() && !data.DpdRetry.IsNull() {
		data.DpdRetry = types.Int64Value(value.Int())
	} else {
		data.DpdRetry = types.Int64Null()
	}
	if value := res.Get(prefix + "dpd.query"); value.Exists() && !data.DpdQuery.IsNull() {
		data.DpdQuery = types.StringValue(value.String())
	} else {
		data.DpdQuery = types.StringNull()
	}
	if value := res.Get(prefix + "config-exchange.request-1"); !data.ConfigExchangeRequest1.IsNull() {
		if value.Exists() {
			data.ConfigExchangeRequest1 = types.BoolValue(value.Bool())
		}
	} else {
		data.ConfigExchangeRequest1 = types.BoolNull()
	}
}

func (data *CryptoIKEv2ProfileData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "match.identity.remote.address.ipv4"); value.Exists() {
		data.MatchIdentityRemoteAddressIpv4 = make([]CryptoIKEv2ProfileMatchIdentityRemoteAddressIpv4, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := CryptoIKEv2ProfileMatchIdentityRemoteAddressIpv4{}
			if cValue := v.Get("ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("ipv4-mask"); cValue.Exists() {
				item.Ipv4Mask = types.StringValue(cValue.String())
			}
			data.MatchIdentityRemoteAddressIpv4 = append(data.MatchIdentityRemoteAddressIpv4, item)
			return true
		})
	}
	if value := res.Get(prefix + "authentication.remote.pre-share"); value.Exists() {
		data.AuthenticationRemotePreShare = types.BoolValue(true)
	} else {
		data.AuthenticationRemotePreShare = types.BoolValue(false)
	}
	if value := res.Get(prefix + "authentication.local.pre-share"); value.Exists() {
		data.AuthenticationLocalPreShare = types.BoolValue(true)
	} else {
		data.AuthenticationLocalPreShare = types.BoolValue(false)
	}
	if value := res.Get(prefix + "keyring.local.name"); value.Exists() {
		data.KeyringLocalName = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "dpd.interval"); value.Exists() {
		data.DpdInterval = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "dpd.retry"); value.Exists() {
		data.DpdRetry = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "dpd.query"); value.Exists() {
		data.DpdQuery = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "config-exchange.request-1"); value.Exists() {
		data.ConfigExchangeRequest1 = types.BoolValue(value.Bool())
	} else {
		data.ConfigExchangeRequest1 = types.BoolValue(false)
	}
}

func (data *CryptoIKEv2Profile) getDeletedListItems(ctx context.Context, state CryptoIKEv2Profile) []string {
	deletedListItems := make([]string, 0)
	for i := range state.MatchIdentityRemoteAddressIpv4 {
		stateKeyValues := [...]string{state.MatchIdentityRemoteAddressIpv4[i].Ipv4Address.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.MatchIdentityRemoteAddressIpv4[i].Ipv4Address.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.MatchIdentityRemoteAddressIpv4 {
			found = true
			if state.MatchIdentityRemoteAddressIpv4[i].Ipv4Address.ValueString() != data.MatchIdentityRemoteAddressIpv4[j].Ipv4Address.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/match/identity/remote/address/ipv4=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *CryptoIKEv2Profile) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	if !data.AuthenticationRemotePreShare.IsNull() && !data.AuthenticationRemotePreShare.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/authentication/remote/pre-share", data.getPath()))
	}
	if !data.AuthenticationLocalPreShare.IsNull() && !data.AuthenticationLocalPreShare.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/authentication/local/pre-share", data.getPath()))
	}
	return emptyLeafsDelete
}

func (data *CryptoIKEv2Profile) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	for i := range data.MatchIdentityRemoteAddressIpv4 {
		keyValues := [...]string{data.MatchIdentityRemoteAddressIpv4[i].Ipv4Address.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/match/identity/remote/address/ipv4=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	if !data.AuthenticationRemotePreShare.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/authentication/remote/pre-share", data.getPath()))
	}
	if !data.AuthenticationLocalPreShare.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/authentication/local/pre-share", data.getPath()))
	}
	if !data.KeyringLocalName.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/keyring/local/name", data.getPath()))
	}
	if !data.DpdInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/dpd/interval", data.getPath()))
	}
	if !data.DpdRetry.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/dpd/retry", data.getPath()))
	}
	if !data.DpdQuery.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/dpd/query", data.getPath()))
	}
	if !data.ConfigExchangeRequest1.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/config-exchange/request-1", data.getPath()))
	}
	return deletePaths
}
