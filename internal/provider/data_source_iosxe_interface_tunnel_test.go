// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceIosxeInterfaceTunnel(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_tunnel.test", "ipv6_enable", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_tunnel.test", "ipv6_mtu", "1300"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_tunnel.test", "ipv6_nd_suppress_all", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_tunnel.test", "ipv6_address_dhcp", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_tunnel.test", "ipv6_link_local_address.0.address", "fe80::9656:d028:8652:66b6"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_tunnel.test", "ipv6_link_local_address.0.link_local", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_tunnel.test", "ipv6_prefix_list_address.0.prefix", "2001:DB8::/32"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_tunnel.test", "ipv6_prefix_list_address.0.eui_64", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_tunnel.test", "crypto_ipsec_df_bit", "clear"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_tunnel.test", "ip_primary_address", "170.254.10.2"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_tunnel.test", "ip_primary_address_mask", "255.255.255.252"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxeInterfaceTunnelConfig(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

func testAccDataSourceIosxeInterfaceTunnelConfig() string {
	config := `resource "iosxe_interface_tunnel" "test" {` + "\n"
	config += `	delete_mode = "attributes"` + "\n"
	config += `	name = 90` + "\n"
	config += `	ipv6_enable = true` + "\n"
	config += `	ipv6_mtu = 1300` + "\n"
	config += `	ipv6_nd_suppress_all = true` + "\n"
	config += `	ipv6_address_dhcp = true` + "\n"
	config += `	ipv6_link_local_address = [{` + "\n"
	config += `		address = "fe80::9656:d028:8652:66b6"` + "\n"
	config += `		link_local = true` + "\n"
	config += `	}]` + "\n"
	config += `	ipv6_prefix_list_address = [{` + "\n"
	config += `		prefix = "2001:DB8::/32"` + "\n"
	config += `		eui_64 = true` + "\n"
	config += `	}]` + "\n"
	config += `	crypto_ipsec_df_bit = "clear"` + "\n"
	config += `	ip_primary_address = "170.254.10.2"` + "\n"
	config += `	ip_primary_address_mask = "255.255.255.252"` + "\n"
	config += `}` + "\n"

	config += `
		data "iosxe_interface_tunnel" "test" {
			name = 90
			depends_on = [iosxe_interface_tunnel.test]
		}
	`
	return config
}
