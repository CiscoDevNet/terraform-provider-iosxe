// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type CryptoIKEv2Proposal struct {
	Device         types.String                        `tfsdk:"device"`
	Id             types.String                        `tfsdk:"id"`
	Ikev2Proposals []CryptoIKEv2ProposalIkev2Proposals `tfsdk:"ikev2_proposals"`
}

type CryptoIKEv2ProposalData struct {
	Device         types.String                        `tfsdk:"device"`
	Id             types.String                        `tfsdk:"id"`
	Ikev2Proposals []CryptoIKEv2ProposalIkev2Proposals `tfsdk:"ikev2_proposals"`
}
type CryptoIKEv2ProposalIkev2Proposals struct {
	Name                types.String `tfsdk:"name"`
	EncryptionAesCbc256 types.Bool   `tfsdk:"encryption_aes_cbc_256"`
	GroupFourteen       types.Bool   `tfsdk:"group_fourteen"`
	GroupNineteen       types.Bool   `tfsdk:"group_nineteen"`
	GroupTwenty         types.Bool   `tfsdk:"group_twenty"`
	IntegritySha1       types.Bool   `tfsdk:"integrity_sha1"`
}

func (data CryptoIKEv2Proposal) getPath() string {
	return "Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ikev2"
}

func (data CryptoIKEv2ProposalData) getPath() string {
	return "Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ikev2"
}

// if last path element has a key -> remove it
func (data CryptoIKEv2Proposal) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data CryptoIKEv2Proposal) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if len(data.Ikev2Proposals) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"proposal", []interface{}{})
		for index, item := range data.Ikev2Proposals {
			if !item.Name.IsNull() && !item.Name.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"proposal"+"."+strconv.Itoa(index)+"."+"name", item.Name.ValueString())
			}
			if !item.EncryptionAesCbc256.IsNull() && !item.EncryptionAesCbc256.IsUnknown() {
				if item.EncryptionAesCbc256.ValueBool() {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"proposal"+"."+strconv.Itoa(index)+"."+"encryption.aes-cbc-256", map[string]string{})
				}
			}
			if !item.GroupFourteen.IsNull() && !item.GroupFourteen.IsUnknown() {
				if item.GroupFourteen.ValueBool() {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"proposal"+"."+strconv.Itoa(index)+"."+"group.fourteen", map[string]string{})
				}
			}
			if !item.GroupNineteen.IsNull() && !item.GroupNineteen.IsUnknown() {
				if item.GroupNineteen.ValueBool() {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"proposal"+"."+strconv.Itoa(index)+"."+"group.nineteen", map[string]string{})
				}
			}
			if !item.GroupTwenty.IsNull() && !item.GroupTwenty.IsUnknown() {
				if item.GroupTwenty.ValueBool() {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"proposal"+"."+strconv.Itoa(index)+"."+"group.twenty", map[string]string{})
				}
			}
			if !item.IntegritySha1.IsNull() && !item.IntegritySha1.IsUnknown() {
				if item.IntegritySha1.ValueBool() {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"proposal"+"."+strconv.Itoa(index)+"."+"integrity.sha1", map[string]string{})
				}
			}
		}
	}
	return body
}

func (data *CryptoIKEv2Proposal) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	for i := range data.Ikev2Proposals {
		keys := [...]string{"name"}
		keyValues := [...]string{data.Ikev2Proposals[i].Name.ValueString()}

		var r gjson.Result
		res.Get(prefix + "proposal").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("name"); value.Exists() && !data.Ikev2Proposals[i].Name.IsNull() {
			data.Ikev2Proposals[i].Name = types.StringValue(value.String())
		} else {
			data.Ikev2Proposals[i].Name = types.StringNull()
		}
		if value := r.Get("encryption.aes-cbc-256"); !data.Ikev2Proposals[i].EncryptionAesCbc256.IsNull() {
			if value.Exists() {
				data.Ikev2Proposals[i].EncryptionAesCbc256 = types.BoolValue(true)
			} else {
				data.Ikev2Proposals[i].EncryptionAesCbc256 = types.BoolValue(false)
			}
		} else {
			data.Ikev2Proposals[i].EncryptionAesCbc256 = types.BoolNull()
		}
		if value := r.Get("group.fourteen"); !data.Ikev2Proposals[i].GroupFourteen.IsNull() {
			if value.Exists() {
				data.Ikev2Proposals[i].GroupFourteen = types.BoolValue(true)
			} else {
				data.Ikev2Proposals[i].GroupFourteen = types.BoolValue(false)
			}
		} else {
			data.Ikev2Proposals[i].GroupFourteen = types.BoolNull()
		}
		if value := r.Get("group.nineteen"); !data.Ikev2Proposals[i].GroupNineteen.IsNull() {
			if value.Exists() {
				data.Ikev2Proposals[i].GroupNineteen = types.BoolValue(true)
			} else {
				data.Ikev2Proposals[i].GroupNineteen = types.BoolValue(false)
			}
		} else {
			data.Ikev2Proposals[i].GroupNineteen = types.BoolNull()
		}
		if value := r.Get("group.twenty"); !data.Ikev2Proposals[i].GroupTwenty.IsNull() {
			if value.Exists() {
				data.Ikev2Proposals[i].GroupTwenty = types.BoolValue(true)
			} else {
				data.Ikev2Proposals[i].GroupTwenty = types.BoolValue(false)
			}
		} else {
			data.Ikev2Proposals[i].GroupTwenty = types.BoolNull()
		}
		if value := r.Get("integrity.sha1"); !data.Ikev2Proposals[i].IntegritySha1.IsNull() {
			if value.Exists() {
				data.Ikev2Proposals[i].IntegritySha1 = types.BoolValue(true)
			} else {
				data.Ikev2Proposals[i].IntegritySha1 = types.BoolValue(false)
			}
		} else {
			data.Ikev2Proposals[i].IntegritySha1 = types.BoolNull()
		}
	}
}

func (data *CryptoIKEv2ProposalData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "proposal"); value.Exists() {
		data.Ikev2Proposals = make([]CryptoIKEv2ProposalIkev2Proposals, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := CryptoIKEv2ProposalIkev2Proposals{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			if cValue := v.Get("encryption.aes-cbc-256"); cValue.Exists() {
				item.EncryptionAesCbc256 = types.BoolValue(true)
			} else {
				item.EncryptionAesCbc256 = types.BoolValue(false)
			}
			if cValue := v.Get("group.fourteen"); cValue.Exists() {
				item.GroupFourteen = types.BoolValue(true)
			} else {
				item.GroupFourteen = types.BoolValue(false)
			}
			if cValue := v.Get("group.nineteen"); cValue.Exists() {
				item.GroupNineteen = types.BoolValue(true)
			} else {
				item.GroupNineteen = types.BoolValue(false)
			}
			if cValue := v.Get("group.twenty"); cValue.Exists() {
				item.GroupTwenty = types.BoolValue(true)
			} else {
				item.GroupTwenty = types.BoolValue(false)
			}
			if cValue := v.Get("integrity.sha1"); cValue.Exists() {
				item.IntegritySha1 = types.BoolValue(true)
			} else {
				item.IntegritySha1 = types.BoolValue(false)
			}
			data.Ikev2Proposals = append(data.Ikev2Proposals, item)
			return true
		})
	}
}

func (data *CryptoIKEv2Proposal) getDeletedListItems(ctx context.Context, state CryptoIKEv2Proposal) []string {
	deletedListItems := make([]string, 0)
	for i := range state.Ikev2Proposals {
		stateKeyValues := [...]string{state.Ikev2Proposals[i].Name.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Ikev2Proposals[i].Name.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Ikev2Proposals {
			found = true
			if state.Ikev2Proposals[i].Name.ValueString() != data.Ikev2Proposals[j].Name.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/proposal=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *CryptoIKEv2Proposal) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	for i := range data.Ikev2Proposals {
		keyValues := [...]string{data.Ikev2Proposals[i].Name.ValueString()}
		if !data.Ikev2Proposals[i].EncryptionAesCbc256.IsNull() && !data.Ikev2Proposals[i].EncryptionAesCbc256.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/proposal=%v/encryption/aes-cbc-256", data.getPath(), strings.Join(keyValues[:], ",")))
		}
		if !data.Ikev2Proposals[i].GroupFourteen.IsNull() && !data.Ikev2Proposals[i].GroupFourteen.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/proposal=%v/group/fourteen", data.getPath(), strings.Join(keyValues[:], ",")))
		}
		if !data.Ikev2Proposals[i].GroupNineteen.IsNull() && !data.Ikev2Proposals[i].GroupNineteen.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/proposal=%v/group/nineteen", data.getPath(), strings.Join(keyValues[:], ",")))
		}
		if !data.Ikev2Proposals[i].GroupTwenty.IsNull() && !data.Ikev2Proposals[i].GroupTwenty.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/proposal=%v/group/twenty", data.getPath(), strings.Join(keyValues[:], ",")))
		}
		if !data.Ikev2Proposals[i].IntegritySha1.IsNull() && !data.Ikev2Proposals[i].IntegritySha1.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/proposal=%v/integrity/sha1", data.getPath(), strings.Join(keyValues[:], ",")))
		}
	}
	return emptyLeafsDelete
}

func (data *CryptoIKEv2Proposal) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	for i := range data.Ikev2Proposals {
		keyValues := [...]string{data.Ikev2Proposals[i].Name.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/proposal=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	return deletePaths
}
