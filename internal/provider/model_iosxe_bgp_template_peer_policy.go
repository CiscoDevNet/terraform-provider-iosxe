// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin types
type BGPTemplatePeerPolicy struct {
	Device                 types.String                     `tfsdk:"device"`
	Id                     types.String                     `tfsdk:"id"`
	DeleteMode             types.String                     `tfsdk:"delete_mode"`
	Asn                    types.String                     `tfsdk:"asn"`
	Name                   types.String                     `tfsdk:"name"`
	RouteReflectorClient   types.Bool                       `tfsdk:"route_reflector_client"`
	SendCommunity          types.String                     `tfsdk:"send_community"`
	RouteMaps              []BGPTemplatePeerPolicyRouteMaps `tfsdk:"route_maps"`
	AllowasInAsNumber      types.Int64                      `tfsdk:"allowas_in_as_number"`
	AsOverrideSplitHorizon types.Bool                       `tfsdk:"as_override_split_horizon"`
}

type BGPTemplatePeerPolicyData struct {
	Device                 types.String                     `tfsdk:"device"`
	Id                     types.String                     `tfsdk:"id"`
	Asn                    types.String                     `tfsdk:"asn"`
	Name                   types.String                     `tfsdk:"name"`
	RouteReflectorClient   types.Bool                       `tfsdk:"route_reflector_client"`
	SendCommunity          types.String                     `tfsdk:"send_community"`
	RouteMaps              []BGPTemplatePeerPolicyRouteMaps `tfsdk:"route_maps"`
	AllowasInAsNumber      types.Int64                      `tfsdk:"allowas_in_as_number"`
	AsOverrideSplitHorizon types.Bool                       `tfsdk:"as_override_split_horizon"`
}
type BGPTemplatePeerPolicyRouteMaps struct {
	InOut        types.String `tfsdk:"in_out"`
	RouteMapName types.String `tfsdk:"route_map_name"`
}

// End of section. //template:end types

// Section below is generated&owned by "gen/generator.go". //template:begin getPath

func (data BGPTemplatePeerPolicy) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=%v/template/peer-policy=%v", url.QueryEscape(fmt.Sprintf("%v", data.Asn.ValueString())), url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
}

func (data BGPTemplatePeerPolicyData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=%v/template/peer-policy=%v", url.QueryEscape(fmt.Sprintf("%v", data.Asn.ValueString())), url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
}

// if last path element has a key -> remove it
func (data BGPTemplatePeerPolicy) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

// End of section. //template:end getPath

// Section below is generated&owned by "gen/generator.go". //template:begin toBody

func (data BGPTemplatePeerPolicy) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Name.IsNull() && !data.Name.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"name", data.Name.ValueString())
	}
	if !data.RouteReflectorClient.IsNull() && !data.RouteReflectorClient.IsUnknown() {
		if data.RouteReflectorClient.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"route-reflector-client", map[string]string{})
		}
	}
	if !data.SendCommunity.IsNull() && !data.SendCommunity.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"send-community.send-community-where", data.SendCommunity.ValueString())
	}
	if !data.AllowasInAsNumber.IsNull() && !data.AllowasInAsNumber.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"allowas-in.as-number", strconv.FormatInt(data.AllowasInAsNumber.ValueInt64(), 10))
	}
	if !data.AsOverrideSplitHorizon.IsNull() && !data.AsOverrideSplitHorizon.IsUnknown() {
		if data.AsOverrideSplitHorizon.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"as-override.split-horizon", map[string]string{})
		}
	}
	if len(data.RouteMaps) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"route-map1", []interface{}{})
		for index, item := range data.RouteMaps {
			if !item.InOut.IsNull() && !item.InOut.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"route-map1"+"."+strconv.Itoa(index)+"."+"inout", item.InOut.ValueString())
			}
			if !item.RouteMapName.IsNull() && !item.RouteMapName.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"route-map1"+"."+strconv.Itoa(index)+"."+"route-map-name", item.RouteMapName.ValueString())
			}
		}
	}
	return body
}

// End of section. //template:end toBody

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBody

func (data *BGPTemplatePeerPolicy) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "name"); value.Exists() && !data.Name.IsNull() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get(prefix + "route-reflector-client"); !data.RouteReflectorClient.IsNull() {
		if value.Exists() {
			data.RouteReflectorClient = types.BoolValue(true)
		} else {
			data.RouteReflectorClient = types.BoolValue(false)
		}
	} else {
		data.RouteReflectorClient = types.BoolNull()
	}
	if value := res.Get(prefix + "send-community.send-community-where"); value.Exists() && !data.SendCommunity.IsNull() {
		data.SendCommunity = types.StringValue(value.String())
	} else {
		data.SendCommunity = types.StringNull()
	}
	for i := range data.RouteMaps {
		keys := [...]string{"inout"}
		keyValues := [...]string{data.RouteMaps[i].InOut.ValueString()}

		var r gjson.Result
		res.Get(prefix + "route-map1").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("inout"); value.Exists() && !data.RouteMaps[i].InOut.IsNull() {
			data.RouteMaps[i].InOut = types.StringValue(value.String())
		} else {
			data.RouteMaps[i].InOut = types.StringNull()
		}
		if value := r.Get("route-map-name"); value.Exists() && !data.RouteMaps[i].RouteMapName.IsNull() {
			data.RouteMaps[i].RouteMapName = types.StringValue(value.String())
		} else {
			data.RouteMaps[i].RouteMapName = types.StringNull()
		}
	}
	if value := res.Get(prefix + "allowas-in.as-number"); value.Exists() && !data.AllowasInAsNumber.IsNull() {
		data.AllowasInAsNumber = types.Int64Value(value.Int())
	} else {
		data.AllowasInAsNumber = types.Int64Null()
	}
	if value := res.Get(prefix + "as-override.split-horizon"); !data.AsOverrideSplitHorizon.IsNull() {
		if value.Exists() {
			data.AsOverrideSplitHorizon = types.BoolValue(true)
		} else {
			data.AsOverrideSplitHorizon = types.BoolValue(false)
		}
	} else {
		data.AsOverrideSplitHorizon = types.BoolNull()
	}
}

// End of section. //template:end updateFromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBody

func (data *BGPTemplatePeerPolicy) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "route-reflector-client"); value.Exists() {
		data.RouteReflectorClient = types.BoolValue(true)
	} else {
		data.RouteReflectorClient = types.BoolValue(false)
	}
	if value := res.Get(prefix + "send-community.send-community-where"); value.Exists() {
		data.SendCommunity = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "route-map1"); value.Exists() {
		data.RouteMaps = make([]BGPTemplatePeerPolicyRouteMaps, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := BGPTemplatePeerPolicyRouteMaps{}
			if cValue := v.Get("inout"); cValue.Exists() {
				item.InOut = types.StringValue(cValue.String())
			}
			if cValue := v.Get("route-map-name"); cValue.Exists() {
				item.RouteMapName = types.StringValue(cValue.String())
			}
			data.RouteMaps = append(data.RouteMaps, item)
			return true
		})
	}
	if value := res.Get(prefix + "allowas-in.as-number"); value.Exists() {
		data.AllowasInAsNumber = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "as-override.split-horizon"); value.Exists() {
		data.AsOverrideSplitHorizon = types.BoolValue(true)
	} else {
		data.AsOverrideSplitHorizon = types.BoolValue(false)
	}
}

// End of section. //template:end fromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyData

func (data *BGPTemplatePeerPolicyData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "route-reflector-client"); value.Exists() {
		data.RouteReflectorClient = types.BoolValue(true)
	} else {
		data.RouteReflectorClient = types.BoolValue(false)
	}
	if value := res.Get(prefix + "send-community.send-community-where"); value.Exists() {
		data.SendCommunity = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "route-map1"); value.Exists() {
		data.RouteMaps = make([]BGPTemplatePeerPolicyRouteMaps, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := BGPTemplatePeerPolicyRouteMaps{}
			if cValue := v.Get("inout"); cValue.Exists() {
				item.InOut = types.StringValue(cValue.String())
			}
			if cValue := v.Get("route-map-name"); cValue.Exists() {
				item.RouteMapName = types.StringValue(cValue.String())
			}
			data.RouteMaps = append(data.RouteMaps, item)
			return true
		})
	}
	if value := res.Get(prefix + "allowas-in.as-number"); value.Exists() {
		data.AllowasInAsNumber = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "as-override.split-horizon"); value.Exists() {
		data.AsOverrideSplitHorizon = types.BoolValue(true)
	} else {
		data.AsOverrideSplitHorizon = types.BoolValue(false)
	}
}

// End of section. //template:end fromBodyData

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletedItems

func (data *BGPTemplatePeerPolicy) getDeletedItems(ctx context.Context, state BGPTemplatePeerPolicy) []string {
	deletedItems := make([]string, 0)
	if !state.AsOverrideSplitHorizon.IsNull() && data.AsOverrideSplitHorizon.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/as-override/split-horizon", state.getPath()))
	}
	if !state.AllowasInAsNumber.IsNull() && data.AllowasInAsNumber.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/allowas-in/as-number", state.getPath()))
	}
	for i := range state.RouteMaps {
		stateKeyValues := [...]string{state.RouteMaps[i].InOut.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.RouteMaps[i].InOut.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.RouteMaps {
			found = true
			if state.RouteMaps[i].InOut.ValueString() != data.RouteMaps[j].InOut.ValueString() {
				found = false
			}
			if found {
				if !state.RouteMaps[i].RouteMapName.IsNull() && data.RouteMaps[j].RouteMapName.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/route-map1=%v/route-map-name", state.getPath(), strings.Join(stateKeyValues[:], ",")))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/route-map1=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	if !state.SendCommunity.IsNull() && data.SendCommunity.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/send-community/send-community-where", state.getPath()))
	}
	if !state.RouteReflectorClient.IsNull() && data.RouteReflectorClient.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/route-reflector-client", state.getPath()))
	}

	return deletedItems
}

// End of section. //template:end getDeletedItems

// Section below is generated&owned by "gen/generator.go". //template:begin getEmptyLeafsDelete

func (data *BGPTemplatePeerPolicy) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.AsOverrideSplitHorizon.IsNull() && !data.AsOverrideSplitHorizon.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/as-override/split-horizon", data.getPath()))
	}

	if !data.RouteReflectorClient.IsNull() && !data.RouteReflectorClient.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/route-reflector-client", data.getPath()))
	}

	return emptyLeafsDelete
}

// End of section. //template:end getEmptyLeafsDelete

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletePaths

func (data *BGPTemplatePeerPolicy) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.AsOverrideSplitHorizon.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/as-override/split-horizon", data.getPath()))
	}
	if !data.AllowasInAsNumber.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/allowas-in/as-number", data.getPath()))
	}
	for i := range data.RouteMaps {
		keyValues := [...]string{data.RouteMaps[i].InOut.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/route-map1=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	if !data.SendCommunity.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/send-community/send-community-where", data.getPath()))
	}
	if !data.RouteReflectorClient.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/route-reflector-client", data.getPath()))
	}

	return deletePaths
}

// End of section. //template:end getDeletePaths
