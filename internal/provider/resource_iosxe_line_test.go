// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccIosxeLine(t *testing.T) {
	if os.Getenv("LINE") == "" {
		t.Skip("skipping test, set environment variable LINE")
	}
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "console.0.first", "0"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "console.0.exec_timeout_minutes", "45"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "console.0.exec_timeout_seconds", "25"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "console.0.privilege_level", "15"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "console.0.stopbits", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "console.0.password_type", "0"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "console.0.password", "testpasswd"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "vty.0.first", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "vty.0.last", "27"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "vty.0.access_classes.0.direction", "in"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "vty.0.access_classes.0.access_list", "2"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "vty.0.access_classes.0.vrf_also", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "vty.0.exec_timeout_minutes", "45"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "vty.0.exec_timeout_seconds", "25"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "vty.0.password_type", "0"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "vty.0.password", "testpasswd"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "vty.0.transport_preferred_protocol", "none"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "vty.0.escape_character", "27"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "vty.0.authorization_exec_default", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_line.test", "vty.0.transport_input", "ssh"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccIosxeLineConfig_minimum(),
			},
			{
				Config: testAccIosxeLineConfig_all(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
			{
				ResourceName:  "iosxe_line.test",
				ImportState:   true,
				ImportStateId: "Cisco-IOS-XE-native:native/line",
			},
		},
	})
}

func testAccIosxeLineConfig_minimum() string {
	config := `resource "iosxe_line" "test" {` + "\n"
	config += `}` + "\n"
	return config
}

func testAccIosxeLineConfig_all() string {
	config := `resource "iosxe_line" "test" {` + "\n"
	config += `	console = [{` + "\n"
	config += `		first = "0"` + "\n"
	config += `		exec_timeout_minutes = 45` + "\n"
	config += `		exec_timeout_seconds = 25` + "\n"
	config += `		privilege_level = 15` + "\n"
	config += `		stopbits = "1"` + "\n"
	config += `		password_type = "0"` + "\n"
	config += `		password = "testpasswd"` + "\n"
	config += `	}]` + "\n"
	config += `	vty = [{` + "\n"
	config += `		first = 10` + "\n"
	config += `		last = 27` + "\n"
	config += `		access_classes = [{` + "\n"
	config += `			direction = "in"` + "\n"
	config += `			access_list = "2"` + "\n"
	config += `			vrf_also = true` + "\n"
	config += `		}]` + "\n"
	config += `		exec_timeout_minutes = 45` + "\n"
	config += `		exec_timeout_seconds = 25` + "\n"
	config += `		password_type = "0"` + "\n"
	config += `		password = "testpasswd"` + "\n"
	config += `		transport_preferred_protocol = "none"` + "\n"
	config += `		escape_character = "27"` + "\n"
	config += `		authorization_exec_default = true` + "\n"
	config += `		transport_input = "ssh"` + "\n"
	config += `	}]` + "\n"
	config += `}` + "\n"
	return config
}
