// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccIosxePolicyMapEvent(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_policy_map_event.test", "event_type", "authentication-success"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_policy_map_event.test", "match_type", "match-all"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_policy_map_event.test", "class_numbers.0.number", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_policy_map_event.test", "class_numbers.0.class", "MY_CLASS"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_policy_map_event.test", "class_numbers.0.execution_type", "do-until-failure"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_policy_map_event.test", "class_numbers.0.action_numbers.0.number", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_policy_map_event.test", "class_numbers.0.action_numbers.0.authenticate_using_method", "dot1x"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_policy_map_event.test", "class_numbers.0.action_numbers.0.authenticate_using_retries", "2"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_policy_map_event.test", "class_numbers.0.action_numbers.0.authenticate_using_retry_time", "0"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_policy_map_event.test", "class_numbers.0.action_numbers.0.authenticate_using_priority", "10"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccIosxePolicyMapEventPrerequisitesConfig + testAccIosxePolicyMapEventConfig_minimum(),
			},
			{
				Config: testAccIosxePolicyMapEventPrerequisitesConfig + testAccIosxePolicyMapEventConfig_all(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
			{
				ResourceName:  "iosxe_policy_map_event.test",
				ImportState:   true,
				ImportStateId: "Cisco-IOS-XE-native:native/policy/Cisco-IOS-XE-policy:policy-map=dot1x_policy/event=authentication-success",
			},
		},
	})
}

const testAccIosxePolicyMapEventPrerequisitesConfig = `
resource "iosxe_restconf" "PreReq0" {
	path = "Cisco-IOS-XE-native:native/policy/Cisco-IOS-XE-policy:policy-map=dot1x_policy"
	attributes = {
		"name" = "dot1x_policy"
		"type" = "control"
		"subscriber" = ""
	}
}

resource "iosxe_restconf" "PreReq1" {
	path = "Cisco-IOS-XE-native:native/policy/Cisco-IOS-XE-policy:class-map=MY_CLASS"
	attributes = {
		"name" = "MY_CLASS"
		"type" = "control"
		"subscriber" = ""
		"prematch" = "match-all"
	}
}

`

func testAccIosxePolicyMapEventConfig_minimum() string {
	config := `resource "iosxe_policy_map_event" "test" {` + "\n"
	config += `	name = "dot1x_policy"` + "\n"
	config += `	event_type = "authentication-success"` + "\n"
	config += `	depends_on = [iosxe_restconf.PreReq0, iosxe_restconf.PreReq1, ]` + "\n"
	config += `}` + "\n"
	return config
}

func testAccIosxePolicyMapEventConfig_all() string {
	config := `resource "iosxe_policy_map_event" "test" {` + "\n"
	config += `	name = "dot1x_policy"` + "\n"
	config += `	event_type = "authentication-success"` + "\n"
	config += `	match_type = "match-all"` + "\n"
	config += `	class_numbers = [{` + "\n"
	config += `		number = 10` + "\n"
	config += `		class = "MY_CLASS"` + "\n"
	config += `		execution_type = "do-until-failure"` + "\n"
	config += `		action_numbers = [{` + "\n"
	config += `			number = 10` + "\n"
	config += `			authenticate_using_method = "dot1x"` + "\n"
	config += `			authenticate_using_retries = 2` + "\n"
	config += `			authenticate_using_retry_time = 0` + "\n"
	config += `			authenticate_using_priority = 10` + "\n"
	config += `		}]` + "\n"
	config += `	}]` + "\n"
	config += `	depends_on = [iosxe_restconf.PreReq0, iosxe_restconf.PreReq1, ]` + "\n"
	config += `}` + "\n"
	return config
}
