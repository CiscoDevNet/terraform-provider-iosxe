// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type AAAAuthentication struct {
	Device                           types.String             `tfsdk:"device"`
	Id                               types.String             `tfsdk:"id"`
	Login                            []AAAAuthenticationLogin `tfsdk:"login"`
	LoginA1AuthLoginChoiceGroupGroup types.String             `tfsdk:"login_a1_auth_login_choice_group_group"`
	LoginA2AuthLoginChoiceGroupGroup types.String             `tfsdk:"login_a2_auth_login_choice_group_group"`
	LoginA2AuthLoginChoiceNoneNone   types.Bool               `tfsdk:"login_a2_auth_login_choice_none_none"`
	Dot1xDefaultGroup                types.String             `tfsdk:"dot1x_default_group_"`
}

type AAAAuthenticationData struct {
	Device                           types.String             `tfsdk:"device"`
	Id                               types.String             `tfsdk:"id"`
	Login                            []AAAAuthenticationLogin `tfsdk:"login"`
	LoginA1AuthLoginChoiceGroupGroup types.String             `tfsdk:"login_a1_auth_login_choice_group_group"`
	LoginA2AuthLoginChoiceGroupGroup types.String             `tfsdk:"login_a2_auth_login_choice_group_group"`
	LoginA2AuthLoginChoiceNoneNone   types.Bool               `tfsdk:"login_a2_auth_login_choice_none_none"`
	Dot1xDefaultGroup                types.String             `tfsdk:"dot1x_default_group_"`
}
type AAAAuthenticationLogin struct {
	Name types.String `tfsdk:"name"`
}

func (data AAAAuthentication) getPath() string {
	return "Cisco-IOS-XE-native:native/aaa/Cisco-IOS-XE-aaa:authentication"
}

func (data AAAAuthenticationData) getPath() string {
	return "Cisco-IOS-XE-native:native/aaa/Cisco-IOS-XE-aaa:authentication"
}

// if last path element has a key -> remove it
func (data AAAAuthentication) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data AAAAuthentication) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.LoginA1AuthLoginChoiceGroupGroup.IsNull() && !data.LoginA1AuthLoginChoiceGroupGroup.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"login.a1.group", data.LoginA1AuthLoginChoiceGroupGroup.ValueString())
	}
	if !data.LoginA2AuthLoginChoiceGroupGroup.IsNull() && !data.LoginA2AuthLoginChoiceGroupGroup.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"login.a2.group", data.LoginA2AuthLoginChoiceGroupGroup.ValueString())
	}
	if !data.LoginA2AuthLoginChoiceNoneNone.IsNull() && !data.LoginA2AuthLoginChoiceNoneNone.IsUnknown() {
		if data.LoginA2AuthLoginChoiceNoneNone.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"login.a2.none", map[string]string{})
		}
	}
	if !data.Dot1xDefaultGroup.IsNull() && !data.Dot1xDefaultGroup.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"dot1x.default.group.", data.Dot1xDefaultGroup.ValueString())
	}
	if len(data.Login) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"login", []interface{}{})
		for index, item := range data.Login {
			if !item.Name.IsNull() && !item.Name.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"login"+"."+strconv.Itoa(index)+"."+"name", item.Name.ValueString())
			}
		}
	}
	return body
}

func (data *AAAAuthentication) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	for i := range data.Login {
		keys := [...]string{"name"}
		keyValues := [...]string{data.Login[i].Name.ValueString()}

		var r gjson.Result
		res.Get(prefix + "login").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("name"); value.Exists() && !data.Login[i].Name.IsNull() {
			data.Login[i].Name = types.StringValue(value.String())
		} else {
			data.Login[i].Name = types.StringNull()
		}
	}
	if value := res.Get(prefix + "login.a1.group"); value.Exists() && !data.LoginA1AuthLoginChoiceGroupGroup.IsNull() {
		data.LoginA1AuthLoginChoiceGroupGroup = types.StringValue(value.String())
	} else {
		data.LoginA1AuthLoginChoiceGroupGroup = types.StringNull()
	}
	if value := res.Get(prefix + "login.a2.group"); value.Exists() && !data.LoginA2AuthLoginChoiceGroupGroup.IsNull() {
		data.LoginA2AuthLoginChoiceGroupGroup = types.StringValue(value.String())
	} else {
		data.LoginA2AuthLoginChoiceGroupGroup = types.StringNull()
	}
	if value := res.Get(prefix + "login.a2.none"); !data.LoginA2AuthLoginChoiceNoneNone.IsNull() {
		if value.Exists() {
			data.LoginA2AuthLoginChoiceNoneNone = types.BoolValue(true)
		} else {
			data.LoginA2AuthLoginChoiceNoneNone = types.BoolValue(false)
		}
	} else {
		data.LoginA2AuthLoginChoiceNoneNone = types.BoolNull()
	}
	if value := res.Get(prefix + "dot1x.default.group."); value.Exists() && !data.Dot1xDefaultGroup.IsNull() {
		data.Dot1xDefaultGroup = types.StringValue(value.String())
	} else {
		data.Dot1xDefaultGroup = types.StringNull()
	}
}

func (data *AAAAuthenticationData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "login"); value.Exists() {
		data.Login = make([]AAAAuthenticationLogin, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := AAAAuthenticationLogin{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			data.Login = append(data.Login, item)
			return true
		})
	}
	if value := res.Get(prefix + "login.a1.group"); value.Exists() {
		data.LoginA1AuthLoginChoiceGroupGroup = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "login.a2.group"); value.Exists() {
		data.LoginA2AuthLoginChoiceGroupGroup = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "login.a2.none"); value.Exists() {
		data.LoginA2AuthLoginChoiceNoneNone = types.BoolValue(true)
	} else {
		data.LoginA2AuthLoginChoiceNoneNone = types.BoolValue(false)
	}
	if value := res.Get(prefix + "dot1x.default.group."); value.Exists() {
		data.Dot1xDefaultGroup = types.StringValue(value.String())
	}
}

func (data *AAAAuthentication) getDeletedListItems(ctx context.Context, state AAAAuthentication) []string {
	deletedListItems := make([]string, 0)
	for i := range state.Login {
		stateKeyValues := [...]string{state.Login[i].Name.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Login[i].Name.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Login {
			found = true
			if state.Login[i].Name.ValueString() != data.Login[j].Name.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/login=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *AAAAuthentication) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	if !data.LoginA2AuthLoginChoiceNoneNone.IsNull() && !data.LoginA2AuthLoginChoiceNoneNone.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/login/a2/none", data.getPath()))
	}
	return emptyLeafsDelete
}

func (data *AAAAuthentication) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	for i := range data.Login {
		keyValues := [...]string{data.Login[i].Name.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/login=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	if !data.LoginA1AuthLoginChoiceGroupGroup.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/login/a1/group", data.getPath()))
	}
	if !data.LoginA2AuthLoginChoiceGroupGroup.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/login/a2/group", data.getPath()))
	}
	if !data.LoginA2AuthLoginChoiceNoneNone.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/login/a2/none", data.getPath()))
	}
	if !data.Dot1xDefaultGroup.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/dot1x/default/group/", data.getPath()))
	}
	return deletePaths
}
