// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"regexp"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin types
type License struct {
	Device                          types.String `tfsdk:"device"`
	Id                              types.String `tfsdk:"id"`
	DeleteMode                      types.String `tfsdk:"delete_mode"`
	BootLevelNetworkAdvantage       types.Bool   `tfsdk:"boot_level_network_advantage"`
	BootLevelNetworkAdvantageAddon  types.String `tfsdk:"boot_level_network_advantage_addon"`
	BootLevelNetworkEssentials      types.Bool   `tfsdk:"boot_level_network_essentials"`
	BootLevelNetworkEssentialsAddon types.String `tfsdk:"boot_level_network_essentials_addon"`
	SmartTransportType              types.String `tfsdk:"smart_transport_type"`
	SmartUrlCslu                    types.String `tfsdk:"smart_url_cslu"`
}

type LicenseData struct {
	Device                          types.String `tfsdk:"device"`
	Id                              types.String `tfsdk:"id"`
	BootLevelNetworkAdvantage       types.Bool   `tfsdk:"boot_level_network_advantage"`
	BootLevelNetworkAdvantageAddon  types.String `tfsdk:"boot_level_network_advantage_addon"`
	BootLevelNetworkEssentials      types.Bool   `tfsdk:"boot_level_network_essentials"`
	BootLevelNetworkEssentialsAddon types.String `tfsdk:"boot_level_network_essentials_addon"`
	SmartTransportType              types.String `tfsdk:"smart_transport_type"`
	SmartUrlCslu                    types.String `tfsdk:"smart_url_cslu"`
}

// End of section. //template:end types

// Section below is generated&owned by "gen/generator.go". //template:begin getPath

func (data License) getPath() string {
	return "Cisco-IOS-XE-native:native/license"
}

func (data LicenseData) getPath() string {
	return "Cisco-IOS-XE-native:native/license"
}

// if last path element has a key -> remove it
func (data License) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

// End of section. //template:end getPath

// Section below is generated&owned by "gen/generator.go". //template:begin toBody

func (data License) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.BootLevelNetworkAdvantage.IsNull() && !data.BootLevelNetworkAdvantage.IsUnknown() {
		if data.BootLevelNetworkAdvantage.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"boot.level.network-advantage", map[string]string{})
		}
	}
	if !data.BootLevelNetworkAdvantageAddon.IsNull() && !data.BootLevelNetworkAdvantageAddon.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"boot.level.network-advantage.addon", data.BootLevelNetworkAdvantageAddon.ValueString())
	}
	if !data.BootLevelNetworkEssentials.IsNull() && !data.BootLevelNetworkEssentials.IsUnknown() {
		if data.BootLevelNetworkEssentials.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"boot.level.network-essentials", map[string]string{})
		}
	}
	if !data.BootLevelNetworkEssentialsAddon.IsNull() && !data.BootLevelNetworkEssentialsAddon.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"boot.level.network-essentials.addon", data.BootLevelNetworkEssentialsAddon.ValueString())
	}
	if !data.SmartTransportType.IsNull() && !data.SmartTransportType.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"smart.transport-type", data.SmartTransportType.ValueString())
	}
	if !data.SmartUrlCslu.IsNull() && !data.SmartUrlCslu.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"smart.url.cslu", data.SmartUrlCslu.ValueString())
	}
	return body
}

// End of section. //template:end toBody

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBody

func (data *License) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "boot.level.network-advantage"); !data.BootLevelNetworkAdvantage.IsNull() {
		if value.Exists() {
			data.BootLevelNetworkAdvantage = types.BoolValue(true)
		} else {
			data.BootLevelNetworkAdvantage = types.BoolValue(false)
		}
	} else {
		data.BootLevelNetworkAdvantage = types.BoolNull()
	}
	if value := res.Get(prefix + "boot.level.network-advantage.addon"); value.Exists() && !data.BootLevelNetworkAdvantageAddon.IsNull() {
		data.BootLevelNetworkAdvantageAddon = types.StringValue(value.String())
	} else {
		data.BootLevelNetworkAdvantageAddon = types.StringNull()
	}
	if value := res.Get(prefix + "boot.level.network-essentials"); !data.BootLevelNetworkEssentials.IsNull() {
		if value.Exists() {
			data.BootLevelNetworkEssentials = types.BoolValue(true)
		} else {
			data.BootLevelNetworkEssentials = types.BoolValue(false)
		}
	} else {
		data.BootLevelNetworkEssentials = types.BoolNull()
	}
	if value := res.Get(prefix + "boot.level.network-essentials.addon"); value.Exists() && !data.BootLevelNetworkEssentialsAddon.IsNull() {
		data.BootLevelNetworkEssentialsAddon = types.StringValue(value.String())
	} else {
		data.BootLevelNetworkEssentialsAddon = types.StringNull()
	}
	if value := res.Get(prefix + "smart.transport-type"); value.Exists() && !data.SmartTransportType.IsNull() {
		data.SmartTransportType = types.StringValue(value.String())
	} else {
		data.SmartTransportType = types.StringNull()
	}
	if value := res.Get(prefix + "smart.url.cslu"); value.Exists() && !data.SmartUrlCslu.IsNull() {
		data.SmartUrlCslu = types.StringValue(value.String())
	} else {
		data.SmartUrlCslu = types.StringNull()
	}
}

// End of section. //template:end updateFromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBody

func (data *License) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "boot.level.network-advantage"); value.Exists() {
		data.BootLevelNetworkAdvantage = types.BoolValue(true)
	} else {
		data.BootLevelNetworkAdvantage = types.BoolValue(false)
	}
	if value := res.Get(prefix + "boot.level.network-advantage.addon"); value.Exists() {
		data.BootLevelNetworkAdvantageAddon = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "boot.level.network-essentials"); value.Exists() {
		data.BootLevelNetworkEssentials = types.BoolValue(true)
	} else {
		data.BootLevelNetworkEssentials = types.BoolValue(false)
	}
	if value := res.Get(prefix + "boot.level.network-essentials.addon"); value.Exists() {
		data.BootLevelNetworkEssentialsAddon = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "smart.transport-type"); value.Exists() {
		data.SmartTransportType = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "smart.url.cslu"); value.Exists() {
		data.SmartUrlCslu = types.StringValue(value.String())
	}
}

// End of section. //template:end fromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyData

func (data *LicenseData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "boot.level.network-advantage"); value.Exists() {
		data.BootLevelNetworkAdvantage = types.BoolValue(true)
	} else {
		data.BootLevelNetworkAdvantage = types.BoolValue(false)
	}
	if value := res.Get(prefix + "boot.level.network-advantage.addon"); value.Exists() {
		data.BootLevelNetworkAdvantageAddon = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "boot.level.network-essentials"); value.Exists() {
		data.BootLevelNetworkEssentials = types.BoolValue(true)
	} else {
		data.BootLevelNetworkEssentials = types.BoolValue(false)
	}
	if value := res.Get(prefix + "boot.level.network-essentials.addon"); value.Exists() {
		data.BootLevelNetworkEssentialsAddon = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "smart.transport-type"); value.Exists() {
		data.SmartTransportType = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "smart.url.cslu"); value.Exists() {
		data.SmartUrlCslu = types.StringValue(value.String())
	}
}

// End of section. //template:end fromBodyData

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletedItems

func (data *License) getDeletedItems(ctx context.Context, state License) []string {
	deletedItems := make([]string, 0)
	if !state.SmartUrlCslu.IsNull() && data.SmartUrlCslu.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/smart/url/cslu", state.getPath()))
	}
	if !state.SmartTransportType.IsNull() && data.SmartTransportType.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/smart/transport-type", state.getPath()))
	}
	if !state.BootLevelNetworkEssentialsAddon.IsNull() && data.BootLevelNetworkEssentialsAddon.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/boot/level/network-essentials/addon", state.getPath()))
	}
	if !state.BootLevelNetworkEssentials.IsNull() && data.BootLevelNetworkEssentials.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/boot/level/network-essentials", state.getPath()))
	}
	if !state.BootLevelNetworkAdvantageAddon.IsNull() && data.BootLevelNetworkAdvantageAddon.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/boot/level/network-advantage/addon", state.getPath()))
	}
	if !state.BootLevelNetworkAdvantage.IsNull() && data.BootLevelNetworkAdvantage.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/boot/level/network-advantage", state.getPath()))
	}

	return deletedItems
}

// End of section. //template:end getDeletedItems

// Section below is generated&owned by "gen/generator.go". //template:begin getEmptyLeafsDelete

func (data *License) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.BootLevelNetworkEssentials.IsNull() && !data.BootLevelNetworkEssentials.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/boot/level/network-essentials", data.getPath()))
	}
	if !data.BootLevelNetworkAdvantage.IsNull() && !data.BootLevelNetworkAdvantage.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/boot/level/network-advantage", data.getPath()))
	}

	return emptyLeafsDelete
}

// End of section. //template:end getEmptyLeafsDelete

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletePaths

func (data *License) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.SmartUrlCslu.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/smart/url/cslu", data.getPath()))
	}
	if !data.SmartTransportType.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/smart/transport-type", data.getPath()))
	}
	if !data.BootLevelNetworkEssentialsAddon.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/boot/level/network-essentials/addon", data.getPath()))
	}
	if !data.BootLevelNetworkEssentials.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/boot/level/network-essentials", data.getPath()))
	}
	if !data.BootLevelNetworkAdvantageAddon.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/boot/level/network-advantage/addon", data.getPath()))
	}
	if !data.BootLevelNetworkAdvantage.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/boot/level/network-advantage", data.getPath()))
	}

	return deletePaths
}

// End of section. //template:end getDeletePaths
