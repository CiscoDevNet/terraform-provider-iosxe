// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"regexp"
	"strconv"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-netconf"
	"github.com/netascode/xmldot"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin types
type EVPN struct {
	Device                                      types.String `tfsdk:"device"`
	Id                                          types.String `tfsdk:"id"`
	DeleteMode                                  types.String `tfsdk:"delete_mode"`
	ReplicationTypeIngress                      types.Bool   `tfsdk:"replication_type_ingress"`
	ReplicationTypeStatic                       types.Bool   `tfsdk:"replication_type_static"`
	ReplicationTypeP2mp                         types.Bool   `tfsdk:"replication_type_p2mp"`
	ReplicationTypeMp2mp                        types.Bool   `tfsdk:"replication_type_mp2mp"`
	MacDuplicationLimit                         types.Int64  `tfsdk:"mac_duplication_limit"`
	MacDuplicationTime                          types.Int64  `tfsdk:"mac_duplication_time"`
	IpDuplicationLimit                          types.Int64  `tfsdk:"ip_duplication_limit"`
	IpDuplicationTime                           types.Int64  `tfsdk:"ip_duplication_time"`
	RouterIdLoopback                            types.Int64  `tfsdk:"router_id_loopback"`
	DefaultGatewayAdvertise                     types.Bool   `tfsdk:"default_gateway_advertise"`
	LoggingPeerState                            types.Bool   `tfsdk:"logging_peer_state"`
	RouteTargetAutoVni                          types.Bool   `tfsdk:"route_target_auto_vni"`
	AnycastGatewayMacAuto                       types.Bool   `tfsdk:"anycast_gateway_mac_auto"`
	FloodingSuppressionAddressResolutionDisable types.Bool   `tfsdk:"flooding_suppression_address_resolution_disable"`
}

type EVPNData struct {
	Device                                      types.String `tfsdk:"device"`
	Id                                          types.String `tfsdk:"id"`
	ReplicationTypeIngress                      types.Bool   `tfsdk:"replication_type_ingress"`
	ReplicationTypeStatic                       types.Bool   `tfsdk:"replication_type_static"`
	ReplicationTypeP2mp                         types.Bool   `tfsdk:"replication_type_p2mp"`
	ReplicationTypeMp2mp                        types.Bool   `tfsdk:"replication_type_mp2mp"`
	MacDuplicationLimit                         types.Int64  `tfsdk:"mac_duplication_limit"`
	MacDuplicationTime                          types.Int64  `tfsdk:"mac_duplication_time"`
	IpDuplicationLimit                          types.Int64  `tfsdk:"ip_duplication_limit"`
	IpDuplicationTime                           types.Int64  `tfsdk:"ip_duplication_time"`
	RouterIdLoopback                            types.Int64  `tfsdk:"router_id_loopback"`
	DefaultGatewayAdvertise                     types.Bool   `tfsdk:"default_gateway_advertise"`
	LoggingPeerState                            types.Bool   `tfsdk:"logging_peer_state"`
	RouteTargetAutoVni                          types.Bool   `tfsdk:"route_target_auto_vni"`
	AnycastGatewayMacAuto                       types.Bool   `tfsdk:"anycast_gateway_mac_auto"`
	FloodingSuppressionAddressResolutionDisable types.Bool   `tfsdk:"flooding_suppression_address_resolution_disable"`
}

// End of section. //template:end types

// Section below is generated&owned by "gen/generator.go". //template:begin getPath

func (data EVPN) getPath() string {
	return "Cisco-IOS-XE-native:native/l2vpn/Cisco-IOS-XE-l2vpn:evpn_cont/evpn"
}

func (data EVPNData) getPath() string {
	return "Cisco-IOS-XE-native:native/l2vpn/Cisco-IOS-XE-l2vpn:evpn_cont/evpn"
}

// if last path element has a key -> remove it
func (data EVPN) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

// getXPath returns the XPath for NETCONF operations
func (data EVPN) getXPath() string {
	path := helpers.ConvertRestconfPathToXPath("Cisco-IOS-XE-native:native/l2vpn/Cisco-IOS-XE-l2vpn:evpn_cont/evpn")
	return path
}

func (data EVPNData) getXPath() string {
	path := helpers.ConvertRestconfPathToXPath("Cisco-IOS-XE-native:native/l2vpn/Cisco-IOS-XE-l2vpn:evpn_cont/evpn")
	return path
}

// End of section. //template:end getPath

// Section below is generated&owned by "gen/generator.go". //template:begin toBody

func (data EVPN) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.ReplicationTypeIngress.IsNull() && !data.ReplicationTypeIngress.IsUnknown() {
		if data.ReplicationTypeIngress.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"replication-type.ingress", map[string]string{})
		}
	}
	if !data.ReplicationTypeStatic.IsNull() && !data.ReplicationTypeStatic.IsUnknown() {
		if data.ReplicationTypeStatic.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"replication-type.static", map[string]string{})
		}
	}
	if !data.ReplicationTypeP2mp.IsNull() && !data.ReplicationTypeP2mp.IsUnknown() {
		if data.ReplicationTypeP2mp.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"replication-type.p2mp", map[string]string{})
		}
	}
	if !data.ReplicationTypeMp2mp.IsNull() && !data.ReplicationTypeMp2mp.IsUnknown() {
		if data.ReplicationTypeMp2mp.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"replication-type.mp2mp", map[string]string{})
		}
	}
	if !data.MacDuplicationLimit.IsNull() && !data.MacDuplicationLimit.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"mac.duplication.limit", strconv.FormatInt(data.MacDuplicationLimit.ValueInt64(), 10))
	}
	if !data.MacDuplicationTime.IsNull() && !data.MacDuplicationTime.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"mac.duplication.time", strconv.FormatInt(data.MacDuplicationTime.ValueInt64(), 10))
	}
	if !data.IpDuplicationLimit.IsNull() && !data.IpDuplicationLimit.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.duplication.limit", strconv.FormatInt(data.IpDuplicationLimit.ValueInt64(), 10))
	}
	if !data.IpDuplicationTime.IsNull() && !data.IpDuplicationTime.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.duplication.time", strconv.FormatInt(data.IpDuplicationTime.ValueInt64(), 10))
	}
	if !data.RouterIdLoopback.IsNull() && !data.RouterIdLoopback.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"router-id.interface.Loopback", strconv.FormatInt(data.RouterIdLoopback.ValueInt64(), 10))
	}
	if !data.DefaultGatewayAdvertise.IsNull() && !data.DefaultGatewayAdvertise.IsUnknown() {
		if data.DefaultGatewayAdvertise.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"default-gateway.advertise", map[string]string{})
		}
	}
	if !data.LoggingPeerState.IsNull() && !data.LoggingPeerState.IsUnknown() {
		if data.LoggingPeerState.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"logging.peer.state", map[string]string{})
		}
	}
	if !data.RouteTargetAutoVni.IsNull() && !data.RouteTargetAutoVni.IsUnknown() {
		if data.RouteTargetAutoVni.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"route-target.auto.vni", map[string]string{})
		}
	}
	if !data.AnycastGatewayMacAuto.IsNull() && !data.AnycastGatewayMacAuto.IsUnknown() {
		if data.AnycastGatewayMacAuto.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"anycast-gateway.mac.auto", map[string]string{})
		}
	}
	if !data.FloodingSuppressionAddressResolutionDisable.IsNull() && !data.FloodingSuppressionAddressResolutionDisable.IsUnknown() {
		if data.FloodingSuppressionAddressResolutionDisable.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"flooding-suppression.address-resolution.disable", map[string]string{})
		}
	}
	return body
}

// End of section. //template:end toBody

// Section below is generated&owned by "gen/generator.go". //template:begin toBodyXML

func (data EVPN) toBodyXML(ctx context.Context) string {
	body := netconf.Body{}
	if !data.ReplicationTypeIngress.IsNull() && !data.ReplicationTypeIngress.IsUnknown() {
		if data.ReplicationTypeIngress.ValueBool() {
			body = helpers.SetFromXPath(body, data.getXPath()+"/replication-type/ingress", "")
		} else {
			body = helpers.RemoveFromXPath(body, data.getXPath()+"/replication-type/ingress")
		}
	}
	if !data.ReplicationTypeStatic.IsNull() && !data.ReplicationTypeStatic.IsUnknown() {
		if data.ReplicationTypeStatic.ValueBool() {
			body = helpers.SetFromXPath(body, data.getXPath()+"/replication-type/static", "")
		} else {
			body = helpers.RemoveFromXPath(body, data.getXPath()+"/replication-type/static")
		}
	}
	if !data.ReplicationTypeP2mp.IsNull() && !data.ReplicationTypeP2mp.IsUnknown() {
		if data.ReplicationTypeP2mp.ValueBool() {
			body = helpers.SetFromXPath(body, data.getXPath()+"/replication-type/p2mp", "")
		} else {
			body = helpers.RemoveFromXPath(body, data.getXPath()+"/replication-type/p2mp")
		}
	}
	if !data.ReplicationTypeMp2mp.IsNull() && !data.ReplicationTypeMp2mp.IsUnknown() {
		if data.ReplicationTypeMp2mp.ValueBool() {
			body = helpers.SetFromXPath(body, data.getXPath()+"/replication-type/mp2mp", "")
		} else {
			body = helpers.RemoveFromXPath(body, data.getXPath()+"/replication-type/mp2mp")
		}
	}
	if !data.MacDuplicationLimit.IsNull() && !data.MacDuplicationLimit.IsUnknown() {
		body = helpers.SetFromXPath(body, data.getXPath()+"/mac/duplication/limit", strconv.FormatInt(data.MacDuplicationLimit.ValueInt64(), 10))
	}
	if !data.MacDuplicationTime.IsNull() && !data.MacDuplicationTime.IsUnknown() {
		body = helpers.SetFromXPath(body, data.getXPath()+"/mac/duplication/time", strconv.FormatInt(data.MacDuplicationTime.ValueInt64(), 10))
	}
	if !data.IpDuplicationLimit.IsNull() && !data.IpDuplicationLimit.IsUnknown() {
		body = helpers.SetFromXPath(body, data.getXPath()+"/ip/duplication/limit", strconv.FormatInt(data.IpDuplicationLimit.ValueInt64(), 10))
	}
	if !data.IpDuplicationTime.IsNull() && !data.IpDuplicationTime.IsUnknown() {
		body = helpers.SetFromXPath(body, data.getXPath()+"/ip/duplication/time", strconv.FormatInt(data.IpDuplicationTime.ValueInt64(), 10))
	}
	if !data.RouterIdLoopback.IsNull() && !data.RouterIdLoopback.IsUnknown() {
		body = helpers.SetFromXPath(body, data.getXPath()+"/router-id/interface/Loopback", strconv.FormatInt(data.RouterIdLoopback.ValueInt64(), 10))
	}
	if !data.DefaultGatewayAdvertise.IsNull() && !data.DefaultGatewayAdvertise.IsUnknown() {
		if data.DefaultGatewayAdvertise.ValueBool() {
			body = helpers.SetFromXPath(body, data.getXPath()+"/default-gateway/advertise", "")
		} else {
			body = helpers.RemoveFromXPath(body, data.getXPath()+"/default-gateway/advertise")
		}
	}
	if !data.LoggingPeerState.IsNull() && !data.LoggingPeerState.IsUnknown() {
		if data.LoggingPeerState.ValueBool() {
			body = helpers.SetFromXPath(body, data.getXPath()+"/logging/peer/state", "")
		} else {
			body = helpers.RemoveFromXPath(body, data.getXPath()+"/logging/peer/state")
		}
	}
	if !data.RouteTargetAutoVni.IsNull() && !data.RouteTargetAutoVni.IsUnknown() {
		if data.RouteTargetAutoVni.ValueBool() {
			body = helpers.SetFromXPath(body, data.getXPath()+"/route-target/auto/vni", "")
		} else {
			body = helpers.RemoveFromXPath(body, data.getXPath()+"/route-target/auto/vni")
		}
	}
	if !data.AnycastGatewayMacAuto.IsNull() && !data.AnycastGatewayMacAuto.IsUnknown() {
		if data.AnycastGatewayMacAuto.ValueBool() {
			body = helpers.SetFromXPath(body, data.getXPath()+"/anycast-gateway/mac/auto", "")
		} else {
			body = helpers.RemoveFromXPath(body, data.getXPath()+"/anycast-gateway/mac/auto")
		}
	}
	if !data.FloodingSuppressionAddressResolutionDisable.IsNull() && !data.FloodingSuppressionAddressResolutionDisable.IsUnknown() {
		if data.FloodingSuppressionAddressResolutionDisable.ValueBool() {
			body = helpers.SetFromXPath(body, data.getXPath()+"/flooding-suppression/address-resolution/disable", "")
		} else {
			body = helpers.RemoveFromXPath(body, data.getXPath()+"/flooding-suppression/address-resolution/disable")
		}
	}
	bodyString, err := body.String()
	if err != nil {
		tflog.Error(ctx, fmt.Sprintf("Error converting body to string: %s", err))
	}
	return bodyString
}

// End of section. //template:end toBodyXML

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBody

func (data *EVPN) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "replication-type.ingress"); !data.ReplicationTypeIngress.IsNull() {
		if value.Exists() {
			data.ReplicationTypeIngress = types.BoolValue(true)
		} else {
			data.ReplicationTypeIngress = types.BoolValue(false)
		}
	} else {
		data.ReplicationTypeIngress = types.BoolNull()
	}
	if value := res.Get(prefix + "replication-type.static"); !data.ReplicationTypeStatic.IsNull() {
		if value.Exists() {
			data.ReplicationTypeStatic = types.BoolValue(true)
		} else {
			data.ReplicationTypeStatic = types.BoolValue(false)
		}
	} else {
		data.ReplicationTypeStatic = types.BoolNull()
	}
	if value := res.Get(prefix + "replication-type.p2mp"); !data.ReplicationTypeP2mp.IsNull() {
		if value.Exists() {
			data.ReplicationTypeP2mp = types.BoolValue(true)
		} else {
			data.ReplicationTypeP2mp = types.BoolValue(false)
		}
	} else {
		data.ReplicationTypeP2mp = types.BoolNull()
	}
	if value := res.Get(prefix + "replication-type.mp2mp"); !data.ReplicationTypeMp2mp.IsNull() {
		if value.Exists() {
			data.ReplicationTypeMp2mp = types.BoolValue(true)
		} else {
			data.ReplicationTypeMp2mp = types.BoolValue(false)
		}
	} else {
		data.ReplicationTypeMp2mp = types.BoolNull()
	}
	if value := res.Get(prefix + "mac.duplication.limit"); value.Exists() && !data.MacDuplicationLimit.IsNull() {
		data.MacDuplicationLimit = types.Int64Value(value.Int())
	} else {
		data.MacDuplicationLimit = types.Int64Null()
	}
	if value := res.Get(prefix + "mac.duplication.time"); value.Exists() && !data.MacDuplicationTime.IsNull() {
		data.MacDuplicationTime = types.Int64Value(value.Int())
	} else {
		data.MacDuplicationTime = types.Int64Null()
	}
	if value := res.Get(prefix + "ip.duplication.limit"); value.Exists() && !data.IpDuplicationLimit.IsNull() {
		data.IpDuplicationLimit = types.Int64Value(value.Int())
	} else {
		data.IpDuplicationLimit = types.Int64Null()
	}
	if value := res.Get(prefix + "ip.duplication.time"); value.Exists() && !data.IpDuplicationTime.IsNull() {
		data.IpDuplicationTime = types.Int64Value(value.Int())
	} else {
		data.IpDuplicationTime = types.Int64Null()
	}
	if value := res.Get(prefix + "router-id.interface.Loopback"); value.Exists() && !data.RouterIdLoopback.IsNull() {
		data.RouterIdLoopback = types.Int64Value(value.Int())
	} else {
		data.RouterIdLoopback = types.Int64Null()
	}
	if value := res.Get(prefix + "default-gateway.advertise"); !data.DefaultGatewayAdvertise.IsNull() {
		if value.Exists() {
			data.DefaultGatewayAdvertise = types.BoolValue(true)
		} else {
			data.DefaultGatewayAdvertise = types.BoolValue(false)
		}
	} else {
		data.DefaultGatewayAdvertise = types.BoolNull()
	}
	if value := res.Get(prefix + "logging.peer.state"); !data.LoggingPeerState.IsNull() {
		if value.Exists() {
			data.LoggingPeerState = types.BoolValue(true)
		} else {
			data.LoggingPeerState = types.BoolValue(false)
		}
	} else {
		data.LoggingPeerState = types.BoolNull()
	}
	if value := res.Get(prefix + "route-target.auto.vni"); !data.RouteTargetAutoVni.IsNull() {
		if value.Exists() {
			data.RouteTargetAutoVni = types.BoolValue(true)
		} else {
			data.RouteTargetAutoVni = types.BoolValue(false)
		}
	} else {
		data.RouteTargetAutoVni = types.BoolNull()
	}
	if value := res.Get(prefix + "anycast-gateway.mac.auto"); !data.AnycastGatewayMacAuto.IsNull() {
		if value.Exists() {
			data.AnycastGatewayMacAuto = types.BoolValue(true)
		} else {
			data.AnycastGatewayMacAuto = types.BoolValue(false)
		}
	} else {
		data.AnycastGatewayMacAuto = types.BoolNull()
	}
	if value := res.Get(prefix + "flooding-suppression.address-resolution.disable"); !data.FloodingSuppressionAddressResolutionDisable.IsNull() {
		if value.Exists() {
			data.FloodingSuppressionAddressResolutionDisable = types.BoolValue(true)
		} else {
			data.FloodingSuppressionAddressResolutionDisable = types.BoolValue(false)
		}
	} else {
		data.FloodingSuppressionAddressResolutionDisable = types.BoolNull()
	}
}

// End of section. //template:end updateFromBody

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBodyXML

func (data *EVPN) updateFromBodyXML(ctx context.Context, res xmldot.Result) {
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/replication-type/ingress"); !data.ReplicationTypeIngress.IsNull() {
		if value.Exists() {
			data.ReplicationTypeIngress = types.BoolValue(true)
		} else {
			data.ReplicationTypeIngress = types.BoolValue(false)
		}
	} else {
		data.ReplicationTypeIngress = types.BoolNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/replication-type/static"); !data.ReplicationTypeStatic.IsNull() {
		if value.Exists() {
			data.ReplicationTypeStatic = types.BoolValue(true)
		} else {
			data.ReplicationTypeStatic = types.BoolValue(false)
		}
	} else {
		data.ReplicationTypeStatic = types.BoolNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/replication-type/p2mp"); !data.ReplicationTypeP2mp.IsNull() {
		if value.Exists() {
			data.ReplicationTypeP2mp = types.BoolValue(true)
		} else {
			data.ReplicationTypeP2mp = types.BoolValue(false)
		}
	} else {
		data.ReplicationTypeP2mp = types.BoolNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/replication-type/mp2mp"); !data.ReplicationTypeMp2mp.IsNull() {
		if value.Exists() {
			data.ReplicationTypeMp2mp = types.BoolValue(true)
		} else {
			data.ReplicationTypeMp2mp = types.BoolValue(false)
		}
	} else {
		data.ReplicationTypeMp2mp = types.BoolNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/mac/duplication/limit"); value.Exists() && !data.MacDuplicationLimit.IsNull() {
		data.MacDuplicationLimit = types.Int64Value(value.Int())
	} else {
		data.MacDuplicationLimit = types.Int64Null()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/mac/duplication/time"); value.Exists() && !data.MacDuplicationTime.IsNull() {
		data.MacDuplicationTime = types.Int64Value(value.Int())
	} else {
		data.MacDuplicationTime = types.Int64Null()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/ip/duplication/limit"); value.Exists() && !data.IpDuplicationLimit.IsNull() {
		data.IpDuplicationLimit = types.Int64Value(value.Int())
	} else {
		data.IpDuplicationLimit = types.Int64Null()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/ip/duplication/time"); value.Exists() && !data.IpDuplicationTime.IsNull() {
		data.IpDuplicationTime = types.Int64Value(value.Int())
	} else {
		data.IpDuplicationTime = types.Int64Null()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/router-id/interface/Loopback"); value.Exists() && !data.RouterIdLoopback.IsNull() {
		data.RouterIdLoopback = types.Int64Value(value.Int())
	} else {
		data.RouterIdLoopback = types.Int64Null()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/default-gateway/advertise"); !data.DefaultGatewayAdvertise.IsNull() {
		if value.Exists() {
			data.DefaultGatewayAdvertise = types.BoolValue(true)
		} else {
			data.DefaultGatewayAdvertise = types.BoolValue(false)
		}
	} else {
		data.DefaultGatewayAdvertise = types.BoolNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/logging/peer/state"); !data.LoggingPeerState.IsNull() {
		if value.Exists() {
			data.LoggingPeerState = types.BoolValue(true)
		} else {
			data.LoggingPeerState = types.BoolValue(false)
		}
	} else {
		data.LoggingPeerState = types.BoolNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/route-target/auto/vni"); !data.RouteTargetAutoVni.IsNull() {
		if value.Exists() {
			data.RouteTargetAutoVni = types.BoolValue(true)
		} else {
			data.RouteTargetAutoVni = types.BoolValue(false)
		}
	} else {
		data.RouteTargetAutoVni = types.BoolNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/anycast-gateway/mac/auto"); !data.AnycastGatewayMacAuto.IsNull() {
		if value.Exists() {
			data.AnycastGatewayMacAuto = types.BoolValue(true)
		} else {
			data.AnycastGatewayMacAuto = types.BoolValue(false)
		}
	} else {
		data.AnycastGatewayMacAuto = types.BoolNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/flooding-suppression/address-resolution/disable"); !data.FloodingSuppressionAddressResolutionDisable.IsNull() {
		if value.Exists() {
			data.FloodingSuppressionAddressResolutionDisable = types.BoolValue(true)
		} else {
			data.FloodingSuppressionAddressResolutionDisable = types.BoolValue(false)
		}
	} else {
		data.FloodingSuppressionAddressResolutionDisable = types.BoolNull()
	}
}

// End of section. //template:end updateFromBodyXML

// Section below is generated&owned by "gen/generator.go". //template:begin fromBody

func (data *EVPN) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "replication-type.ingress"); value.Exists() {
		data.ReplicationTypeIngress = types.BoolValue(true)
	} else {
		data.ReplicationTypeIngress = types.BoolValue(false)
	}
	if value := res.Get(prefix + "replication-type.static"); value.Exists() {
		data.ReplicationTypeStatic = types.BoolValue(true)
	} else {
		data.ReplicationTypeStatic = types.BoolValue(false)
	}
	if value := res.Get(prefix + "replication-type.p2mp"); value.Exists() {
		data.ReplicationTypeP2mp = types.BoolValue(true)
	} else {
		data.ReplicationTypeP2mp = types.BoolValue(false)
	}
	if value := res.Get(prefix + "replication-type.mp2mp"); value.Exists() {
		data.ReplicationTypeMp2mp = types.BoolValue(true)
	} else {
		data.ReplicationTypeMp2mp = types.BoolValue(false)
	}
	if value := res.Get(prefix + "mac.duplication.limit"); value.Exists() {
		data.MacDuplicationLimit = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "mac.duplication.time"); value.Exists() {
		data.MacDuplicationTime = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "ip.duplication.limit"); value.Exists() {
		data.IpDuplicationLimit = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "ip.duplication.time"); value.Exists() {
		data.IpDuplicationTime = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "router-id.interface.Loopback"); value.Exists() {
		data.RouterIdLoopback = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "default-gateway.advertise"); value.Exists() {
		data.DefaultGatewayAdvertise = types.BoolValue(true)
	} else {
		data.DefaultGatewayAdvertise = types.BoolValue(false)
	}
	if value := res.Get(prefix + "logging.peer.state"); value.Exists() {
		data.LoggingPeerState = types.BoolValue(true)
	} else {
		data.LoggingPeerState = types.BoolValue(false)
	}
	if value := res.Get(prefix + "route-target.auto.vni"); value.Exists() {
		data.RouteTargetAutoVni = types.BoolValue(true)
	} else {
		data.RouteTargetAutoVni = types.BoolValue(false)
	}
	if value := res.Get(prefix + "anycast-gateway.mac.auto"); value.Exists() {
		data.AnycastGatewayMacAuto = types.BoolValue(true)
	} else {
		data.AnycastGatewayMacAuto = types.BoolValue(false)
	}
	if value := res.Get(prefix + "flooding-suppression.address-resolution.disable"); value.Exists() {
		data.FloodingSuppressionAddressResolutionDisable = types.BoolValue(true)
	} else {
		data.FloodingSuppressionAddressResolutionDisable = types.BoolValue(false)
	}
}

// End of section. //template:end fromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyData

func (data *EVPNData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "replication-type.ingress"); value.Exists() {
		data.ReplicationTypeIngress = types.BoolValue(true)
	} else {
		data.ReplicationTypeIngress = types.BoolValue(false)
	}
	if value := res.Get(prefix + "replication-type.static"); value.Exists() {
		data.ReplicationTypeStatic = types.BoolValue(true)
	} else {
		data.ReplicationTypeStatic = types.BoolValue(false)
	}
	if value := res.Get(prefix + "replication-type.p2mp"); value.Exists() {
		data.ReplicationTypeP2mp = types.BoolValue(true)
	} else {
		data.ReplicationTypeP2mp = types.BoolValue(false)
	}
	if value := res.Get(prefix + "replication-type.mp2mp"); value.Exists() {
		data.ReplicationTypeMp2mp = types.BoolValue(true)
	} else {
		data.ReplicationTypeMp2mp = types.BoolValue(false)
	}
	if value := res.Get(prefix + "mac.duplication.limit"); value.Exists() {
		data.MacDuplicationLimit = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "mac.duplication.time"); value.Exists() {
		data.MacDuplicationTime = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "ip.duplication.limit"); value.Exists() {
		data.IpDuplicationLimit = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "ip.duplication.time"); value.Exists() {
		data.IpDuplicationTime = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "router-id.interface.Loopback"); value.Exists() {
		data.RouterIdLoopback = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "default-gateway.advertise"); value.Exists() {
		data.DefaultGatewayAdvertise = types.BoolValue(true)
	} else {
		data.DefaultGatewayAdvertise = types.BoolValue(false)
	}
	if value := res.Get(prefix + "logging.peer.state"); value.Exists() {
		data.LoggingPeerState = types.BoolValue(true)
	} else {
		data.LoggingPeerState = types.BoolValue(false)
	}
	if value := res.Get(prefix + "route-target.auto.vni"); value.Exists() {
		data.RouteTargetAutoVni = types.BoolValue(true)
	} else {
		data.RouteTargetAutoVni = types.BoolValue(false)
	}
	if value := res.Get(prefix + "anycast-gateway.mac.auto"); value.Exists() {
		data.AnycastGatewayMacAuto = types.BoolValue(true)
	} else {
		data.AnycastGatewayMacAuto = types.BoolValue(false)
	}
	if value := res.Get(prefix + "flooding-suppression.address-resolution.disable"); value.Exists() {
		data.FloodingSuppressionAddressResolutionDisable = types.BoolValue(true)
	} else {
		data.FloodingSuppressionAddressResolutionDisable = types.BoolValue(false)
	}
}

// End of section. //template:end fromBodyData

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyXML

func (data *EVPN) fromBodyXML(ctx context.Context, res xmldot.Result) {
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/replication-type/ingress"); value.Exists() {
		data.ReplicationTypeIngress = types.BoolValue(true)
	} else {
		data.ReplicationTypeIngress = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/replication-type/static"); value.Exists() {
		data.ReplicationTypeStatic = types.BoolValue(true)
	} else {
		data.ReplicationTypeStatic = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/replication-type/p2mp"); value.Exists() {
		data.ReplicationTypeP2mp = types.BoolValue(true)
	} else {
		data.ReplicationTypeP2mp = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/replication-type/mp2mp"); value.Exists() {
		data.ReplicationTypeMp2mp = types.BoolValue(true)
	} else {
		data.ReplicationTypeMp2mp = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/mac/duplication/limit"); value.Exists() {
		data.MacDuplicationLimit = types.Int64Value(value.Int())
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/mac/duplication/time"); value.Exists() {
		data.MacDuplicationTime = types.Int64Value(value.Int())
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/ip/duplication/limit"); value.Exists() {
		data.IpDuplicationLimit = types.Int64Value(value.Int())
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/ip/duplication/time"); value.Exists() {
		data.IpDuplicationTime = types.Int64Value(value.Int())
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/router-id/interface/Loopback"); value.Exists() {
		data.RouterIdLoopback = types.Int64Value(value.Int())
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/default-gateway/advertise"); value.Exists() {
		data.DefaultGatewayAdvertise = types.BoolValue(true)
	} else {
		data.DefaultGatewayAdvertise = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/logging/peer/state"); value.Exists() {
		data.LoggingPeerState = types.BoolValue(true)
	} else {
		data.LoggingPeerState = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/route-target/auto/vni"); value.Exists() {
		data.RouteTargetAutoVni = types.BoolValue(true)
	} else {
		data.RouteTargetAutoVni = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/anycast-gateway/mac/auto"); value.Exists() {
		data.AnycastGatewayMacAuto = types.BoolValue(true)
	} else {
		data.AnycastGatewayMacAuto = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/flooding-suppression/address-resolution/disable"); value.Exists() {
		data.FloodingSuppressionAddressResolutionDisable = types.BoolValue(true)
	} else {
		data.FloodingSuppressionAddressResolutionDisable = types.BoolValue(false)
	}
}

// End of section. //template:end fromBodyXML

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyDataXML

func (data *EVPNData) fromBodyXML(ctx context.Context, res xmldot.Result) {
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/replication-type/ingress"); value.Exists() {
		data.ReplicationTypeIngress = types.BoolValue(true)
	} else {
		data.ReplicationTypeIngress = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/replication-type/static"); value.Exists() {
		data.ReplicationTypeStatic = types.BoolValue(true)
	} else {
		data.ReplicationTypeStatic = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/replication-type/p2mp"); value.Exists() {
		data.ReplicationTypeP2mp = types.BoolValue(true)
	} else {
		data.ReplicationTypeP2mp = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/replication-type/mp2mp"); value.Exists() {
		data.ReplicationTypeMp2mp = types.BoolValue(true)
	} else {
		data.ReplicationTypeMp2mp = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/mac/duplication/limit"); value.Exists() {
		data.MacDuplicationLimit = types.Int64Value(value.Int())
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/mac/duplication/time"); value.Exists() {
		data.MacDuplicationTime = types.Int64Value(value.Int())
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/ip/duplication/limit"); value.Exists() {
		data.IpDuplicationLimit = types.Int64Value(value.Int())
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/ip/duplication/time"); value.Exists() {
		data.IpDuplicationTime = types.Int64Value(value.Int())
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/router-id/interface/Loopback"); value.Exists() {
		data.RouterIdLoopback = types.Int64Value(value.Int())
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/default-gateway/advertise"); value.Exists() {
		data.DefaultGatewayAdvertise = types.BoolValue(true)
	} else {
		data.DefaultGatewayAdvertise = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/logging/peer/state"); value.Exists() {
		data.LoggingPeerState = types.BoolValue(true)
	} else {
		data.LoggingPeerState = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/route-target/auto/vni"); value.Exists() {
		data.RouteTargetAutoVni = types.BoolValue(true)
	} else {
		data.RouteTargetAutoVni = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/anycast-gateway/mac/auto"); value.Exists() {
		data.AnycastGatewayMacAuto = types.BoolValue(true)
	} else {
		data.AnycastGatewayMacAuto = types.BoolValue(false)
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/flooding-suppression/address-resolution/disable"); value.Exists() {
		data.FloodingSuppressionAddressResolutionDisable = types.BoolValue(true)
	} else {
		data.FloodingSuppressionAddressResolutionDisable = types.BoolValue(false)
	}
}

// End of section. //template:end fromBodyDataXML

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletedItems

func (data *EVPN) getDeletedItems(ctx context.Context, state EVPN) []string {
	deletedItems := make([]string, 0)
	if !state.FloodingSuppressionAddressResolutionDisable.IsNull() && data.FloodingSuppressionAddressResolutionDisable.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/flooding-suppression/address-resolution/disable", state.getPath()))
	}
	if !state.AnycastGatewayMacAuto.IsNull() && data.AnycastGatewayMacAuto.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/anycast-gateway/mac/auto", state.getPath()))
	}
	if !state.RouteTargetAutoVni.IsNull() && data.RouteTargetAutoVni.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/route-target/auto/vni", state.getPath()))
	}
	if !state.LoggingPeerState.IsNull() && data.LoggingPeerState.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/logging/peer/state", state.getPath()))
	}
	if !state.DefaultGatewayAdvertise.IsNull() && data.DefaultGatewayAdvertise.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/default-gateway/advertise", state.getPath()))
	}
	if !state.RouterIdLoopback.IsNull() && data.RouterIdLoopback.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/router-id/interface/Loopback", state.getPath()))
	}
	if !state.IpDuplicationTime.IsNull() && data.IpDuplicationTime.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/duplication", state.getPath()))
	}
	if !state.IpDuplicationLimit.IsNull() && data.IpDuplicationLimit.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/duplication", state.getPath()))
	}
	if !state.MacDuplicationTime.IsNull() && data.MacDuplicationTime.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/mac/duplication", state.getPath()))
	}
	if !state.MacDuplicationLimit.IsNull() && data.MacDuplicationLimit.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/mac/duplication", state.getPath()))
	}
	if !state.ReplicationTypeMp2mp.IsNull() && data.ReplicationTypeMp2mp.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/replication-type/mp2mp", state.getPath()))
	}
	if !state.ReplicationTypeP2mp.IsNull() && data.ReplicationTypeP2mp.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/replication-type/p2mp", state.getPath()))
	}
	if !state.ReplicationTypeStatic.IsNull() && data.ReplicationTypeStatic.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/replication-type/static", state.getPath()))
	}
	if !state.ReplicationTypeIngress.IsNull() && data.ReplicationTypeIngress.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/replication-type/ingress", state.getPath()))
	}

	return deletedItems
}

// End of section. //template:end getDeletedItems

// Section below is generated&owned by "gen/generator.go". //template:begin addDeletedItemsXML

func (data *EVPN) addDeletedItemsXML(ctx context.Context, state EVPN, body string) string {
	b := netconf.NewBody(body)
	if !state.ReplicationTypeIngress.IsNull() && data.ReplicationTypeIngress.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/replication-type/ingress")
	}
	if !state.ReplicationTypeStatic.IsNull() && data.ReplicationTypeStatic.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/replication-type/static")
	}
	if !state.ReplicationTypeP2mp.IsNull() && data.ReplicationTypeP2mp.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/replication-type/p2mp")
	}
	if !state.ReplicationTypeMp2mp.IsNull() && data.ReplicationTypeMp2mp.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/replication-type/mp2mp")
	}
	if !state.MacDuplicationLimit.IsNull() && data.MacDuplicationLimit.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/mac/duplication")
	}
	if !state.MacDuplicationTime.IsNull() && data.MacDuplicationTime.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/mac/duplication")
	}
	if !state.IpDuplicationLimit.IsNull() && data.IpDuplicationLimit.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/ip/duplication")
	}
	if !state.IpDuplicationTime.IsNull() && data.IpDuplicationTime.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/ip/duplication")
	}
	if !state.RouterIdLoopback.IsNull() && data.RouterIdLoopback.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/router-id/interface/Loopback")
	}
	if !state.DefaultGatewayAdvertise.IsNull() && data.DefaultGatewayAdvertise.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/default-gateway/advertise")
	}
	if !state.LoggingPeerState.IsNull() && data.LoggingPeerState.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/logging/peer/state")
	}
	if !state.RouteTargetAutoVni.IsNull() && data.RouteTargetAutoVni.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/route-target/auto/vni")
	}
	if !state.AnycastGatewayMacAuto.IsNull() && data.AnycastGatewayMacAuto.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/anycast-gateway/mac/auto")
	}
	if !state.FloodingSuppressionAddressResolutionDisable.IsNull() && data.FloodingSuppressionAddressResolutionDisable.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/flooding-suppression/address-resolution/disable")
	}

	return b.Res()
}

// End of section. //template:end addDeletedItemsXML

// Section below is generated&owned by "gen/generator.go". //template:begin getEmptyLeafsDelete

func (data *EVPN) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.FloodingSuppressionAddressResolutionDisable.IsNull() && !data.FloodingSuppressionAddressResolutionDisable.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/flooding-suppression/address-resolution/disable", data.getPath()))
	}
	if !data.AnycastGatewayMacAuto.IsNull() && !data.AnycastGatewayMacAuto.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/anycast-gateway/mac/auto", data.getPath()))
	}
	if !data.RouteTargetAutoVni.IsNull() && !data.RouteTargetAutoVni.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/route-target/auto/vni", data.getPath()))
	}
	if !data.LoggingPeerState.IsNull() && !data.LoggingPeerState.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/logging/peer/state", data.getPath()))
	}
	if !data.DefaultGatewayAdvertise.IsNull() && !data.DefaultGatewayAdvertise.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/default-gateway/advertise", data.getPath()))
	}
	if !data.ReplicationTypeMp2mp.IsNull() && !data.ReplicationTypeMp2mp.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/replication-type/mp2mp", data.getPath()))
	}
	if !data.ReplicationTypeP2mp.IsNull() && !data.ReplicationTypeP2mp.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/replication-type/p2mp", data.getPath()))
	}
	if !data.ReplicationTypeStatic.IsNull() && !data.ReplicationTypeStatic.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/replication-type/static", data.getPath()))
	}
	if !data.ReplicationTypeIngress.IsNull() && !data.ReplicationTypeIngress.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/replication-type/ingress", data.getPath()))
	}

	return emptyLeafsDelete
}

// End of section. //template:end getEmptyLeafsDelete

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletePaths

func (data *EVPN) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.FloodingSuppressionAddressResolutionDisable.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/flooding-suppression/address-resolution/disable", data.getPath()))
	}
	if !data.AnycastGatewayMacAuto.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/anycast-gateway/mac/auto", data.getPath()))
	}
	if !data.RouteTargetAutoVni.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/route-target/auto/vni", data.getPath()))
	}
	if !data.LoggingPeerState.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/logging/peer/state", data.getPath()))
	}
	if !data.DefaultGatewayAdvertise.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/default-gateway/advertise", data.getPath()))
	}
	if !data.RouterIdLoopback.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/router-id/interface/Loopback", data.getPath()))
	}
	if !data.IpDuplicationTime.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/duplication", data.getPath()))
	}
	if !data.IpDuplicationLimit.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/duplication", data.getPath()))
	}
	if !data.MacDuplicationTime.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/mac/duplication", data.getPath()))
	}
	if !data.MacDuplicationLimit.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/mac/duplication", data.getPath()))
	}
	if !data.ReplicationTypeMp2mp.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/replication-type/mp2mp", data.getPath()))
	}
	if !data.ReplicationTypeP2mp.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/replication-type/p2mp", data.getPath()))
	}
	if !data.ReplicationTypeStatic.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/replication-type/static", data.getPath()))
	}
	if !data.ReplicationTypeIngress.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/replication-type/ingress", data.getPath()))
	}

	return deletePaths
}

// End of section. //template:end getDeletePaths

// Section below is generated&owned by "gen/generator.go". //template:begin addDeletePathsXML

func (data *EVPN) addDeletePathsXML(ctx context.Context, body string) string {
	b := netconf.NewBody(body)
	if !data.ReplicationTypeIngress.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/replication-type/ingress")
	}
	if !data.ReplicationTypeStatic.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/replication-type/static")
	}
	if !data.ReplicationTypeP2mp.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/replication-type/p2mp")
	}
	if !data.ReplicationTypeMp2mp.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/replication-type/mp2mp")
	}
	if !data.MacDuplicationLimit.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/mac/duplication")
	}
	if !data.MacDuplicationTime.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/mac/duplication")
	}
	if !data.IpDuplicationLimit.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/ip/duplication")
	}
	if !data.IpDuplicationTime.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/ip/duplication")
	}
	if !data.RouterIdLoopback.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/router-id/interface/Loopback")
	}
	if !data.DefaultGatewayAdvertise.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/default-gateway/advertise")
	}
	if !data.LoggingPeerState.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/logging/peer/state")
	}
	if !data.RouteTargetAutoVni.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/route-target/auto/vni")
	}
	if !data.AnycastGatewayMacAuto.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/anycast-gateway/mac/auto")
	}
	if !data.FloodingSuppressionAddressResolutionDisable.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/flooding-suppression/address-resolution/disable")
	}

	return b.Res()
}

// End of section. //template:end addDeletePathsXML
