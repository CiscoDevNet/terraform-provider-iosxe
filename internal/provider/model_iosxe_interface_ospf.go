// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"net/url"
	"regexp"
	"strconv"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type InterfaceOSPF struct {
	Device                       types.String `tfsdk:"device"`
	Id                           types.String `tfsdk:"id"`
	DeleteMode                   types.String `tfsdk:"delete_mode"`
	Type                         types.String `tfsdk:"type"`
	Name                         types.String `tfsdk:"name"`
	Cost                         types.Int64  `tfsdk:"cost"`
	DeadInterval                 types.Int64  `tfsdk:"dead_interval"`
	HelloInterval                types.Int64  `tfsdk:"hello_interval"`
	MtuIgnore                    types.Bool   `tfsdk:"mtu_ignore"`
	NetworkTypeBroadcast         types.Bool   `tfsdk:"network_type_broadcast"`
	NetworkTypeNonBroadcast      types.Bool   `tfsdk:"network_type_non_broadcast"`
	NetworkTypePointToMultipoint types.Bool   `tfsdk:"network_type_point_to_multipoint"`
	NetworkTypePointToPoint      types.Bool   `tfsdk:"network_type_point_to_point"`
	Priority                     types.Int64  `tfsdk:"priority"`
}

type InterfaceOSPFData struct {
	Device                       types.String `tfsdk:"device"`
	Id                           types.String `tfsdk:"id"`
	Type                         types.String `tfsdk:"type"`
	Name                         types.String `tfsdk:"name"`
	Cost                         types.Int64  `tfsdk:"cost"`
	DeadInterval                 types.Int64  `tfsdk:"dead_interval"`
	HelloInterval                types.Int64  `tfsdk:"hello_interval"`
	MtuIgnore                    types.Bool   `tfsdk:"mtu_ignore"`
	NetworkTypeBroadcast         types.Bool   `tfsdk:"network_type_broadcast"`
	NetworkTypeNonBroadcast      types.Bool   `tfsdk:"network_type_non_broadcast"`
	NetworkTypePointToMultipoint types.Bool   `tfsdk:"network_type_point_to_multipoint"`
	NetworkTypePointToPoint      types.Bool   `tfsdk:"network_type_point_to_point"`
	Priority                     types.Int64  `tfsdk:"priority"`
}

func (data InterfaceOSPF) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/interface/%s=%v/ip/Cisco-IOS-XE-ospf:router-ospf/ospf", url.QueryEscape(fmt.Sprintf("%v", data.Type.ValueString())), url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
}

func (data InterfaceOSPFData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/interface/%s=%v/ip/Cisco-IOS-XE-ospf:router-ospf/ospf", url.QueryEscape(fmt.Sprintf("%v", data.Type.ValueString())), url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
}

// if last path element has a key -> remove it
func (data InterfaceOSPF) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data InterfaceOSPF) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Cost.IsNull() && !data.Cost.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"cost", strconv.FormatInt(data.Cost.ValueInt64(), 10))
	}
	if !data.DeadInterval.IsNull() && !data.DeadInterval.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"dead-interval", strconv.FormatInt(data.DeadInterval.ValueInt64(), 10))
	}
	if !data.HelloInterval.IsNull() && !data.HelloInterval.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"hello-interval", strconv.FormatInt(data.HelloInterval.ValueInt64(), 10))
	}
	if !data.MtuIgnore.IsNull() && !data.MtuIgnore.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"mtu-ignore", data.MtuIgnore.ValueBool())
	}
	if !data.NetworkTypeBroadcast.IsNull() && !data.NetworkTypeBroadcast.IsUnknown() {
		if data.NetworkTypeBroadcast.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"network.broadcast", map[string]string{})
		}
	}
	if !data.NetworkTypeNonBroadcast.IsNull() && !data.NetworkTypeNonBroadcast.IsUnknown() {
		if data.NetworkTypeNonBroadcast.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"network.non-broadcast", map[string]string{})
		}
	}
	if !data.NetworkTypePointToMultipoint.IsNull() && !data.NetworkTypePointToMultipoint.IsUnknown() {
		if data.NetworkTypePointToMultipoint.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"network.point-to-multipoint", map[string]string{})
		}
	}
	if !data.NetworkTypePointToPoint.IsNull() && !data.NetworkTypePointToPoint.IsUnknown() {
		if data.NetworkTypePointToPoint.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"network.point-to-point", map[string]string{})
		}
	}
	if !data.Priority.IsNull() && !data.Priority.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"priority", strconv.FormatInt(data.Priority.ValueInt64(), 10))
	}
	return body
}

func (data *InterfaceOSPF) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "cost"); value.Exists() && !data.Cost.IsNull() {
		data.Cost = types.Int64Value(value.Int())
	} else {
		data.Cost = types.Int64Null()
	}
	if value := res.Get(prefix + "dead-interval"); value.Exists() && !data.DeadInterval.IsNull() {
		data.DeadInterval = types.Int64Value(value.Int())
	} else {
		data.DeadInterval = types.Int64Null()
	}
	if value := res.Get(prefix + "hello-interval"); value.Exists() && !data.HelloInterval.IsNull() {
		data.HelloInterval = types.Int64Value(value.Int())
	} else {
		data.HelloInterval = types.Int64Null()
	}
	if value := res.Get(prefix + "mtu-ignore"); !data.MtuIgnore.IsNull() {
		if value.Exists() {
			data.MtuIgnore = types.BoolValue(value.Bool())
		}
	} else {
		data.MtuIgnore = types.BoolNull()
	}
	if value := res.Get(prefix + "network.broadcast"); !data.NetworkTypeBroadcast.IsNull() {
		if value.Exists() {
			data.NetworkTypeBroadcast = types.BoolValue(true)
		} else {
			data.NetworkTypeBroadcast = types.BoolValue(false)
		}
	} else {
		data.NetworkTypeBroadcast = types.BoolNull()
	}
	if value := res.Get(prefix + "network.non-broadcast"); !data.NetworkTypeNonBroadcast.IsNull() {
		if value.Exists() {
			data.NetworkTypeNonBroadcast = types.BoolValue(true)
		} else {
			data.NetworkTypeNonBroadcast = types.BoolValue(false)
		}
	} else {
		data.NetworkTypeNonBroadcast = types.BoolNull()
	}
	if value := res.Get(prefix + "network.point-to-multipoint"); !data.NetworkTypePointToMultipoint.IsNull() {
		if value.Exists() {
			data.NetworkTypePointToMultipoint = types.BoolValue(true)
		} else {
			data.NetworkTypePointToMultipoint = types.BoolValue(false)
		}
	} else {
		data.NetworkTypePointToMultipoint = types.BoolNull()
	}
	if value := res.Get(prefix + "network.point-to-point"); !data.NetworkTypePointToPoint.IsNull() {
		if value.Exists() {
			data.NetworkTypePointToPoint = types.BoolValue(true)
		} else {
			data.NetworkTypePointToPoint = types.BoolValue(false)
		}
	} else {
		data.NetworkTypePointToPoint = types.BoolNull()
	}
	if value := res.Get(prefix + "priority"); value.Exists() && !data.Priority.IsNull() {
		data.Priority = types.Int64Value(value.Int())
	} else {
		data.Priority = types.Int64Null()
	}
}

func (data *InterfaceOSPFData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "cost"); value.Exists() {
		data.Cost = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "dead-interval"); value.Exists() {
		data.DeadInterval = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "hello-interval"); value.Exists() {
		data.HelloInterval = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "mtu-ignore"); value.Exists() {
		data.MtuIgnore = types.BoolValue(value.Bool())
	} else {
		data.MtuIgnore = types.BoolValue(false)
	}
	if value := res.Get(prefix + "network.broadcast"); value.Exists() {
		data.NetworkTypeBroadcast = types.BoolValue(true)
	} else {
		data.NetworkTypeBroadcast = types.BoolValue(false)
	}
	if value := res.Get(prefix + "network.non-broadcast"); value.Exists() {
		data.NetworkTypeNonBroadcast = types.BoolValue(true)
	} else {
		data.NetworkTypeNonBroadcast = types.BoolValue(false)
	}
	if value := res.Get(prefix + "network.point-to-multipoint"); value.Exists() {
		data.NetworkTypePointToMultipoint = types.BoolValue(true)
	} else {
		data.NetworkTypePointToMultipoint = types.BoolValue(false)
	}
	if value := res.Get(prefix + "network.point-to-point"); value.Exists() {
		data.NetworkTypePointToPoint = types.BoolValue(true)
	} else {
		data.NetworkTypePointToPoint = types.BoolValue(false)
	}
	if value := res.Get(prefix + "priority"); value.Exists() {
		data.Priority = types.Int64Value(value.Int())
	}
}

func (data *InterfaceOSPF) getDeletedListItems(ctx context.Context, state InterfaceOSPF) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *InterfaceOSPF) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.NetworkTypeBroadcast.IsNull() && !data.NetworkTypeBroadcast.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/network/broadcast", data.getPath()))
	}
	if !data.NetworkTypeNonBroadcast.IsNull() && !data.NetworkTypeNonBroadcast.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/network/non-broadcast", data.getPath()))
	}
	if !data.NetworkTypePointToMultipoint.IsNull() && !data.NetworkTypePointToMultipoint.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/network/point-to-multipoint", data.getPath()))
	}
	if !data.NetworkTypePointToPoint.IsNull() && !data.NetworkTypePointToPoint.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/network/point-to-point", data.getPath()))
	}
	return emptyLeafsDelete
}

func (data *InterfaceOSPF) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.Cost.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/cost", data.getPath()))
	}
	if !data.DeadInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/dead-interval", data.getPath()))
	}
	if !data.HelloInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/hello-interval", data.getPath()))
	}
	if !data.MtuIgnore.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/mtu-ignore", data.getPath()))
	}
	if !data.NetworkTypeBroadcast.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/network/broadcast", data.getPath()))
	}
	if !data.NetworkTypeNonBroadcast.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/network/non-broadcast", data.getPath()))
	}
	if !data.NetworkTypePointToMultipoint.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/network/point-to-multipoint", data.getPath()))
	}
	if !data.NetworkTypePointToPoint.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/network/point-to-point", data.getPath()))
	}
	if !data.Priority.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/priority", data.getPath()))
	}
	return deletePaths
}
