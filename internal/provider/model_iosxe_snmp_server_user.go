// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"net/url"
	"regexp"
	"strconv"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type SNMPServerUser struct {
	Device                          types.String `tfsdk:"device"`
	Id                              types.String `tfsdk:"id"`
	DeleteMode                      types.String `tfsdk:"delete_mode"`
	Username                        types.String `tfsdk:"username"`
	Grpname                         types.String `tfsdk:"grpname"`
	V3AuthAlgorithm                 types.String `tfsdk:"v3_auth_algorithm"`
	V3AuthPassword                  types.String `tfsdk:"v3_auth_password"`
	V3AuthPrivAesAlgorithm          types.String `tfsdk:"v3_auth_priv_aes_algorithm"`
	V3AuthPrivAesPassword           types.String `tfsdk:"v3_auth_priv_aes_password"`
	V3AuthPrivAesAccessIpv6Acl      types.String `tfsdk:"v3_auth_priv_aes_access_ipv6_acl"`
	V3AuthPrivAesAccessStandardAcl  types.Int64  `tfsdk:"v3_auth_priv_aes_access_standard_acl"`
	V3AuthPrivAesAccessAclName      types.String `tfsdk:"v3_auth_priv_aes_access_acl_name"`
	V3AuthPrivDesPassword           types.String `tfsdk:"v3_auth_priv_des_password"`
	V3AuthPrivDesAccessIpv6Acl      types.String `tfsdk:"v3_auth_priv_des_access_ipv6_acl"`
	V3AuthPrivDesAccessStandardAcl  types.Int64  `tfsdk:"v3_auth_priv_des_access_standard_acl"`
	V3AuthPrivDesAccessAclName      types.String `tfsdk:"v3_auth_priv_des_access_acl_name"`
	V3AuthPrivDes3Password          types.String `tfsdk:"v3_auth_priv_des3_password"`
	V3AuthPrivDes3AccessIpv6Acl     types.String `tfsdk:"v3_auth_priv_des3_access_ipv6_acl"`
	V3AuthPrivDes3AccessStandardAcl types.Int64  `tfsdk:"v3_auth_priv_des3_access_standard_acl"`
	V3AuthPrivDes3AccessAclName     types.String `tfsdk:"v3_auth_priv_des3_access_acl_name"`
	V3AuthAccessIpv6Acl             types.String `tfsdk:"v3_auth_access_ipv6_acl"`
	V3AuthAccessStandardAcl         types.Int64  `tfsdk:"v3_auth_access_standard_acl"`
	V3AuthAccessAclName             types.String `tfsdk:"v3_auth_access_acl_name"`
}

type SNMPServerUserData struct {
	Device                          types.String `tfsdk:"device"`
	Id                              types.String `tfsdk:"id"`
	Username                        types.String `tfsdk:"username"`
	Grpname                         types.String `tfsdk:"grpname"`
	V3AuthAlgorithm                 types.String `tfsdk:"v3_auth_algorithm"`
	V3AuthPassword                  types.String `tfsdk:"v3_auth_password"`
	V3AuthPrivAesAlgorithm          types.String `tfsdk:"v3_auth_priv_aes_algorithm"`
	V3AuthPrivAesPassword           types.String `tfsdk:"v3_auth_priv_aes_password"`
	V3AuthPrivAesAccessIpv6Acl      types.String `tfsdk:"v3_auth_priv_aes_access_ipv6_acl"`
	V3AuthPrivAesAccessStandardAcl  types.Int64  `tfsdk:"v3_auth_priv_aes_access_standard_acl"`
	V3AuthPrivAesAccessAclName      types.String `tfsdk:"v3_auth_priv_aes_access_acl_name"`
	V3AuthPrivDesPassword           types.String `tfsdk:"v3_auth_priv_des_password"`
	V3AuthPrivDesAccessIpv6Acl      types.String `tfsdk:"v3_auth_priv_des_access_ipv6_acl"`
	V3AuthPrivDesAccessStandardAcl  types.Int64  `tfsdk:"v3_auth_priv_des_access_standard_acl"`
	V3AuthPrivDesAccessAclName      types.String `tfsdk:"v3_auth_priv_des_access_acl_name"`
	V3AuthPrivDes3Password          types.String `tfsdk:"v3_auth_priv_des3_password"`
	V3AuthPrivDes3AccessIpv6Acl     types.String `tfsdk:"v3_auth_priv_des3_access_ipv6_acl"`
	V3AuthPrivDes3AccessStandardAcl types.Int64  `tfsdk:"v3_auth_priv_des3_access_standard_acl"`
	V3AuthPrivDes3AccessAclName     types.String `tfsdk:"v3_auth_priv_des3_access_acl_name"`
	V3AuthAccessIpv6Acl             types.String `tfsdk:"v3_auth_access_ipv6_acl"`
	V3AuthAccessStandardAcl         types.Int64  `tfsdk:"v3_auth_access_standard_acl"`
	V3AuthAccessAclName             types.String `tfsdk:"v3_auth_access_acl_name"`
}

func (data SNMPServerUser) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/snmp-server/Cisco-IOS-XE-snmp:user/names=%s,%s", url.QueryEscape(fmt.Sprintf("%v", data.Username.ValueString())), url.QueryEscape(fmt.Sprintf("%v", data.Grpname.ValueString())))
}

func (data SNMPServerUserData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/snmp-server/Cisco-IOS-XE-snmp:user/names=%s,%s", url.QueryEscape(fmt.Sprintf("%v", data.Username.ValueString())), url.QueryEscape(fmt.Sprintf("%v", data.Grpname.ValueString())))
}

// if last path element has a key -> remove it
func (data SNMPServerUser) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data SNMPServerUser) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Username.IsNull() && !data.Username.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"username", data.Username.ValueString())
	}
	if !data.Grpname.IsNull() && !data.Grpname.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"grpname", data.Grpname.ValueString())
	}
	if !data.V3AuthAlgorithm.IsNull() && !data.V3AuthAlgorithm.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.algorithm", data.V3AuthAlgorithm.ValueString())
	}
	if !data.V3AuthPassword.IsNull() && !data.V3AuthPassword.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.password", data.V3AuthPassword.ValueString())
	}
	if !data.V3AuthPrivAesAlgorithm.IsNull() && !data.V3AuthPrivAesAlgorithm.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.priv-config.aes.algorithm", data.V3AuthPrivAesAlgorithm.ValueString())
	}
	if !data.V3AuthPrivAesPassword.IsNull() && !data.V3AuthPrivAesPassword.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.priv-config.aes.password", data.V3AuthPrivAesPassword.ValueString())
	}
	if !data.V3AuthPrivAesAccessIpv6Acl.IsNull() && !data.V3AuthPrivAesAccessIpv6Acl.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.priv-config.aes.access-config.ipv6-acl", data.V3AuthPrivAesAccessIpv6Acl.ValueString())
	}
	if !data.V3AuthPrivAesAccessStandardAcl.IsNull() && !data.V3AuthPrivAesAccessStandardAcl.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.priv-config.aes.access-config.standard-acl", strconv.FormatInt(data.V3AuthPrivAesAccessStandardAcl.ValueInt64(), 10))
	}
	if !data.V3AuthPrivAesAccessAclName.IsNull() && !data.V3AuthPrivAesAccessAclName.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.priv-config.aes.access-config.acl-name", data.V3AuthPrivAesAccessAclName.ValueString())
	}
	if !data.V3AuthPrivDesPassword.IsNull() && !data.V3AuthPrivDesPassword.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.priv-config.des.password", data.V3AuthPrivDesPassword.ValueString())
	}
	if !data.V3AuthPrivDesAccessIpv6Acl.IsNull() && !data.V3AuthPrivDesAccessIpv6Acl.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.priv-config.des.access-config.ipv6-acl", data.V3AuthPrivDesAccessIpv6Acl.ValueString())
	}
	if !data.V3AuthPrivDesAccessStandardAcl.IsNull() && !data.V3AuthPrivDesAccessStandardAcl.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.priv-config.des.access-config.standard-acl", strconv.FormatInt(data.V3AuthPrivDesAccessStandardAcl.ValueInt64(), 10))
	}
	if !data.V3AuthPrivDesAccessAclName.IsNull() && !data.V3AuthPrivDesAccessAclName.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.priv-config.des.access-config.acl-name", data.V3AuthPrivDesAccessAclName.ValueString())
	}
	if !data.V3AuthPrivDes3Password.IsNull() && !data.V3AuthPrivDes3Password.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.priv-config.des3.password", data.V3AuthPrivDes3Password.ValueString())
	}
	if !data.V3AuthPrivDes3AccessIpv6Acl.IsNull() && !data.V3AuthPrivDes3AccessIpv6Acl.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.priv-config.des3.access-config.ipv6-acl", data.V3AuthPrivDes3AccessIpv6Acl.ValueString())
	}
	if !data.V3AuthPrivDes3AccessStandardAcl.IsNull() && !data.V3AuthPrivDes3AccessStandardAcl.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.priv-config.des3.access-config.standard-acl", strconv.FormatInt(data.V3AuthPrivDes3AccessStandardAcl.ValueInt64(), 10))
	}
	if !data.V3AuthPrivDes3AccessAclName.IsNull() && !data.V3AuthPrivDes3AccessAclName.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.priv-config.des3.access-config.acl-name", data.V3AuthPrivDes3AccessAclName.ValueString())
	}
	if !data.V3AuthAccessIpv6Acl.IsNull() && !data.V3AuthAccessIpv6Acl.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.access-config.ipv6-acl", data.V3AuthAccessIpv6Acl.ValueString())
	}
	if !data.V3AuthAccessStandardAcl.IsNull() && !data.V3AuthAccessStandardAcl.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.access-config.standard-acl", strconv.FormatInt(data.V3AuthAccessStandardAcl.ValueInt64(), 10))
	}
	if !data.V3AuthAccessAclName.IsNull() && !data.V3AuthAccessAclName.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"v3.auth-config.access-config.acl-name", data.V3AuthAccessAclName.ValueString())
	}
	return body
}

func (data *SNMPServerUser) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "username"); value.Exists() && !data.Username.IsNull() {
		data.Username = types.StringValue(value.String())
	} else {
		data.Username = types.StringNull()
	}
	if value := res.Get(prefix + "grpname"); value.Exists() && !data.Grpname.IsNull() {
		data.Grpname = types.StringValue(value.String())
	} else {
		data.Grpname = types.StringNull()
	}
	if value := res.Get(prefix + "v3.auth-config.algorithm"); value.Exists() && !data.V3AuthAlgorithm.IsNull() {
		data.V3AuthAlgorithm = types.StringValue(value.String())
	} else {
		data.V3AuthAlgorithm = types.StringNull()
	}
	if value := res.Get(prefix + "v3.auth-config.password"); value.Exists() && !data.V3AuthPassword.IsNull() {
		data.V3AuthPassword = types.StringValue(value.String())
	} else {
		data.V3AuthPassword = types.StringNull()
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.aes.algorithm"); value.Exists() && !data.V3AuthPrivAesAlgorithm.IsNull() {
		data.V3AuthPrivAesAlgorithm = types.StringValue(value.String())
	} else {
		data.V3AuthPrivAesAlgorithm = types.StringNull()
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.aes.password"); value.Exists() && !data.V3AuthPrivAesPassword.IsNull() {
		data.V3AuthPrivAesPassword = types.StringValue(value.String())
	} else {
		data.V3AuthPrivAesPassword = types.StringNull()
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.aes.access-config.ipv6-acl"); value.Exists() && !data.V3AuthPrivAesAccessIpv6Acl.IsNull() {
		data.V3AuthPrivAesAccessIpv6Acl = types.StringValue(value.String())
	} else {
		data.V3AuthPrivAesAccessIpv6Acl = types.StringNull()
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.aes.access-config.standard-acl"); value.Exists() && !data.V3AuthPrivAesAccessStandardAcl.IsNull() {
		data.V3AuthPrivAesAccessStandardAcl = types.Int64Value(value.Int())
	} else {
		data.V3AuthPrivAesAccessStandardAcl = types.Int64Null()
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.aes.access-config.acl-name"); value.Exists() && !data.V3AuthPrivAesAccessAclName.IsNull() {
		data.V3AuthPrivAesAccessAclName = types.StringValue(value.String())
	} else {
		data.V3AuthPrivAesAccessAclName = types.StringNull()
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.des.password"); value.Exists() && !data.V3AuthPrivDesPassword.IsNull() {
		data.V3AuthPrivDesPassword = types.StringValue(value.String())
	} else {
		data.V3AuthPrivDesPassword = types.StringNull()
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.des.access-config.ipv6-acl"); value.Exists() && !data.V3AuthPrivDesAccessIpv6Acl.IsNull() {
		data.V3AuthPrivDesAccessIpv6Acl = types.StringValue(value.String())
	} else {
		data.V3AuthPrivDesAccessIpv6Acl = types.StringNull()
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.des.access-config.standard-acl"); value.Exists() && !data.V3AuthPrivDesAccessStandardAcl.IsNull() {
		data.V3AuthPrivDesAccessStandardAcl = types.Int64Value(value.Int())
	} else {
		data.V3AuthPrivDesAccessStandardAcl = types.Int64Null()
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.des.access-config.acl-name"); value.Exists() && !data.V3AuthPrivDesAccessAclName.IsNull() {
		data.V3AuthPrivDesAccessAclName = types.StringValue(value.String())
	} else {
		data.V3AuthPrivDesAccessAclName = types.StringNull()
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.des3.password"); value.Exists() && !data.V3AuthPrivDes3Password.IsNull() {
		data.V3AuthPrivDes3Password = types.StringValue(value.String())
	} else {
		data.V3AuthPrivDes3Password = types.StringNull()
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.des3.access-config.ipv6-acl"); value.Exists() && !data.V3AuthPrivDes3AccessIpv6Acl.IsNull() {
		data.V3AuthPrivDes3AccessIpv6Acl = types.StringValue(value.String())
	} else {
		data.V3AuthPrivDes3AccessIpv6Acl = types.StringNull()
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.des3.access-config.standard-acl"); value.Exists() && !data.V3AuthPrivDes3AccessStandardAcl.IsNull() {
		data.V3AuthPrivDes3AccessStandardAcl = types.Int64Value(value.Int())
	} else {
		data.V3AuthPrivDes3AccessStandardAcl = types.Int64Null()
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.des3.access-config.acl-name"); value.Exists() && !data.V3AuthPrivDes3AccessAclName.IsNull() {
		data.V3AuthPrivDes3AccessAclName = types.StringValue(value.String())
	} else {
		data.V3AuthPrivDes3AccessAclName = types.StringNull()
	}
	if value := res.Get(prefix + "v3.auth-config.access-config.ipv6-acl"); value.Exists() && !data.V3AuthAccessIpv6Acl.IsNull() {
		data.V3AuthAccessIpv6Acl = types.StringValue(value.String())
	} else {
		data.V3AuthAccessIpv6Acl = types.StringNull()
	}
	if value := res.Get(prefix + "v3.auth-config.access-config.standard-acl"); value.Exists() && !data.V3AuthAccessStandardAcl.IsNull() {
		data.V3AuthAccessStandardAcl = types.Int64Value(value.Int())
	} else {
		data.V3AuthAccessStandardAcl = types.Int64Null()
	}
	if value := res.Get(prefix + "v3.auth-config.access-config.acl-name"); value.Exists() && !data.V3AuthAccessAclName.IsNull() {
		data.V3AuthAccessAclName = types.StringValue(value.String())
	} else {
		data.V3AuthAccessAclName = types.StringNull()
	}
}

func (data *SNMPServerUserData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "v3.auth-config.algorithm"); value.Exists() {
		data.V3AuthAlgorithm = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "v3.auth-config.password"); value.Exists() {
		data.V3AuthPassword = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.aes.algorithm"); value.Exists() {
		data.V3AuthPrivAesAlgorithm = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.aes.password"); value.Exists() {
		data.V3AuthPrivAesPassword = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.aes.access-config.ipv6-acl"); value.Exists() {
		data.V3AuthPrivAesAccessIpv6Acl = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.aes.access-config.standard-acl"); value.Exists() {
		data.V3AuthPrivAesAccessStandardAcl = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.aes.access-config.acl-name"); value.Exists() {
		data.V3AuthPrivAesAccessAclName = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.des.password"); value.Exists() {
		data.V3AuthPrivDesPassword = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.des.access-config.ipv6-acl"); value.Exists() {
		data.V3AuthPrivDesAccessIpv6Acl = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.des.access-config.standard-acl"); value.Exists() {
		data.V3AuthPrivDesAccessStandardAcl = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.des.access-config.acl-name"); value.Exists() {
		data.V3AuthPrivDesAccessAclName = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.des3.password"); value.Exists() {
		data.V3AuthPrivDes3Password = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.des3.access-config.ipv6-acl"); value.Exists() {
		data.V3AuthPrivDes3AccessIpv6Acl = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.des3.access-config.standard-acl"); value.Exists() {
		data.V3AuthPrivDes3AccessStandardAcl = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "v3.auth-config.priv-config.des3.access-config.acl-name"); value.Exists() {
		data.V3AuthPrivDes3AccessAclName = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "v3.auth-config.access-config.ipv6-acl"); value.Exists() {
		data.V3AuthAccessIpv6Acl = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "v3.auth-config.access-config.standard-acl"); value.Exists() {
		data.V3AuthAccessStandardAcl = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "v3.auth-config.access-config.acl-name"); value.Exists() {
		data.V3AuthAccessAclName = types.StringValue(value.String())
	}
}

func (data *SNMPServerUser) getDeletedItems(ctx context.Context, state SNMPServerUser) []string {
	deletedItems := make([]string, 0)
	if !state.V3AuthAlgorithm.IsNull() && data.V3AuthAlgorithm.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/algorithm", state.getPath()))
	}
	if !state.V3AuthPassword.IsNull() && data.V3AuthPassword.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/password", state.getPath()))
	}
	if !state.V3AuthPrivAesAlgorithm.IsNull() && data.V3AuthPrivAesAlgorithm.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/priv-config/aes/algorithm", state.getPath()))
	}
	if !state.V3AuthPrivAesPassword.IsNull() && data.V3AuthPrivAesPassword.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/priv-config/aes/password", state.getPath()))
	}
	if !state.V3AuthPrivAesAccessIpv6Acl.IsNull() && data.V3AuthPrivAesAccessIpv6Acl.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/priv-config/aes/access-config/ipv6-acl", state.getPath()))
	}
	if !state.V3AuthPrivAesAccessStandardAcl.IsNull() && data.V3AuthPrivAesAccessStandardAcl.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/priv-config/aes/access-config/standard-acl", state.getPath()))
	}
	if !state.V3AuthPrivAesAccessAclName.IsNull() && data.V3AuthPrivAesAccessAclName.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/priv-config/aes/access-config/acl-name", state.getPath()))
	}
	if !state.V3AuthPrivDesPassword.IsNull() && data.V3AuthPrivDesPassword.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/priv-config/des/password", state.getPath()))
	}
	if !state.V3AuthPrivDesAccessIpv6Acl.IsNull() && data.V3AuthPrivDesAccessIpv6Acl.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/priv-config/des/access-config/ipv6-acl", state.getPath()))
	}
	if !state.V3AuthPrivDesAccessStandardAcl.IsNull() && data.V3AuthPrivDesAccessStandardAcl.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/priv-config/des/access-config/standard-acl", state.getPath()))
	}
	if !state.V3AuthPrivDesAccessAclName.IsNull() && data.V3AuthPrivDesAccessAclName.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/priv-config/des/access-config/acl-name", state.getPath()))
	}
	if !state.V3AuthPrivDes3Password.IsNull() && data.V3AuthPrivDes3Password.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/priv-config/des3/password", state.getPath()))
	}
	if !state.V3AuthPrivDes3AccessIpv6Acl.IsNull() && data.V3AuthPrivDes3AccessIpv6Acl.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/priv-config/des3/access-config/ipv6-acl", state.getPath()))
	}
	if !state.V3AuthPrivDes3AccessStandardAcl.IsNull() && data.V3AuthPrivDes3AccessStandardAcl.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/priv-config/des3/access-config/standard-acl", state.getPath()))
	}
	if !state.V3AuthPrivDes3AccessAclName.IsNull() && data.V3AuthPrivDes3AccessAclName.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/priv-config/des3/access-config/acl-name", state.getPath()))
	}
	if !state.V3AuthAccessIpv6Acl.IsNull() && data.V3AuthAccessIpv6Acl.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/access-config/ipv6-acl", state.getPath()))
	}
	if !state.V3AuthAccessStandardAcl.IsNull() && data.V3AuthAccessStandardAcl.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/access-config/standard-acl", state.getPath()))
	}
	if !state.V3AuthAccessAclName.IsNull() && data.V3AuthAccessAclName.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/v3/auth-config/access-config/acl-name", state.getPath()))
	}
	return deletedItems
}

func (data *SNMPServerUser) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}

func (data *SNMPServerUser) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.V3AuthAlgorithm.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/algorithm", data.getPath()))
	}
	if !data.V3AuthPassword.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/password", data.getPath()))
	}
	if !data.V3AuthPrivAesAlgorithm.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/priv-config/aes/algorithm", data.getPath()))
	}
	if !data.V3AuthPrivAesPassword.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/priv-config/aes/password", data.getPath()))
	}
	if !data.V3AuthPrivAesAccessIpv6Acl.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/priv-config/aes/access-config/ipv6-acl", data.getPath()))
	}
	if !data.V3AuthPrivAesAccessStandardAcl.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/priv-config/aes/access-config/standard-acl", data.getPath()))
	}
	if !data.V3AuthPrivAesAccessAclName.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/priv-config/aes/access-config/acl-name", data.getPath()))
	}
	if !data.V3AuthPrivDesPassword.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/priv-config/des/password", data.getPath()))
	}
	if !data.V3AuthPrivDesAccessIpv6Acl.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/priv-config/des/access-config/ipv6-acl", data.getPath()))
	}
	if !data.V3AuthPrivDesAccessStandardAcl.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/priv-config/des/access-config/standard-acl", data.getPath()))
	}
	if !data.V3AuthPrivDesAccessAclName.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/priv-config/des/access-config/acl-name", data.getPath()))
	}
	if !data.V3AuthPrivDes3Password.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/priv-config/des3/password", data.getPath()))
	}
	if !data.V3AuthPrivDes3AccessIpv6Acl.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/priv-config/des3/access-config/ipv6-acl", data.getPath()))
	}
	if !data.V3AuthPrivDes3AccessStandardAcl.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/priv-config/des3/access-config/standard-acl", data.getPath()))
	}
	if !data.V3AuthPrivDes3AccessAclName.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/priv-config/des3/access-config/acl-name", data.getPath()))
	}
	if !data.V3AuthAccessIpv6Acl.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/access-config/ipv6-acl", data.getPath()))
	}
	if !data.V3AuthAccessStandardAcl.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/access-config/standard-acl", data.getPath()))
	}
	if !data.V3AuthAccessAclName.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/v3/auth-config/access-config/acl-name", data.getPath()))
	}
	return deletePaths
}
