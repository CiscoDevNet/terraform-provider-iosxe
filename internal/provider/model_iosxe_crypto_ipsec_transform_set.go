// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"net/url"
	"regexp"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-netconf"
	"github.com/netascode/xmldot"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin types
type CryptoIPSecTransformSet struct {
	Device     types.String `tfsdk:"device"`
	Id         types.String `tfsdk:"id"`
	Name       types.String `tfsdk:"name"`
	Esp        types.String `tfsdk:"esp"`
	EspHmac    types.String `tfsdk:"esp_hmac"`
	ModeTunnel types.Bool   `tfsdk:"mode_tunnel"`
}

type CryptoIPSecTransformSetData struct {
	Device     types.String `tfsdk:"device"`
	Id         types.String `tfsdk:"id"`
	Name       types.String `tfsdk:"name"`
	Esp        types.String `tfsdk:"esp"`
	EspHmac    types.String `tfsdk:"esp_hmac"`
	ModeTunnel types.Bool   `tfsdk:"mode_tunnel"`
}

// End of section. //template:end types

// Section below is generated&owned by "gen/generator.go". //template:begin getPath

func (data CryptoIPSecTransformSet) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ipsec/transform-set=%s", url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
}

func (data CryptoIPSecTransformSetData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ipsec/transform-set=%s", url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
}

// if last path element has a key -> remove it
func (data CryptoIPSecTransformSet) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

// getXPath returns the XPath for NETCONF operations
func (data CryptoIPSecTransformSet) getXPath() string {
	path := helpers.ConvertRestconfPathToXPath("Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ipsec/transform-set=%s")
	path = fmt.Sprintf(path, "tag", url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
	return path
}

func (data CryptoIPSecTransformSetData) getXPath() string {
	path := helpers.ConvertRestconfPathToXPath("Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ipsec/transform-set=%s")
	path = fmt.Sprintf(path, "tag", url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
	return path
}

// End of section. //template:end getPath

// Section below is generated&owned by "gen/generator.go". //template:begin toBody

func (data CryptoIPSecTransformSet) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Name.IsNull() && !data.Name.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"tag", data.Name.ValueString())
	}
	if !data.Esp.IsNull() && !data.Esp.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"esp", data.Esp.ValueString())
	}
	if !data.EspHmac.IsNull() && !data.EspHmac.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"esp-hmac", data.EspHmac.ValueString())
	}
	if !data.ModeTunnel.IsNull() && !data.ModeTunnel.IsUnknown() {
		if data.ModeTunnel.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"mode.tunnel-choice", map[string]string{})
		}
	}
	return body
}

// End of section. //template:end toBody

// Section below is generated&owned by "gen/generator.go". //template:begin toBodyXML

func (data CryptoIPSecTransformSet) toBodyXML(ctx context.Context) string {
	body := netconf.Body{}
	if !data.Name.IsNull() && !data.Name.IsUnknown() {
		body = helpers.SetFromXPath(body, data.getXPath()+"/tag", data.Name.ValueString())
	}
	if !data.Esp.IsNull() && !data.Esp.IsUnknown() {
		body = helpers.SetFromXPath(body, data.getXPath()+"/esp", data.Esp.ValueString())
	}
	if !data.EspHmac.IsNull() && !data.EspHmac.IsUnknown() {
		body = helpers.SetFromXPath(body, data.getXPath()+"/esp-hmac", data.EspHmac.ValueString())
	}
	if !data.ModeTunnel.IsNull() && !data.ModeTunnel.IsUnknown() {
		if data.ModeTunnel.ValueBool() {
			body = helpers.SetFromXPath(body, data.getXPath()+"/mode/tunnel-choice", "")
		} else {
			body = helpers.RemoveFromXPath(body, data.getXPath()+"/mode/tunnel-choice")
		}
	}
	bodyString, err := body.String()
	if err != nil {
		tflog.Error(ctx, fmt.Sprintf("Error converting body to string: %s", err))
	}
	return bodyString
}

// End of section. //template:end toBodyXML

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBody

func (data *CryptoIPSecTransformSet) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "tag"); value.Exists() && !data.Name.IsNull() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get(prefix + "esp"); value.Exists() && !data.Esp.IsNull() {
		data.Esp = types.StringValue(value.String())
	} else {
		data.Esp = types.StringNull()
	}
	if value := res.Get(prefix + "esp-hmac"); value.Exists() && !data.EspHmac.IsNull() {
		data.EspHmac = types.StringValue(value.String())
	} else {
		data.EspHmac = types.StringNull()
	}
	if value := res.Get(prefix + "mode.tunnel-choice"); !data.ModeTunnel.IsNull() {
		if value.Exists() {
			data.ModeTunnel = types.BoolValue(true)
		} else {
			data.ModeTunnel = types.BoolValue(false)
		}
	} else {
		data.ModeTunnel = types.BoolNull()
	}
}

// End of section. //template:end updateFromBody

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBodyXML

func (data *CryptoIPSecTransformSet) updateFromBodyXML(ctx context.Context, res xmldot.Result) {
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/tag"); value.Exists() && !data.Name.IsNull() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/esp"); value.Exists() && !data.Esp.IsNull() {
		data.Esp = types.StringValue(value.String())
	} else {
		data.Esp = types.StringNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/esp-hmac"); value.Exists() && !data.EspHmac.IsNull() {
		data.EspHmac = types.StringValue(value.String())
	} else {
		data.EspHmac = types.StringNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/mode/tunnel-choice"); !data.ModeTunnel.IsNull() {
		if value.Exists() {
			data.ModeTunnel = types.BoolValue(true)
		} else {
			data.ModeTunnel = types.BoolValue(false)
		}
	} else {
		data.ModeTunnel = types.BoolNull()
	}
}

// End of section. //template:end updateFromBodyXML

// Section below is generated&owned by "gen/generator.go". //template:begin fromBody

func (data *CryptoIPSecTransformSet) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "esp"); value.Exists() {
		data.Esp = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "esp-hmac"); value.Exists() {
		data.EspHmac = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "mode.tunnel-choice"); value.Exists() {
		data.ModeTunnel = types.BoolValue(true)
	} else {
		data.ModeTunnel = types.BoolValue(false)
	}
}

// End of section. //template:end fromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyData

func (data *CryptoIPSecTransformSetData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "esp"); value.Exists() {
		data.Esp = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "esp-hmac"); value.Exists() {
		data.EspHmac = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "mode.tunnel-choice"); value.Exists() {
		data.ModeTunnel = types.BoolValue(true)
	} else {
		data.ModeTunnel = types.BoolValue(false)
	}
}

// End of section. //template:end fromBodyData

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyXML

func (data *CryptoIPSecTransformSet) fromBodyXML(ctx context.Context, res xmldot.Result) {
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/esp"); value.Exists() {
		data.Esp = types.StringValue(value.String())
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/esp-hmac"); value.Exists() {
		data.EspHmac = types.StringValue(value.String())
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/mode/tunnel-choice"); value.Exists() {
		data.ModeTunnel = types.BoolValue(true)
	} else {
		data.ModeTunnel = types.BoolValue(false)
	}
}

// End of section. //template:end fromBodyXML

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyDataXML

func (data *CryptoIPSecTransformSetData) fromBodyXML(ctx context.Context, res xmldot.Result) {
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/esp"); value.Exists() {
		data.Esp = types.StringValue(value.String())
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/esp-hmac"); value.Exists() {
		data.EspHmac = types.StringValue(value.String())
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/mode/tunnel-choice"); value.Exists() {
		data.ModeTunnel = types.BoolValue(true)
	} else {
		data.ModeTunnel = types.BoolValue(false)
	}
}

// End of section. //template:end fromBodyDataXML

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletedItems

func (data *CryptoIPSecTransformSet) getDeletedItems(ctx context.Context, state CryptoIPSecTransformSet) []string {
	deletedItems := make([]string, 0)
	if !state.ModeTunnel.IsNull() && data.ModeTunnel.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/mode/tunnel-choice", state.getPath()))
	}
	if !state.EspHmac.IsNull() && data.EspHmac.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/esp-hmac", state.getPath()))
	}
	if !state.Esp.IsNull() && data.Esp.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/esp", state.getPath()))
	}

	return deletedItems
}

// End of section. //template:end getDeletedItems

// Section below is generated&owned by "gen/generator.go". //template:begin addDeletedItemsXML

func (data *CryptoIPSecTransformSet) addDeletedItemsXML(ctx context.Context, state CryptoIPSecTransformSet, body string) string {
	b := netconf.NewBody(body)
	if !state.Esp.IsNull() && data.Esp.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/esp")
	}
	if !state.EspHmac.IsNull() && data.EspHmac.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/esp-hmac")
	}
	if !state.ModeTunnel.IsNull() && data.ModeTunnel.IsNull() {
		b = helpers.RemoveFromXPath(b, state.getXPath()+"/mode/tunnel-choice")
	}

	return b.Res()
}

// End of section. //template:end addDeletedItemsXML

// Section below is generated&owned by "gen/generator.go". //template:begin getEmptyLeafsDelete

func (data *CryptoIPSecTransformSet) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.ModeTunnel.IsNull() && !data.ModeTunnel.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/mode/tunnel-choice", data.getPath()))
	}

	return emptyLeafsDelete
}

// End of section. //template:end getEmptyLeafsDelete

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletePaths

func (data *CryptoIPSecTransformSet) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.ModeTunnel.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/mode/tunnel-choice", data.getPath()))
	}
	if !data.EspHmac.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/esp-hmac", data.getPath()))
	}
	if !data.Esp.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/esp", data.getPath()))
	}

	return deletePaths
}

// End of section. //template:end getDeletePaths

// Section below is generated&owned by "gen/generator.go". //template:begin addDeletePathsXML

func (data *CryptoIPSecTransformSet) addDeletePathsXML(ctx context.Context, body string) string {
	b := netconf.NewBody(body)
	if !data.Esp.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/esp")
	}
	if !data.EspHmac.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/esp-hmac")
	}
	if !data.ModeTunnel.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/mode/tunnel-choice")
	}

	return b.Res()
}

// End of section. //template:end addDeletePathsXML
