// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceIosxeInterfaceSwitchport(t *testing.T) {
	if os.Getenv("C9000V") == "" {
		t.Skip("skipping test, set environment variable C9000V")
	}
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_switchport.test", "mode_access", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_switchport.test", "mode_dot1q_tunnel", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_switchport.test", "mode_private_vlan_trunk", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_switchport.test", "mode_private_vlan_host", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_switchport.test", "mode_private_vlan_promiscuous", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_switchport.test", "mode_trunk", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_switchport.test", "nonegotiate", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_switchport.test", "access_vlan", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_switchport.test", "trunk_allowed_vlans", "100,101"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_switchport.test", "trunk_native_vlan", "100"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_interface_switchport.test", "host", "false"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxeInterfaceSwitchportConfig(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

func testAccDataSourceIosxeInterfaceSwitchportConfig() string {
	config := `resource "iosxe_interface_switchport" "test" {` + "\n"
	config += `	delete_mode = "attributes"` + "\n"
	config += `	type = "GigabitEthernet"` + "\n"
	config += `	name = "1/0/3"` + "\n"
	config += `	mode_access = false` + "\n"
	config += `	mode_dot1q_tunnel = false` + "\n"
	config += `	mode_private_vlan_trunk = false` + "\n"
	config += `	mode_private_vlan_host = false` + "\n"
	config += `	mode_private_vlan_promiscuous = false` + "\n"
	config += `	mode_trunk = true` + "\n"
	config += `	nonegotiate = false` + "\n"
	config += `	access_vlan = "100"` + "\n"
	config += `	trunk_allowed_vlans = "100,101"` + "\n"
	config += `	trunk_native_vlan = 100` + "\n"
	config += `	host = false` + "\n"
	config += `}` + "\n"

	config += `
		data "iosxe_interface_switchport" "test" {
			type = "GigabitEthernet"
			name = "1/0/3"
			depends_on = [iosxe_interface_switchport.test]
		}
	`
	return config
}
