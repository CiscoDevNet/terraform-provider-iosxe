// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"net/url"
	"regexp"
	"strconv"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type BGPNeighbor struct {
	Device                              types.String `tfsdk:"device"`
	Id                                  types.String `tfsdk:"id"`
	DeleteMode                          types.String `tfsdk:"delete_mode"`
	Asn                                 types.String `tfsdk:"asn"`
	Ip                                  types.String `tfsdk:"ip"`
	RemoteAs                            types.String `tfsdk:"remote_as"`
	Description                         types.String `tfsdk:"description"`
	Shutdown                            types.Bool   `tfsdk:"shutdown"`
	ClusterId                           types.String `tfsdk:"cluster_id"`
	Version                             types.Int64  `tfsdk:"version"`
	DisableConnectedCheck               types.Bool   `tfsdk:"disable_connected_check"`
	FallOverDefaultEnable               types.Bool   `tfsdk:"fall_over_default_enable"`
	FallOverDefaultRouteMap             types.String `tfsdk:"fall_over_default_route_map"`
	FallOverBfd                         types.Bool   `tfsdk:"fall_over_bfd"`
	FallOverBfdMultiHop                 types.Bool   `tfsdk:"fall_over_bfd_multi_hop"`
	FallOverBfdSingleHop                types.Bool   `tfsdk:"fall_over_bfd_single_hop"`
	FallOverBfdCheckControlPlaneFailure types.Bool   `tfsdk:"fall_over_bfd_check_control_plane_failure"`
	FallOverBfdStrictMode               types.Bool   `tfsdk:"fall_over_bfd_strict_mode"`
	FallOverMaximumMetricRouteMap       types.String `tfsdk:"fall_over_maximum_metric_route_map"`
	LocalAs                             types.String `tfsdk:"local_as"`
	LocalAsNoPrepend                    types.Bool   `tfsdk:"local_as_no_prepend"`
	LocalAsReplaceAs                    types.Bool   `tfsdk:"local_as_replace_as"`
	LocalAsDualAs                       types.Bool   `tfsdk:"local_as_dual_as"`
	LogNeighborChanges                  types.Bool   `tfsdk:"log_neighbor_changes"`
	PasswordType                        types.Int64  `tfsdk:"password_type"`
	Password                            types.String `tfsdk:"password"`
	TimersKeepaliveInterval             types.Int64  `tfsdk:"timers_keepalive_interval"`
	TimersHoldtime                      types.Int64  `tfsdk:"timers_holdtime"`
	TimersMinimumNeighborHold           types.Int64  `tfsdk:"timers_minimum_neighbor_hold"`
	TtlSecurityHops                     types.Int64  `tfsdk:"ttl_security_hops"`
	UpdateSourceLoopback                types.String `tfsdk:"update_source_loopback"`
	EbgpMultihop                        types.Bool   `tfsdk:"ebgp_multihop"`
	EbgpMultihopMaxHop                  types.Int64  `tfsdk:"ebgp_multihop_max_hop"`
}

type BGPNeighborData struct {
	Device                              types.String `tfsdk:"device"`
	Id                                  types.String `tfsdk:"id"`
	Asn                                 types.String `tfsdk:"asn"`
	Ip                                  types.String `tfsdk:"ip"`
	RemoteAs                            types.String `tfsdk:"remote_as"`
	Description                         types.String `tfsdk:"description"`
	Shutdown                            types.Bool   `tfsdk:"shutdown"`
	ClusterId                           types.String `tfsdk:"cluster_id"`
	Version                             types.Int64  `tfsdk:"version"`
	DisableConnectedCheck               types.Bool   `tfsdk:"disable_connected_check"`
	FallOverDefaultEnable               types.Bool   `tfsdk:"fall_over_default_enable"`
	FallOverDefaultRouteMap             types.String `tfsdk:"fall_over_default_route_map"`
	FallOverBfd                         types.Bool   `tfsdk:"fall_over_bfd"`
	FallOverBfdMultiHop                 types.Bool   `tfsdk:"fall_over_bfd_multi_hop"`
	FallOverBfdSingleHop                types.Bool   `tfsdk:"fall_over_bfd_single_hop"`
	FallOverBfdCheckControlPlaneFailure types.Bool   `tfsdk:"fall_over_bfd_check_control_plane_failure"`
	FallOverBfdStrictMode               types.Bool   `tfsdk:"fall_over_bfd_strict_mode"`
	FallOverMaximumMetricRouteMap       types.String `tfsdk:"fall_over_maximum_metric_route_map"`
	LocalAs                             types.String `tfsdk:"local_as"`
	LocalAsNoPrepend                    types.Bool   `tfsdk:"local_as_no_prepend"`
	LocalAsReplaceAs                    types.Bool   `tfsdk:"local_as_replace_as"`
	LocalAsDualAs                       types.Bool   `tfsdk:"local_as_dual_as"`
	LogNeighborChanges                  types.Bool   `tfsdk:"log_neighbor_changes"`
	PasswordType                        types.Int64  `tfsdk:"password_type"`
	Password                            types.String `tfsdk:"password"`
	TimersKeepaliveInterval             types.Int64  `tfsdk:"timers_keepalive_interval"`
	TimersHoldtime                      types.Int64  `tfsdk:"timers_holdtime"`
	TimersMinimumNeighborHold           types.Int64  `tfsdk:"timers_minimum_neighbor_hold"`
	TtlSecurityHops                     types.Int64  `tfsdk:"ttl_security_hops"`
	UpdateSourceLoopback                types.String `tfsdk:"update_source_loopback"`
	EbgpMultihop                        types.Bool   `tfsdk:"ebgp_multihop"`
	EbgpMultihopMaxHop                  types.Int64  `tfsdk:"ebgp_multihop_max_hop"`
}

func (data BGPNeighbor) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=%v/neighbor=%s", url.QueryEscape(fmt.Sprintf("%v", data.Asn.ValueString())), url.QueryEscape(fmt.Sprintf("%v", data.Ip.ValueString())))
}

func (data BGPNeighborData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/router/Cisco-IOS-XE-bgp:bgp=%v/neighbor=%s", url.QueryEscape(fmt.Sprintf("%v", data.Asn.ValueString())), url.QueryEscape(fmt.Sprintf("%v", data.Ip.ValueString())))
}

// if last path element has a key -> remove it
func (data BGPNeighbor) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data BGPNeighbor) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Ip.IsNull() && !data.Ip.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"id", data.Ip.ValueString())
	}
	if !data.RemoteAs.IsNull() && !data.RemoteAs.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"remote-as", data.RemoteAs.ValueString())
	}
	if !data.Description.IsNull() && !data.Description.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"description", data.Description.ValueString())
	}
	if !data.Shutdown.IsNull() && !data.Shutdown.IsUnknown() {
		if data.Shutdown.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"shutdown", map[string]string{})
		}
	}
	if !data.ClusterId.IsNull() && !data.ClusterId.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"cluster-id", data.ClusterId.ValueString())
	}
	if !data.Version.IsNull() && !data.Version.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"version", strconv.FormatInt(data.Version.ValueInt64(), 10))
	}
	if !data.DisableConnectedCheck.IsNull() && !data.DisableConnectedCheck.IsUnknown() {
		if data.DisableConnectedCheck.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"disable-connected-check", map[string]string{})
		}
	}
	if !data.FallOverDefaultEnable.IsNull() && !data.FallOverDefaultEnable.IsUnknown() {
		if data.FallOverDefaultEnable.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"fall-over.default.enable", map[string]string{})
		}
	}
	if !data.FallOverDefaultRouteMap.IsNull() && !data.FallOverDefaultRouteMap.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"fall-over.default.route-map", data.FallOverDefaultRouteMap.ValueString())
	}
	if !data.FallOverBfd.IsNull() && !data.FallOverBfd.IsUnknown() {
		if data.FallOverBfd.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"fall-over.bfd", map[string]string{})
		}
	}
	if !data.FallOverBfdMultiHop.IsNull() && !data.FallOverBfdMultiHop.IsUnknown() {
		if data.FallOverBfdMultiHop.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"fall-over.bfd.multi-hop", map[string]string{})
		}
	}
	if !data.FallOverBfdSingleHop.IsNull() && !data.FallOverBfdSingleHop.IsUnknown() {
		if data.FallOverBfdSingleHop.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"fall-over.bfd.single-hop", map[string]string{})
		}
	}
	if !data.FallOverBfdCheckControlPlaneFailure.IsNull() && !data.FallOverBfdCheckControlPlaneFailure.IsUnknown() {
		if data.FallOverBfdCheckControlPlaneFailure.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"fall-over.bfd.check-control-plane-failure", map[string]string{})
		}
	}
	if !data.FallOverBfdStrictMode.IsNull() && !data.FallOverBfdStrictMode.IsUnknown() {
		if data.FallOverBfdStrictMode.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"fall-over.bfd.strict-mode", map[string]string{})
		}
	}
	if !data.FallOverMaximumMetricRouteMap.IsNull() && !data.FallOverMaximumMetricRouteMap.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"fall-over.maximum-metric.route-map", data.FallOverMaximumMetricRouteMap.ValueString())
	}
	if !data.LocalAs.IsNull() && !data.LocalAs.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"local-as.as-no", data.LocalAs.ValueString())
	}
	if !data.LocalAsNoPrepend.IsNull() && !data.LocalAsNoPrepend.IsUnknown() {
		if data.LocalAsNoPrepend.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"local-as.no-prepend", map[string]string{})
		}
	}
	if !data.LocalAsReplaceAs.IsNull() && !data.LocalAsReplaceAs.IsUnknown() {
		if data.LocalAsReplaceAs.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"local-as.replace-as", map[string]string{})
		}
	}
	if !data.LocalAsDualAs.IsNull() && !data.LocalAsDualAs.IsUnknown() {
		if data.LocalAsDualAs.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"local-as.dual-as", map[string]string{})
		}
	}
	if !data.LogNeighborChanges.IsNull() && !data.LogNeighborChanges.IsUnknown() {
		if data.LogNeighborChanges.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"log-neighbor-changes", map[string]string{})
		}
	}
	if !data.PasswordType.IsNull() && !data.PasswordType.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"password.enctype", strconv.FormatInt(data.PasswordType.ValueInt64(), 10))
	}
	if !data.Password.IsNull() && !data.Password.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"password.text", data.Password.ValueString())
	}
	if !data.TimersKeepaliveInterval.IsNull() && !data.TimersKeepaliveInterval.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"timers.keepalive-interval", strconv.FormatInt(data.TimersKeepaliveInterval.ValueInt64(), 10))
	}
	if !data.TimersHoldtime.IsNull() && !data.TimersHoldtime.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"timers.holdtime", strconv.FormatInt(data.TimersHoldtime.ValueInt64(), 10))
	}
	if !data.TimersMinimumNeighborHold.IsNull() && !data.TimersMinimumNeighborHold.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"timers.minimum-neighbor-hold", strconv.FormatInt(data.TimersMinimumNeighborHold.ValueInt64(), 10))
	}
	if !data.TtlSecurityHops.IsNull() && !data.TtlSecurityHops.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ttl-security.hops", strconv.FormatInt(data.TtlSecurityHops.ValueInt64(), 10))
	}
	if !data.UpdateSourceLoopback.IsNull() && !data.UpdateSourceLoopback.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"update-source.interface.Loopback", data.UpdateSourceLoopback.ValueString())
	}
	if !data.EbgpMultihop.IsNull() && !data.EbgpMultihop.IsUnknown() {
		if data.EbgpMultihop.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ebgp-multihop", map[string]string{})
		}
	}
	if !data.EbgpMultihopMaxHop.IsNull() && !data.EbgpMultihopMaxHop.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ebgp-multihop.max-hop", strconv.FormatInt(data.EbgpMultihopMaxHop.ValueInt64(), 10))
	}
	return body
}

func (data *BGPNeighbor) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "id"); value.Exists() && !data.Ip.IsNull() {
		data.Ip = types.StringValue(value.String())
	} else {
		data.Ip = types.StringNull()
	}
	if value := res.Get(prefix + "remote-as"); value.Exists() && !data.RemoteAs.IsNull() {
		data.RemoteAs = types.StringValue(value.String())
	} else {
		data.RemoteAs = types.StringNull()
	}
	if value := res.Get(prefix + "description"); value.Exists() && !data.Description.IsNull() {
		data.Description = types.StringValue(value.String())
	} else {
		data.Description = types.StringNull()
	}
	if value := res.Get(prefix + "shutdown"); !data.Shutdown.IsNull() {
		if value.Exists() {
			data.Shutdown = types.BoolValue(true)
		} else {
			data.Shutdown = types.BoolValue(false)
		}
	} else {
		data.Shutdown = types.BoolNull()
	}
	if value := res.Get(prefix + "cluster-id"); value.Exists() && !data.ClusterId.IsNull() {
		data.ClusterId = types.StringValue(value.String())
	} else {
		data.ClusterId = types.StringNull()
	}
	if value := res.Get(prefix + "version"); value.Exists() && !data.Version.IsNull() {
		data.Version = types.Int64Value(value.Int())
	} else {
		data.Version = types.Int64Null()
	}
	if value := res.Get(prefix + "disable-connected-check"); !data.DisableConnectedCheck.IsNull() {
		if value.Exists() {
			data.DisableConnectedCheck = types.BoolValue(true)
		} else {
			data.DisableConnectedCheck = types.BoolValue(false)
		}
	} else {
		data.DisableConnectedCheck = types.BoolNull()
	}
	if value := res.Get(prefix + "fall-over.default.enable"); !data.FallOverDefaultEnable.IsNull() {
		if value.Exists() {
			data.FallOverDefaultEnable = types.BoolValue(true)
		} else {
			data.FallOverDefaultEnable = types.BoolValue(false)
		}
	} else {
		data.FallOverDefaultEnable = types.BoolNull()
	}
	if value := res.Get(prefix + "fall-over.default.route-map"); value.Exists() && !data.FallOverDefaultRouteMap.IsNull() {
		data.FallOverDefaultRouteMap = types.StringValue(value.String())
	} else {
		data.FallOverDefaultRouteMap = types.StringNull()
	}
	if value := res.Get(prefix + "fall-over.bfd"); !data.FallOverBfd.IsNull() {
		if value.Exists() {
			data.FallOverBfd = types.BoolValue(true)
		} else {
			data.FallOverBfd = types.BoolValue(false)
		}
	} else {
		data.FallOverBfd = types.BoolNull()
	}
	if value := res.Get(prefix + "fall-over.bfd.multi-hop"); !data.FallOverBfdMultiHop.IsNull() {
		if value.Exists() {
			data.FallOverBfdMultiHop = types.BoolValue(true)
		} else {
			data.FallOverBfdMultiHop = types.BoolValue(false)
		}
	} else {
		data.FallOverBfdMultiHop = types.BoolNull()
	}
	if value := res.Get(prefix + "fall-over.bfd.single-hop"); !data.FallOverBfdSingleHop.IsNull() {
		if value.Exists() {
			data.FallOverBfdSingleHop = types.BoolValue(true)
		} else {
			data.FallOverBfdSingleHop = types.BoolValue(false)
		}
	} else {
		data.FallOverBfdSingleHop = types.BoolNull()
	}
	if value := res.Get(prefix + "fall-over.bfd.check-control-plane-failure"); !data.FallOverBfdCheckControlPlaneFailure.IsNull() {
		if value.Exists() {
			data.FallOverBfdCheckControlPlaneFailure = types.BoolValue(true)
		} else {
			data.FallOverBfdCheckControlPlaneFailure = types.BoolValue(false)
		}
	} else {
		data.FallOverBfdCheckControlPlaneFailure = types.BoolNull()
	}
	if value := res.Get(prefix + "fall-over.bfd.strict-mode"); !data.FallOverBfdStrictMode.IsNull() {
		if value.Exists() {
			data.FallOverBfdStrictMode = types.BoolValue(true)
		} else {
			data.FallOverBfdStrictMode = types.BoolValue(false)
		}
	} else {
		data.FallOverBfdStrictMode = types.BoolNull()
	}
	if value := res.Get(prefix + "fall-over.maximum-metric.route-map"); value.Exists() && !data.FallOverMaximumMetricRouteMap.IsNull() {
		data.FallOverMaximumMetricRouteMap = types.StringValue(value.String())
	} else {
		data.FallOverMaximumMetricRouteMap = types.StringNull()
	}
	if value := res.Get(prefix + "local-as.as-no"); value.Exists() && !data.LocalAs.IsNull() {
		data.LocalAs = types.StringValue(value.String())
	} else {
		data.LocalAs = types.StringNull()
	}
	if value := res.Get(prefix + "local-as.no-prepend"); !data.LocalAsNoPrepend.IsNull() {
		if value.Exists() {
			data.LocalAsNoPrepend = types.BoolValue(true)
		} else {
			data.LocalAsNoPrepend = types.BoolValue(false)
		}
	} else {
		data.LocalAsNoPrepend = types.BoolNull()
	}
	if value := res.Get(prefix + "local-as.replace-as"); !data.LocalAsReplaceAs.IsNull() {
		if value.Exists() {
			data.LocalAsReplaceAs = types.BoolValue(true)
		} else {
			data.LocalAsReplaceAs = types.BoolValue(false)
		}
	} else {
		data.LocalAsReplaceAs = types.BoolNull()
	}
	if value := res.Get(prefix + "local-as.dual-as"); !data.LocalAsDualAs.IsNull() {
		if value.Exists() {
			data.LocalAsDualAs = types.BoolValue(true)
		} else {
			data.LocalAsDualAs = types.BoolValue(false)
		}
	} else {
		data.LocalAsDualAs = types.BoolNull()
	}
	if value := res.Get(prefix + "log-neighbor-changes"); !data.LogNeighborChanges.IsNull() {
		if value.Exists() {
			data.LogNeighborChanges = types.BoolValue(true)
		} else {
			data.LogNeighborChanges = types.BoolValue(false)
		}
	} else {
		data.LogNeighborChanges = types.BoolNull()
	}
	if value := res.Get(prefix + "password.enctype"); value.Exists() && !data.PasswordType.IsNull() {
		data.PasswordType = types.Int64Value(value.Int())
	} else {
		data.PasswordType = types.Int64Null()
	}
	if value := res.Get(prefix + "password.text"); value.Exists() && !data.Password.IsNull() {
		data.Password = types.StringValue(value.String())
	} else {
		data.Password = types.StringNull()
	}
	if value := res.Get(prefix + "timers.keepalive-interval"); value.Exists() && !data.TimersKeepaliveInterval.IsNull() {
		data.TimersKeepaliveInterval = types.Int64Value(value.Int())
	} else {
		data.TimersKeepaliveInterval = types.Int64Null()
	}
	if value := res.Get(prefix + "timers.holdtime"); value.Exists() && !data.TimersHoldtime.IsNull() {
		data.TimersHoldtime = types.Int64Value(value.Int())
	} else {
		data.TimersHoldtime = types.Int64Null()
	}
	if value := res.Get(prefix + "timers.minimum-neighbor-hold"); value.Exists() && !data.TimersMinimumNeighborHold.IsNull() {
		data.TimersMinimumNeighborHold = types.Int64Value(value.Int())
	} else {
		data.TimersMinimumNeighborHold = types.Int64Null()
	}
	if value := res.Get(prefix + "ttl-security.hops"); value.Exists() && !data.TtlSecurityHops.IsNull() {
		data.TtlSecurityHops = types.Int64Value(value.Int())
	} else {
		data.TtlSecurityHops = types.Int64Null()
	}
	if value := res.Get(prefix + "update-source.interface.Loopback"); value.Exists() && !data.UpdateSourceLoopback.IsNull() {
		data.UpdateSourceLoopback = types.StringValue(value.String())
	} else {
		data.UpdateSourceLoopback = types.StringNull()
	}
	if value := res.Get(prefix + "ebgp-multihop"); !data.EbgpMultihop.IsNull() {
		if value.Exists() {
			data.EbgpMultihop = types.BoolValue(true)
		} else {
			data.EbgpMultihop = types.BoolValue(false)
		}
	} else {
		data.EbgpMultihop = types.BoolNull()
	}
	if value := res.Get(prefix + "ebgp-multihop.max-hop"); value.Exists() && !data.EbgpMultihopMaxHop.IsNull() {
		data.EbgpMultihopMaxHop = types.Int64Value(value.Int())
	} else {
		data.EbgpMultihopMaxHop = types.Int64Null()
	}
}

func (data *BGPNeighborData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "remote-as"); value.Exists() {
		data.RemoteAs = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "description"); value.Exists() {
		data.Description = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "shutdown"); value.Exists() {
		data.Shutdown = types.BoolValue(true)
	} else {
		data.Shutdown = types.BoolValue(false)
	}
	if value := res.Get(prefix + "cluster-id"); value.Exists() {
		data.ClusterId = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "version"); value.Exists() {
		data.Version = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "disable-connected-check"); value.Exists() {
		data.DisableConnectedCheck = types.BoolValue(true)
	} else {
		data.DisableConnectedCheck = types.BoolValue(false)
	}
	if value := res.Get(prefix + "fall-over.default.enable"); value.Exists() {
		data.FallOverDefaultEnable = types.BoolValue(true)
	} else {
		data.FallOverDefaultEnable = types.BoolValue(false)
	}
	if value := res.Get(prefix + "fall-over.default.route-map"); value.Exists() {
		data.FallOverDefaultRouteMap = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "fall-over.bfd"); value.Exists() {
		data.FallOverBfd = types.BoolValue(true)
	} else {
		data.FallOverBfd = types.BoolValue(false)
	}
	if value := res.Get(prefix + "fall-over.bfd.multi-hop"); value.Exists() {
		data.FallOverBfdMultiHop = types.BoolValue(true)
	} else {
		data.FallOverBfdMultiHop = types.BoolValue(false)
	}
	if value := res.Get(prefix + "fall-over.bfd.single-hop"); value.Exists() {
		data.FallOverBfdSingleHop = types.BoolValue(true)
	} else {
		data.FallOverBfdSingleHop = types.BoolValue(false)
	}
	if value := res.Get(prefix + "fall-over.bfd.check-control-plane-failure"); value.Exists() {
		data.FallOverBfdCheckControlPlaneFailure = types.BoolValue(true)
	} else {
		data.FallOverBfdCheckControlPlaneFailure = types.BoolValue(false)
	}
	if value := res.Get(prefix + "fall-over.bfd.strict-mode"); value.Exists() {
		data.FallOverBfdStrictMode = types.BoolValue(true)
	} else {
		data.FallOverBfdStrictMode = types.BoolValue(false)
	}
	if value := res.Get(prefix + "fall-over.maximum-metric.route-map"); value.Exists() {
		data.FallOverMaximumMetricRouteMap = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "local-as.as-no"); value.Exists() {
		data.LocalAs = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "local-as.no-prepend"); value.Exists() {
		data.LocalAsNoPrepend = types.BoolValue(true)
	} else {
		data.LocalAsNoPrepend = types.BoolValue(false)
	}
	if value := res.Get(prefix + "local-as.replace-as"); value.Exists() {
		data.LocalAsReplaceAs = types.BoolValue(true)
	} else {
		data.LocalAsReplaceAs = types.BoolValue(false)
	}
	if value := res.Get(prefix + "local-as.dual-as"); value.Exists() {
		data.LocalAsDualAs = types.BoolValue(true)
	} else {
		data.LocalAsDualAs = types.BoolValue(false)
	}
	if value := res.Get(prefix + "log-neighbor-changes"); value.Exists() {
		data.LogNeighborChanges = types.BoolValue(true)
	} else {
		data.LogNeighborChanges = types.BoolValue(false)
	}
	if value := res.Get(prefix + "password.enctype"); value.Exists() {
		data.PasswordType = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "password.text"); value.Exists() {
		data.Password = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "timers.keepalive-interval"); value.Exists() {
		data.TimersKeepaliveInterval = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "timers.holdtime"); value.Exists() {
		data.TimersHoldtime = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "timers.minimum-neighbor-hold"); value.Exists() {
		data.TimersMinimumNeighborHold = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "ttl-security.hops"); value.Exists() {
		data.TtlSecurityHops = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "update-source.interface.Loopback"); value.Exists() {
		data.UpdateSourceLoopback = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "ebgp-multihop"); value.Exists() {
		data.EbgpMultihop = types.BoolValue(true)
	} else {
		data.EbgpMultihop = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ebgp-multihop.max-hop"); value.Exists() {
		data.EbgpMultihopMaxHop = types.Int64Value(value.Int())
	}
}

func (data *BGPNeighbor) getDeletedItems(ctx context.Context, state BGPNeighbor) []string {
	deletedItems := make([]string, 0)
	if !state.Description.IsNull() && data.Description.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/description", state.getPath()))
	}
	if !state.Shutdown.IsNull() && data.Shutdown.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/shutdown", state.getPath()))
	}
	if !state.ClusterId.IsNull() && data.ClusterId.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/cluster-id", state.getPath()))
	}
	if !state.Version.IsNull() && data.Version.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/version", state.getPath()))
	}
	if !state.DisableConnectedCheck.IsNull() && data.DisableConnectedCheck.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/disable-connected-check", state.getPath()))
	}
	if !state.FallOverDefaultEnable.IsNull() && data.FallOverDefaultEnable.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fall-over/default/enable", state.getPath()))
	}
	if !state.FallOverDefaultRouteMap.IsNull() && data.FallOverDefaultRouteMap.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fall-over/default/route-map", state.getPath()))
	}
	if !state.FallOverBfd.IsNull() && data.FallOverBfd.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fall-over/bfd", state.getPath()))
	}
	if !state.FallOverBfdMultiHop.IsNull() && data.FallOverBfdMultiHop.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fall-over/bfd/multi-hop", state.getPath()))
	}
	if !state.FallOverBfdSingleHop.IsNull() && data.FallOverBfdSingleHop.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fall-over/bfd/single-hop", state.getPath()))
	}
	if !state.FallOverBfdCheckControlPlaneFailure.IsNull() && data.FallOverBfdCheckControlPlaneFailure.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fall-over/bfd/check-control-plane-failure", state.getPath()))
	}
	if !state.FallOverBfdStrictMode.IsNull() && data.FallOverBfdStrictMode.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fall-over/bfd/strict-mode", state.getPath()))
	}
	if !state.FallOverMaximumMetricRouteMap.IsNull() && data.FallOverMaximumMetricRouteMap.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/fall-over/maximum-metric/route-map", state.getPath()))
	}
	if !state.LocalAs.IsNull() && data.LocalAs.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/local-as/as-no", state.getPath()))
	}
	if !state.LocalAsNoPrepend.IsNull() && data.LocalAsNoPrepend.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/local-as/no-prepend", state.getPath()))
	}
	if !state.LocalAsReplaceAs.IsNull() && data.LocalAsReplaceAs.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/local-as/replace-as", state.getPath()))
	}
	if !state.LocalAsDualAs.IsNull() && data.LocalAsDualAs.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/local-as/dual-as", state.getPath()))
	}
	if !state.LogNeighborChanges.IsNull() && data.LogNeighborChanges.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/log-neighbor-changes", state.getPath()))
	}
	if !state.PasswordType.IsNull() && data.PasswordType.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/password", state.getPath()))
	}
	if !state.Password.IsNull() && data.Password.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/password", state.getPath()))
	}
	if !state.TimersKeepaliveInterval.IsNull() && data.TimersKeepaliveInterval.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/timers", state.getPath()))
	}
	if !state.TimersHoldtime.IsNull() && data.TimersHoldtime.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/timers", state.getPath()))
	}
	if !state.TimersMinimumNeighborHold.IsNull() && data.TimersMinimumNeighborHold.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/timers", state.getPath()))
	}
	if !state.TtlSecurityHops.IsNull() && data.TtlSecurityHops.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ttl-security/hops", state.getPath()))
	}
	if !state.UpdateSourceLoopback.IsNull() && data.UpdateSourceLoopback.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/update-source/interface/Loopback", state.getPath()))
	}
	if !state.EbgpMultihop.IsNull() && data.EbgpMultihop.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ebgp-multihop", state.getPath()))
	}
	if !state.EbgpMultihopMaxHop.IsNull() && data.EbgpMultihopMaxHop.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ebgp-multihop/max-hop", state.getPath()))
	}
	return deletedItems
}

func (data *BGPNeighbor) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.Shutdown.IsNull() && !data.Shutdown.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/shutdown", data.getPath()))
	}
	if !data.DisableConnectedCheck.IsNull() && !data.DisableConnectedCheck.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/disable-connected-check", data.getPath()))
	}
	if !data.FallOverDefaultEnable.IsNull() && !data.FallOverDefaultEnable.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fall-over/default/enable", data.getPath()))
	}
	if !data.FallOverBfd.IsNull() && !data.FallOverBfd.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fall-over/bfd", data.getPath()))
	}
	if !data.FallOverBfdMultiHop.IsNull() && !data.FallOverBfdMultiHop.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fall-over/bfd/multi-hop", data.getPath()))
	}
	if !data.FallOverBfdSingleHop.IsNull() && !data.FallOverBfdSingleHop.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fall-over/bfd/single-hop", data.getPath()))
	}
	if !data.FallOverBfdCheckControlPlaneFailure.IsNull() && !data.FallOverBfdCheckControlPlaneFailure.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fall-over/bfd/check-control-plane-failure", data.getPath()))
	}
	if !data.FallOverBfdStrictMode.IsNull() && !data.FallOverBfdStrictMode.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/fall-over/bfd/strict-mode", data.getPath()))
	}
	if !data.LocalAsNoPrepend.IsNull() && !data.LocalAsNoPrepend.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/local-as/no-prepend", data.getPath()))
	}
	if !data.LocalAsReplaceAs.IsNull() && !data.LocalAsReplaceAs.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/local-as/replace-as", data.getPath()))
	}
	if !data.LocalAsDualAs.IsNull() && !data.LocalAsDualAs.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/local-as/dual-as", data.getPath()))
	}
	if !data.LogNeighborChanges.IsNull() && !data.LogNeighborChanges.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/log-neighbor-changes", data.getPath()))
	}
	if !data.EbgpMultihop.IsNull() && !data.EbgpMultihop.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ebgp-multihop", data.getPath()))
	}
	return emptyLeafsDelete
}

func (data *BGPNeighbor) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.Description.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/description", data.getPath()))
	}
	if !data.Shutdown.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/shutdown", data.getPath()))
	}
	if !data.ClusterId.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/cluster-id", data.getPath()))
	}
	if !data.Version.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/version", data.getPath()))
	}
	if !data.DisableConnectedCheck.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/disable-connected-check", data.getPath()))
	}
	if !data.FallOverDefaultEnable.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fall-over/default/enable", data.getPath()))
	}
	if !data.FallOverDefaultRouteMap.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fall-over/default/route-map", data.getPath()))
	}
	if !data.FallOverBfd.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fall-over/bfd", data.getPath()))
	}
	if !data.FallOverBfdMultiHop.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fall-over/bfd/multi-hop", data.getPath()))
	}
	if !data.FallOverBfdSingleHop.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fall-over/bfd/single-hop", data.getPath()))
	}
	if !data.FallOverBfdCheckControlPlaneFailure.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fall-over/bfd/check-control-plane-failure", data.getPath()))
	}
	if !data.FallOverBfdStrictMode.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fall-over/bfd/strict-mode", data.getPath()))
	}
	if !data.FallOverMaximumMetricRouteMap.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/fall-over/maximum-metric/route-map", data.getPath()))
	}
	if !data.LocalAs.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/local-as/as-no", data.getPath()))
	}
	if !data.LocalAsNoPrepend.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/local-as/no-prepend", data.getPath()))
	}
	if !data.LocalAsReplaceAs.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/local-as/replace-as", data.getPath()))
	}
	if !data.LocalAsDualAs.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/local-as/dual-as", data.getPath()))
	}
	if !data.LogNeighborChanges.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/log-neighbor-changes", data.getPath()))
	}
	if !data.PasswordType.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/password", data.getPath()))
	}
	if !data.Password.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/password", data.getPath()))
	}
	if !data.TimersKeepaliveInterval.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/timers", data.getPath()))
	}
	if !data.TimersHoldtime.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/timers", data.getPath()))
	}
	if !data.TimersMinimumNeighborHold.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/timers", data.getPath()))
	}
	if !data.TtlSecurityHops.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ttl-security/hops", data.getPath()))
	}
	if !data.UpdateSourceLoopback.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/update-source/interface/Loopback", data.getPath()))
	}
	if !data.EbgpMultihop.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ebgp-multihop", data.getPath()))
	}
	if !data.EbgpMultihopMaxHop.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ebgp-multihop/max-hop", data.getPath()))
	}
	return deletePaths
}
