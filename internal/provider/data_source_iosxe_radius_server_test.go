// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccDataSourceIosxeRadiusServer(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_radius_server.test", "attributes.0.number", "31"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_radius_server.test", "attributes.0.attribute_31_parameters.0.calling_station_id", "mac"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_radius_server.test", "attributes.0.attribute_31_parameters.0.id_mac_format", "ietf"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_radius_server.test", "attributes.0.attribute_31_parameters.0.id_mac_lu_case", "lower-case"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_radius_server.test", "dead_criteria_time", "5"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_radius_server.test", "dead_criteria_tries", "3"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_radius_server.test", "deadtime", "3"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxeRadiusServerConfig(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

func testAccDataSourceIosxeRadiusServerConfig() string {
	config := `resource "iosxe_radius_server" "test" {` + "\n"
	config += `	attributes = [{` + "\n"
	config += `		number = "31"` + "\n"
	config += `		attribute_31_parameters = [{` + "\n"
	config += `			calling_station_id = "mac"` + "\n"
	config += `			id_mac_format = "ietf"` + "\n"
	config += `			id_mac_lu_case = "lower-case"` + "\n"
	config += `		}]` + "\n"
	config += `	}]` + "\n"
	config += `	dead_criteria_time = 5` + "\n"
	config += `	dead_criteria_tries = 3` + "\n"
	config += `	deadtime = 3` + "\n"
	config += `}` + "\n"

	config += `
		data "iosxe_radius_server" "test" {
			depends_on = [iosxe_radius_server.test]
		}
	`
	return config
}
