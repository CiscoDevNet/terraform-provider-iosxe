// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin types
type EVPNEthernetSegment struct {
	Device                 types.String                         `tfsdk:"device"`
	Id                     types.String                         `tfsdk:"id"`
	DeleteMode             types.String                         `tfsdk:"delete_mode"`
	EsValue                types.Int64                          `tfsdk:"es_value"`
	DfElectionWaitTime     types.Int64                          `tfsdk:"df_election_wait_time"`
	RedundancyAllActive    types.Bool                           `tfsdk:"redundancy_all_active"`
	RedundancySingleActive types.Bool                           `tfsdk:"redundancy_single_active"`
	IdentifierTypes        []EVPNEthernetSegmentIdentifierTypes `tfsdk:"identifier_types"`
}

type EVPNEthernetSegmentData struct {
	Device                 types.String                         `tfsdk:"device"`
	Id                     types.String                         `tfsdk:"id"`
	EsValue                types.Int64                          `tfsdk:"es_value"`
	DfElectionWaitTime     types.Int64                          `tfsdk:"df_election_wait_time"`
	RedundancyAllActive    types.Bool                           `tfsdk:"redundancy_all_active"`
	RedundancySingleActive types.Bool                           `tfsdk:"redundancy_single_active"`
	IdentifierTypes        []EVPNEthernetSegmentIdentifierTypes `tfsdk:"identifier_types"`
}
type EVPNEthernetSegmentIdentifierTypes struct {
	Type      types.Int64  `tfsdk:"type"`
	HexString types.String `tfsdk:"hex_string"`
	SystemMac types.String `tfsdk:"system_mac"`
}

// End of section. //template:end types

// Section below is generated&owned by "gen/generator.go". //template:begin getPath

func (data EVPNEthernetSegment) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/l2vpn/Cisco-IOS-XE-l2vpn:evpn_cont/evpn-ethernet-segment/evpn/ethernet-segment=%v", url.QueryEscape(fmt.Sprintf("%v", data.EsValue.ValueInt64())))
}

func (data EVPNEthernetSegmentData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/l2vpn/Cisco-IOS-XE-l2vpn:evpn_cont/evpn-ethernet-segment/evpn/ethernet-segment=%v", url.QueryEscape(fmt.Sprintf("%v", data.EsValue.ValueInt64())))
}

// if last path element has a key -> remove it
func (data EVPNEthernetSegment) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

// End of section. //template:end getPath

// Section below is generated&owned by "gen/generator.go". //template:begin toBody

func (data EVPNEthernetSegment) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.EsValue.IsNull() && !data.EsValue.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"es-value", strconv.FormatInt(data.EsValue.ValueInt64(), 10))
	}
	if !data.DfElectionWaitTime.IsNull() && !data.DfElectionWaitTime.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"df-election.wait-time", strconv.FormatInt(data.DfElectionWaitTime.ValueInt64(), 10))
	}
	if !data.RedundancyAllActive.IsNull() && !data.RedundancyAllActive.IsUnknown() {
		if data.RedundancyAllActive.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"redundancy.all-active", map[string]string{})
		}
	}
	if !data.RedundancySingleActive.IsNull() && !data.RedundancySingleActive.IsUnknown() {
		if data.RedundancySingleActive.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"redundancy.single-active", map[string]string{})
		}
	}
	if len(data.IdentifierTypes) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"identifier.type", []interface{}{})
		for index, item := range data.IdentifierTypes {
			if !item.Type.IsNull() && !item.Type.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"identifier.type"+"."+strconv.Itoa(index)+"."+"identifier-type", strconv.FormatInt(item.Type.ValueInt64(), 10))
			}
			if !item.HexString.IsNull() && !item.HexString.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"identifier.type"+"."+strconv.Itoa(index)+"."+"hex-string", item.HexString.ValueString())
			}
			if !item.SystemMac.IsNull() && !item.SystemMac.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"identifier.type"+"."+strconv.Itoa(index)+"."+"system-mac", item.SystemMac.ValueString())
			}
		}
	}
	return body
}

// End of section. //template:end toBody

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBody

func (data *EVPNEthernetSegment) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "es-value"); value.Exists() && !data.EsValue.IsNull() {
		data.EsValue = types.Int64Value(value.Int())
	} else {
		data.EsValue = types.Int64Null()
	}
	if value := res.Get(prefix + "df-election.wait-time"); value.Exists() && !data.DfElectionWaitTime.IsNull() {
		data.DfElectionWaitTime = types.Int64Value(value.Int())
	} else {
		data.DfElectionWaitTime = types.Int64Null()
	}
	if value := res.Get(prefix + "redundancy.all-active"); !data.RedundancyAllActive.IsNull() {
		if value.Exists() {
			data.RedundancyAllActive = types.BoolValue(true)
		} else {
			data.RedundancyAllActive = types.BoolValue(false)
		}
	} else {
		data.RedundancyAllActive = types.BoolNull()
	}
	if value := res.Get(prefix + "redundancy.single-active"); !data.RedundancySingleActive.IsNull() {
		if value.Exists() {
			data.RedundancySingleActive = types.BoolValue(true)
		} else {
			data.RedundancySingleActive = types.BoolValue(false)
		}
	} else {
		data.RedundancySingleActive = types.BoolNull()
	}
	for i := range data.IdentifierTypes {
		keys := [...]string{"identifier-type"}
		keyValues := [...]string{strconv.FormatInt(data.IdentifierTypes[i].Type.ValueInt64(), 10)}

		var r gjson.Result
		res.Get(prefix + "identifier.type").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("identifier-type"); value.Exists() && !data.IdentifierTypes[i].Type.IsNull() {
			data.IdentifierTypes[i].Type = types.Int64Value(value.Int())
		} else {
			data.IdentifierTypes[i].Type = types.Int64Null()
		}
		if value := r.Get("hex-string"); value.Exists() && !data.IdentifierTypes[i].HexString.IsNull() {
			data.IdentifierTypes[i].HexString = types.StringValue(value.String())
		} else {
			data.IdentifierTypes[i].HexString = types.StringNull()
		}
		if value := r.Get("system-mac"); value.Exists() && !data.IdentifierTypes[i].SystemMac.IsNull() {
			data.IdentifierTypes[i].SystemMac = types.StringValue(value.String())
		} else {
			data.IdentifierTypes[i].SystemMac = types.StringNull()
		}
	}
}

// End of section. //template:end updateFromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBody

func (data *EVPNEthernetSegment) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "df-election.wait-time"); value.Exists() {
		data.DfElectionWaitTime = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "redundancy.all-active"); value.Exists() {
		data.RedundancyAllActive = types.BoolValue(true)
	} else {
		data.RedundancyAllActive = types.BoolValue(false)
	}
	if value := res.Get(prefix + "redundancy.single-active"); value.Exists() {
		data.RedundancySingleActive = types.BoolValue(true)
	} else {
		data.RedundancySingleActive = types.BoolValue(false)
	}
	if value := res.Get(prefix + "identifier.type"); value.Exists() {
		data.IdentifierTypes = make([]EVPNEthernetSegmentIdentifierTypes, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNEthernetSegmentIdentifierTypes{}
			if cValue := v.Get("identifier-type"); cValue.Exists() {
				item.Type = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("hex-string"); cValue.Exists() {
				item.HexString = types.StringValue(cValue.String())
			}
			if cValue := v.Get("system-mac"); cValue.Exists() {
				item.SystemMac = types.StringValue(cValue.String())
			}
			data.IdentifierTypes = append(data.IdentifierTypes, item)
			return true
		})
	}
}

// End of section. //template:end fromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyData

func (data *EVPNEthernetSegmentData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "df-election.wait-time"); value.Exists() {
		data.DfElectionWaitTime = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "redundancy.all-active"); value.Exists() {
		data.RedundancyAllActive = types.BoolValue(true)
	} else {
		data.RedundancyAllActive = types.BoolValue(false)
	}
	if value := res.Get(prefix + "redundancy.single-active"); value.Exists() {
		data.RedundancySingleActive = types.BoolValue(true)
	} else {
		data.RedundancySingleActive = types.BoolValue(false)
	}
	if value := res.Get(prefix + "identifier.type"); value.Exists() {
		data.IdentifierTypes = make([]EVPNEthernetSegmentIdentifierTypes, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := EVPNEthernetSegmentIdentifierTypes{}
			if cValue := v.Get("identifier-type"); cValue.Exists() {
				item.Type = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("hex-string"); cValue.Exists() {
				item.HexString = types.StringValue(cValue.String())
			}
			if cValue := v.Get("system-mac"); cValue.Exists() {
				item.SystemMac = types.StringValue(cValue.String())
			}
			data.IdentifierTypes = append(data.IdentifierTypes, item)
			return true
		})
	}
}

// End of section. //template:end fromBodyData

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletedItems

func (data *EVPNEthernetSegment) getDeletedItems(ctx context.Context, state EVPNEthernetSegment) []string {
	deletedItems := make([]string, 0)
	for i := range state.IdentifierTypes {
		stateKeyValues := [...]string{strconv.FormatInt(state.IdentifierTypes[i].Type.ValueInt64(), 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.IdentifierTypes[i].Type.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.IdentifierTypes {
			found = true
			if state.IdentifierTypes[i].Type.ValueInt64() != data.IdentifierTypes[j].Type.ValueInt64() {
				found = false
			}
			if found {
				if !state.IdentifierTypes[i].SystemMac.IsNull() && data.IdentifierTypes[j].SystemMac.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/identifier/type=%v/system-mac", state.getPath(), strings.Join(stateKeyValues[:], ",")))
				}
				if !state.IdentifierTypes[i].HexString.IsNull() && data.IdentifierTypes[j].HexString.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/identifier/type=%v/hex-string", state.getPath(), strings.Join(stateKeyValues[:], ",")))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/identifier/type=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	if !state.RedundancySingleActive.IsNull() && data.RedundancySingleActive.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/redundancy/single-active", state.getPath()))
	}
	if !state.RedundancyAllActive.IsNull() && data.RedundancyAllActive.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/redundancy/all-active", state.getPath()))
	}
	if !state.DfElectionWaitTime.IsNull() && data.DfElectionWaitTime.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/df-election/wait-time", state.getPath()))
	}

	return deletedItems
}

// End of section. //template:end getDeletedItems

// Section below is generated&owned by "gen/generator.go". //template:begin getEmptyLeafsDelete

func (data *EVPNEthernetSegment) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	if !data.RedundancySingleActive.IsNull() && !data.RedundancySingleActive.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/redundancy/single-active", data.getPath()))
	}
	if !data.RedundancyAllActive.IsNull() && !data.RedundancyAllActive.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/redundancy/all-active", data.getPath()))
	}

	return emptyLeafsDelete
}

// End of section. //template:end getEmptyLeafsDelete

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletePaths

func (data *EVPNEthernetSegment) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	for i := range data.IdentifierTypes {
		keyValues := [...]string{strconv.FormatInt(data.IdentifierTypes[i].Type.ValueInt64(), 10)}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/identifier/type=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	if !data.RedundancySingleActive.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/redundancy/single-active", data.getPath()))
	}
	if !data.RedundancyAllActive.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/redundancy/all-active", data.getPath()))
	}
	if !data.DfElectionWaitTime.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/df-election/wait-time", data.getPath()))
	}

	return deletePaths
}

// End of section. //template:end getDeletePaths
