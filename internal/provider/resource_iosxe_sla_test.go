// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin testAcc

func TestAccIosxeSLA(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_sla.test", "entries.0.number", "20"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_sla.test", "entries.0.icmp_echo_destination", "192.168.10.10"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_sla.test", "entries.0.icmp_echo_source_ip", "192.168.1.1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_sla.test", "schedules.0.entry_number", "20"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_sla.test", "schedules.0.life", "4000"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_sla.test", "schedules.0.start_time_now", "true"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccIosxeSLAConfig_minimum(),
			},
			{
				Config: testAccIosxeSLAConfig_all(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
			{
				ResourceName:            "iosxe_sla.test",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateIdFunc:       iosxeSLAImportStateIdFunc("iosxe_sla.test"),
				ImportStateVerifyIgnore: []string{},
				Check:                   resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

// End of section. //template:end testAcc

// Section below is generated&owned by "gen/generator.go". //template:begin importStateIdFunc

func iosxeSLAImportStateIdFunc(resourceName string) resource.ImportStateIdFunc {
	return func(s *terraform.State) (string, error) {

		return fmt.Sprintf(""), nil
	}
}

// End of section. //template:end importStateIdFunc

// Section below is generated&owned by "gen/generator.go". //template:begin testPrerequisites
// End of section. //template:end testPrerequisites

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigMinimal

func testAccIosxeSLAConfig_minimum() string {
	config := `resource "iosxe_sla" "test" {` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigMinimal

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigAll

func testAccIosxeSLAConfig_all() string {
	config := `resource "iosxe_sla" "test" {` + "\n"
	config += `	entries = [{` + "\n"
	config += `		number = 20` + "\n"
	config += `		icmp_echo_destination = "192.168.10.10"` + "\n"
	config += `		icmp_echo_source_ip = "192.168.1.1"` + "\n"
	config += `	}]` + "\n"
	config += `	schedules = [{` + "\n"
	config += `		entry_number = 20` + "\n"
	config += `		life = 4000` + "\n"
	config += `		start_time_now = true` + "\n"
	config += `	}]` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigAll
