// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"net/url"
	"regexp"
	"strconv"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type InterfaceOSPFv3 struct {
	Device              types.String `tfsdk:"device"`
	Id                  types.String `tfsdk:"id"`
	DeleteMode          types.String `tfsdk:"delete_mode"`
	Type                types.String `tfsdk:"type"`
	Name                types.String `tfsdk:"name"`
	NetworkPointToPoint types.Bool   `tfsdk:"network_point_to_point"`
	Cost                types.Int64  `tfsdk:"cost"`
}

type InterfaceOSPFv3Data struct {
	Device              types.String `tfsdk:"device"`
	Id                  types.String `tfsdk:"id"`
	Type                types.String `tfsdk:"type"`
	Name                types.String `tfsdk:"name"`
	NetworkPointToPoint types.Bool   `tfsdk:"network_point_to_point"`
	Cost                types.Int64  `tfsdk:"cost"`
}

func (data InterfaceOSPFv3) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/interface/%s=%v/Cisco-IOS-XE-ospfv3:ospfv3", url.QueryEscape(fmt.Sprintf("%v", data.Type.ValueString())), url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
}

func (data InterfaceOSPFv3Data) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/interface/%s=%v/Cisco-IOS-XE-ospfv3:ospfv3", url.QueryEscape(fmt.Sprintf("%v", data.Type.ValueString())), url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
}

// if last path element has a key -> remove it
func (data InterfaceOSPFv3) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data InterfaceOSPFv3) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.NetworkPointToPoint.IsNull() && !data.NetworkPointToPoint.IsUnknown() {
		if data.NetworkPointToPoint.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"network.point-to-point", map[string]string{})
		}
	}
	if !data.Cost.IsNull() && !data.Cost.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"cost-config.value", strconv.FormatInt(data.Cost.ValueInt64(), 10))
	}
	return body
}

func (data *InterfaceOSPFv3) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "network.point-to-point"); !data.NetworkPointToPoint.IsNull() {
		if value.Exists() {
			data.NetworkPointToPoint = types.BoolValue(true)
		} else {
			data.NetworkPointToPoint = types.BoolValue(false)
		}
	} else {
		data.NetworkPointToPoint = types.BoolNull()
	}
	if value := res.Get(prefix + "cost-config.value"); value.Exists() && !data.Cost.IsNull() {
		data.Cost = types.Int64Value(value.Int())
	} else {
		data.Cost = types.Int64Null()
	}
}

func (data *InterfaceOSPFv3Data) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "network.point-to-point"); value.Exists() {
		data.NetworkPointToPoint = types.BoolValue(true)
	} else {
		data.NetworkPointToPoint = types.BoolValue(false)
	}
	if value := res.Get(prefix + "cost-config.value"); value.Exists() {
		data.Cost = types.Int64Value(value.Int())
	}
}

func (data *InterfaceOSPFv3) getDeletedListItems(ctx context.Context, state InterfaceOSPFv3) []string {
	deletedListItems := make([]string, 0)
	return deletedListItems
}

func (data *InterfaceOSPFv3) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.NetworkPointToPoint.IsNull() && !data.NetworkPointToPoint.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/network/point-to-point", data.getPath()))
	}
	return emptyLeafsDelete
}

func (data *InterfaceOSPFv3) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.NetworkPointToPoint.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/network/point-to-point", data.getPath()))
	}
	if !data.Cost.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/cost-config/value", data.getPath()))
	}
	return deletePaths
}
