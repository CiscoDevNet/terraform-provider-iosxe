// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"regexp"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type CTS struct {
	Device            types.String `tfsdk:"device"`
	Id                types.String `tfsdk:"id"`
	DeleteMode        types.String `tfsdk:"delete_mode"`
	AuthorizationList types.String `tfsdk:"authorization_list"`
}

type CTSData struct {
	Device            types.String `tfsdk:"device"`
	Id                types.String `tfsdk:"id"`
	AuthorizationList types.String `tfsdk:"authorization_list"`
}

func (data CTS) getPath() string {
	return "Cisco-IOS-XE-native:native/cts"
}

func (data CTSData) getPath() string {
	return "Cisco-IOS-XE-native:native/cts"
}

// if last path element has a key -> remove it
func (data CTS) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data CTS) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.AuthorizationList.IsNull() && !data.AuthorizationList.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-cts:authorization.list", data.AuthorizationList.ValueString())
	}
	return body
}

func (data *CTS) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-cts:authorization.list"); value.Exists() && !data.AuthorizationList.IsNull() {
		data.AuthorizationList = types.StringValue(value.String())
	} else {
		data.AuthorizationList = types.StringNull()
	}
}

func (data *CTSData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-cts:authorization.list"); value.Exists() {
		data.AuthorizationList = types.StringValue(value.String())
	}
}

func (data *CTS) getDeletedItems(ctx context.Context, state CTS) []string {
	deletedItems := make([]string, 0)
	if !state.AuthorizationList.IsNull() && data.AuthorizationList.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XE-cts:authorization/list", state.getPath()))
	}
	return deletedItems
}

func (data *CTS) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	return emptyLeafsDelete
}

func (data *CTS) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.AuthorizationList.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-cts:authorization/list", data.getPath()))
	}
	return deletePaths
}
