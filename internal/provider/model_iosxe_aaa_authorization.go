// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type AAAAuthorization struct {
	Device     types.String              `tfsdk:"device"`
	Id         types.String              `tfsdk:"id"`
	DeleteMode types.String              `tfsdk:"delete_mode"`
	Exec       []AAAAuthorizationExec    `tfsdk:"exec"`
	Network    []AAAAuthorizationNetwork `tfsdk:"network"`
}

type AAAAuthorizationData struct {
	Device  types.String              `tfsdk:"device"`
	Id      types.String              `tfsdk:"id"`
	Exec    []AAAAuthorizationExec    `tfsdk:"exec"`
	Network []AAAAuthorizationNetwork `tfsdk:"network"`
}
type AAAAuthorizationExec struct {
	Name              types.String `tfsdk:"name"`
	A1Local           types.Bool   `tfsdk:"a1_local"`
	A1IfAuthenticated types.Bool   `tfsdk:"a1_if_authenticated"`
}
type AAAAuthorizationNetwork struct {
	Id             types.String `tfsdk:"id"`
	NetworkA1Group types.String `tfsdk:"network_a1_group"`
}

func (data AAAAuthorization) getPath() string {
	return "Cisco-IOS-XE-native:native/aaa/Cisco-IOS-XE-aaa:authorization"
}

func (data AAAAuthorizationData) getPath() string {
	return "Cisco-IOS-XE-native:native/aaa/Cisco-IOS-XE-aaa:authorization"
}

// if last path element has a key -> remove it
func (data AAAAuthorization) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data AAAAuthorization) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if len(data.Exec) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"exec", []interface{}{})
		for index, item := range data.Exec {
			if !item.Name.IsNull() && !item.Name.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"exec"+"."+strconv.Itoa(index)+"."+"name", item.Name.ValueString())
			}
			if !item.A1Local.IsNull() && !item.A1Local.IsUnknown() {
				if item.A1Local.ValueBool() {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"exec"+"."+strconv.Itoa(index)+"."+"a1.local", map[string]string{})
				}
			}
			if !item.A1IfAuthenticated.IsNull() && !item.A1IfAuthenticated.IsUnknown() {
				if item.A1IfAuthenticated.ValueBool() {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"exec"+"."+strconv.Itoa(index)+"."+"a1.if-authenticated", map[string]string{})
				}
			}
		}
	}
	if len(data.Network) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"network", []interface{}{})
		for index, item := range data.Network {
			if !item.Id.IsNull() && !item.Id.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"network"+"."+strconv.Itoa(index)+"."+"id", item.Id.ValueString())
			}
			if !item.NetworkA1Group.IsNull() && !item.NetworkA1Group.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"network"+"."+strconv.Itoa(index)+"."+"network.a1.group", item.NetworkA1Group.ValueString())
			}
		}
	}
	return body
}

func (data *AAAAuthorization) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	for i := range data.Exec {
		keys := [...]string{"name"}
		keyValues := [...]string{data.Exec[i].Name.ValueString()}

		var r gjson.Result
		res.Get(prefix + "exec").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("name"); value.Exists() && !data.Exec[i].Name.IsNull() {
			data.Exec[i].Name = types.StringValue(value.String())
		} else {
			data.Exec[i].Name = types.StringNull()
		}
		if value := r.Get("a1.local"); !data.Exec[i].A1Local.IsNull() {
			if value.Exists() {
				data.Exec[i].A1Local = types.BoolValue(true)
			} else {
				data.Exec[i].A1Local = types.BoolValue(false)
			}
		} else {
			data.Exec[i].A1Local = types.BoolNull()
		}
		if value := r.Get("a1.if-authenticated"); !data.Exec[i].A1IfAuthenticated.IsNull() {
			if value.Exists() {
				data.Exec[i].A1IfAuthenticated = types.BoolValue(true)
			} else {
				data.Exec[i].A1IfAuthenticated = types.BoolValue(false)
			}
		} else {
			data.Exec[i].A1IfAuthenticated = types.BoolNull()
		}
	}
	for i := range data.Network {
		keys := [...]string{"id"}
		keyValues := [...]string{data.Network[i].Id.ValueString()}

		var r gjson.Result
		res.Get(prefix + "network").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("id"); value.Exists() && !data.Network[i].Id.IsNull() {
			data.Network[i].Id = types.StringValue(value.String())
		} else {
			data.Network[i].Id = types.StringNull()
		}
		if value := r.Get("network.a1.group"); value.Exists() && !data.Network[i].NetworkA1Group.IsNull() {
			data.Network[i].NetworkA1Group = types.StringValue(value.String())
		} else {
			data.Network[i].NetworkA1Group = types.StringNull()
		}
	}
}

func (data *AAAAuthorizationData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "exec"); value.Exists() {
		data.Exec = make([]AAAAuthorizationExec, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := AAAAuthorizationExec{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			if cValue := v.Get("a1.local"); cValue.Exists() {
				item.A1Local = types.BoolValue(true)
			} else {
				item.A1Local = types.BoolValue(false)
			}
			if cValue := v.Get("a1.if-authenticated"); cValue.Exists() {
				item.A1IfAuthenticated = types.BoolValue(true)
			} else {
				item.A1IfAuthenticated = types.BoolValue(false)
			}
			data.Exec = append(data.Exec, item)
			return true
		})
	}
	if value := res.Get(prefix + "network"); value.Exists() {
		data.Network = make([]AAAAuthorizationNetwork, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := AAAAuthorizationNetwork{}
			if cValue := v.Get("id"); cValue.Exists() {
				item.Id = types.StringValue(cValue.String())
			}
			if cValue := v.Get("network.a1.group"); cValue.Exists() {
				item.NetworkA1Group = types.StringValue(cValue.String())
			}
			data.Network = append(data.Network, item)
			return true
		})
	}
}

func (data *AAAAuthorization) getDeletedListItems(ctx context.Context, state AAAAuthorization) []string {
	deletedListItems := make([]string, 0)
	for i := range state.Exec {
		stateKeyValues := [...]string{state.Exec[i].Name.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Exec[i].Name.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Exec {
			found = true
			if state.Exec[i].Name.ValueString() != data.Exec[j].Name.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/exec=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	for i := range state.Network {
		stateKeyValues := [...]string{state.Network[i].Id.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Network[i].Id.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Network {
			found = true
			if state.Network[i].Id.ValueString() != data.Network[j].Id.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/network=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *AAAAuthorization) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	for i := range data.Exec {
		keyValues := [...]string{data.Exec[i].Name.ValueString()}
		if !data.Exec[i].A1Local.IsNull() && !data.Exec[i].A1Local.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/exec=%v/a1/local", data.getPath(), strings.Join(keyValues[:], ",")))
		}
		if !data.Exec[i].A1IfAuthenticated.IsNull() && !data.Exec[i].A1IfAuthenticated.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/exec=%v/a1/if-authenticated", data.getPath(), strings.Join(keyValues[:], ",")))
		}
	}

	return emptyLeafsDelete
}

func (data *AAAAuthorization) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	for i := range data.Exec {
		keyValues := [...]string{data.Exec[i].Name.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/exec=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	for i := range data.Network {
		keyValues := [...]string{data.Network[i].Id.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/network=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	return deletePaths
}
