// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin testAccDataSource

func TestAccDataSourceIosxeSpanningTree(t *testing.T) {
	if os.Getenv("C9000V") == "" {
		t.Skip("skipping test, set environment variable C9000V")
	}
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_spanning_tree.test", "mode", "mst"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_spanning_tree.test", "logging", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_spanning_tree.test", "loopguard_default", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_spanning_tree.test", "portfast_default", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_spanning_tree.test", "portfast_bpduguard_default", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_spanning_tree.test", "extend_system_id", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_spanning_tree.test", "mst_instances.0.id", "1"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_spanning_tree.test", "mst_instances.0.vlan_ids.0", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_spanning_tree.test", "vlans.0.id", "10"))
	checks = append(checks, resource.TestCheckResourceAttr("data.iosxe_spanning_tree.test", "vlans.0.priority", "32768"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccDataSourceIosxeSpanningTreeConfig(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

// End of section. //template:end testAccDataSource

// Section below is generated&owned by "gen/generator.go". //template:begin testPrerequisites
// End of section. //template:end testPrerequisites

// Section below is generated&owned by "gen/generator.go". //template:begin testAccDataSourceConfig

func testAccDataSourceIosxeSpanningTreeConfig() string {
	config := `resource "iosxe_spanning_tree" "test" {` + "\n"
	config += `	mode = "mst"` + "\n"
	config += `	logging = true` + "\n"
	config += `	loopguard_default = true` + "\n"
	config += `	portfast_default = true` + "\n"
	config += `	portfast_bpduguard_default = true` + "\n"
	config += `	extend_system_id = true` + "\n"
	config += `	mst_instances = [{` + "\n"
	config += `		id = 1` + "\n"
	config += `		vlan_ids = [10]` + "\n"
	config += `	}]` + "\n"
	config += `	vlans = [{` + "\n"
	config += `		id = "10"` + "\n"
	config += `		priority = 32768` + "\n"
	config += `	}]` + "\n"
	config += `}` + "\n"

	config += `
		data "iosxe_spanning_tree" "test" {
			depends_on = [iosxe_spanning_tree.test]
		}
	`
	return config
}

// End of section. //template:end testAccDataSourceConfig
