// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-netconf"
	"github.com/netascode/go-restconf"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin model

// Ensure provider defined types fully satisfy framework interfaces
var (
	_ resource.Resource                = &BFDTemplateSingleHopResource{}
	_ resource.ResourceWithImportState = &BFDTemplateSingleHopResource{}
)

func NewBFDTemplateSingleHopResource() resource.Resource {
	return &BFDTemplateSingleHopResource{}
}

type BFDTemplateSingleHopResource struct {
	data *IosxeProviderData
}

func (r *BFDTemplateSingleHopResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_bfd_template_single_hop"
}

func (r *BFDTemplateSingleHopResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This resource can manage the BFD Template Single Hop configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the object.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("").String,
				Required:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"authentication_md5_keychain": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("keychain name").String,
				Optional:            true,
			},
			"authentication_meticulous_md5_keychain": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("keychain name").String,
				Optional:            true,
			},
			"authentication_meticulous_sha_1_keychain": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("keychain name").String,
				Optional:            true,
			},
			"authentication_sha_1_keychain": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("keychain name").String,
				Optional:            true,
			},
			"interval_milliseconds_min_tx": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Minimum transmit interval capability").AddIntegerRangeDescription(4, 9999).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(4, 9999),
				},
			},
			"interval_milliseconds_min_rx": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Minimum receive interval capability").AddIntegerRangeDescription(4, 9999).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(4, 9999),
				},
			},
			"interval_milliseconds_both": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Minimum transmit and receive interval capability").AddIntegerRangeDescription(4, 9999).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(4, 9999),
				},
			},
			"interval_milliseconds_multiplier": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Multiplier value used to compute holddown").AddIntegerRangeDescription(3, 50).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(3, 50),
				},
			},
			"interval_microseconds_min_rx": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Minimum receive interval capability").AddIntegerRangeDescription(3300, 9999000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(3300, 9999000),
				},
			},
			"interval_microseconds_min_tx": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Minimum transmit interval capability").AddIntegerRangeDescription(3300, 9999000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(3300, 9999000),
				},
			},
			"echo": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use echo adjunct as bfd detection mechanism").String,
				Optional:            true,
			},
			"dampening_half_time": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Half-life time for the penalty").AddIntegerRangeDescription(1, 30).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 30),
				},
			},
			"dampening_unsuppress_time": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Value to unsuppress a session").AddIntegerRangeDescription(1, 18000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 18000),
				},
			},
			"dampening_suppress_time": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Value to start suppressing a session").AddIntegerRangeDescription(1, 18000).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 18000),
				},
			},
			"dampening_max_suppressing_time": schema.Int64Attribute{
				MarkdownDescription: helpers.NewAttributeDescription("Maximum duration to suppress a session").AddIntegerRangeDescription(1, 420).String,
				Optional:            true,
				Validators: []validator.Int64{
					int64validator.Between(1, 420),
				},
			},
		},
	}
}

func (r *BFDTemplateSingleHopResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.data = req.ProviderData.(*IosxeProviderData)
}

// End of section. //template:end model

// Section below is generated&owned by "gen/generator.go". //template:begin create

func (r *BFDTemplateSingleHopResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan BFDTemplateSingleHop

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Create", plan.getPath()))

	device, ok := r.data.Devices[plan.Device.ValueString()]
	if !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", plan.Device.ValueString()))
		return
	}

	// Ensure NETCONF connection is closed after operation completes
	if device.Protocol == "netconf" && device.NetconfClient != nil {
		if device.NetconfClient.IsClosed() {
			if err := device.NetconfClient.Reopen(); err != nil {
				resp.Diagnostics.AddError("Connection Error", fmt.Sprintf("Failed to reopen NETCONF connection: %s", err))
				return
			}
		}
		defer func() {
			if err := device.NetconfClient.Close(); err != nil {
				tflog.Warn(ctx, fmt.Sprintf("Failed to close NETCONF connection: %s", err))
			}
		}()
	}

	if device.Managed {
		if device.Protocol == "restconf" {
			// Create object
			body := plan.toBody(ctx)

			emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
			tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

			if YangPatch {
				edits := []restconf.YangPatchEdit{restconf.NewYangPatchEdit("merge", plan.getPath(), restconf.Body{Str: body})}
				for _, i := range emptyLeafsDelete {
					edits = append(edits, restconf.NewYangPatchEdit("remove", i, restconf.Body{}))
				}
				_, err := device.RestconfClient.YangPatchData("", "1", "", edits)
				if err != nil {
					resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to configure object, got error: %s", err))
					return
				}
			} else {
				res, err := device.RestconfClient.PatchData(plan.getPathShort(), body)
				if len(res.Errors.Error) > 0 && res.Errors.Error[0].ErrorMessage == "patch to a nonexistent resource" {
					_, err = device.RestconfClient.PutData(plan.getPath(), body)
				}
				if err != nil {
					resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to configure object (PATCH, %s), got error: %s", plan.getPathShort(), err))
					return
				}
				for _, i := range emptyLeafsDelete {
					res, err := device.RestconfClient.DeleteData(i)
					if err != nil && res.StatusCode != 404 {
						resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object (%s), got error: %s", i, err))
						return
					}
				}
			}
		} else {
			// NETCONF
			body := plan.toBodyXML(ctx)

			if err := helpers.EditConfig(ctx, device.NetconfClient, body, true); err != nil {
				resp.Diagnostics.AddError("Client Error", err.Error())
				return
			}
		}
	}

	plan.Id = types.StringValue(plan.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Create finished successfully", plan.getPath()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)

	helpers.SetFlagImporting(ctx, false, resp.Private, &resp.Diagnostics)
}

// End of section. //template:end create

// Section below is generated&owned by "gen/generator.go". //template:begin read

func (r *BFDTemplateSingleHopResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state BFDTemplateSingleHop

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", state.Id.ValueString()))

	device, ok := r.data.Devices[state.Device.ValueString()]
	if !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", state.Device.ValueString()))
		return
	}

	// Ensure NETCONF connection is closed after operation completes
	if device.Protocol == "netconf" && device.NetconfClient != nil {
		if device.NetconfClient.IsClosed() {
			if err := device.NetconfClient.Reopen(); err != nil {
				resp.Diagnostics.AddError("Connection Error", fmt.Sprintf("Failed to reopen NETCONF connection: %s", err))
				return
			}
		}
		defer func() {
			if err := device.NetconfClient.Close(); err != nil {
				tflog.Warn(ctx, fmt.Sprintf("Failed to close NETCONF connection: %s", err))
			}
		}()
	}

	if device.Managed {
		imp, diags := helpers.IsFlagImporting(ctx, req)
		if resp.Diagnostics.Append(diags...); resp.Diagnostics.HasError() {
			return
		}

		if device.Protocol == "restconf" {
			res, err := device.RestconfClient.GetData(state.Id.ValueString())
			if res.StatusCode == 404 {
				state = BFDTemplateSingleHop{Device: state.Device, Id: state.Id}
			} else {
				if err != nil {
					resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object (%s), got error: %s", state.Id.ValueString(), err))
					return
				}

				// After `terraform import` we switch to a full read.
				if imp {
					state.fromBody(ctx, res.Res)
				} else {
					state.updateFromBody(ctx, res.Res)
				}
			}
		} else {
			// NETCONF
			filter := helpers.GetXpathFilter(state.getXPath())
			res, err := device.NetconfClient.GetConfig(ctx, "running", filter)
			if err != nil {
				resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object (%s), got error: %s", state.getPath(), err))
				return
			}

			// After `terraform import` we switch to a full read.
			if imp {
				state.fromBodyXML(ctx, res.Res)
			} else {
				state.updateFromBodyXML(ctx, res.Res)
			}
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", state.Id.ValueString()))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)

	helpers.SetFlagImporting(ctx, false, resp.Private, &resp.Diagnostics)
}

// End of section. //template:end read

// Section below is generated&owned by "gen/generator.go". //template:begin update

func (r *BFDTemplateSingleHopResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state BFDTemplateSingleHop

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read state
	diags = req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Update", plan.Id.ValueString()))

	device, ok := r.data.Devices[plan.Device.ValueString()]
	if !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", plan.Device.ValueString()))
		return
	}

	// Ensure NETCONF connection is closed after operation completes
	if device.Protocol == "netconf" && device.NetconfClient != nil {
		if device.NetconfClient.IsClosed() {
			if err := device.NetconfClient.Reopen(); err != nil {
				resp.Diagnostics.AddError("Connection Error", fmt.Sprintf("Failed to reopen NETCONF connection: %s", err))
				return
			}
		}
		defer func() {
			if err := device.NetconfClient.Close(); err != nil {
				tflog.Warn(ctx, fmt.Sprintf("Failed to close NETCONF connection: %s", err))
			}
		}()
	}

	if device.Managed {
		if device.Protocol == "restconf" {
			body := plan.toBody(ctx)

			deletedItems := plan.getDeletedItems(ctx, state)
			tflog.Debug(ctx, fmt.Sprintf("Removed items to delete: %+v", deletedItems))

			emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
			tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

			if YangPatch {
				var edits []restconf.YangPatchEdit
				for _, i := range deletedItems {
					edits = append(edits, restconf.NewYangPatchEdit("remove", i, restconf.Body{}))
				}
				edits = append(edits, restconf.NewYangPatchEdit("merge", plan.getPath(), restconf.Body{Str: body}))
				for _, i := range emptyLeafsDelete {
					edits = append(edits, restconf.NewYangPatchEdit("remove", i, restconf.Body{}))
				}
				_, err := device.RestconfClient.YangPatchData("", "1", "", edits)
				if err != nil {
					resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to update object, got error: %s", err))
					return
				}
			} else {
				for _, i := range deletedItems {
					res, err := device.RestconfClient.DeleteData(i)
					if err != nil && res.StatusCode != 404 {
						resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object (%s), got error: %s", i, err))
						return
					}
				}
				res, err := device.RestconfClient.PatchData(plan.getPathShort(), body)
				if len(res.Errors.Error) > 0 && res.Errors.Error[0].ErrorMessage == "patch to a nonexistent resource" {
					_, err = device.RestconfClient.PutData(plan.getPath(), body)
				}
				if err != nil {
					resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to configure object (PATCH, %s), got error: %s", plan.getPathShort(), err))
					return
				}
				for _, i := range emptyLeafsDelete {
					res, err := device.RestconfClient.DeleteData(i)
					if err != nil && res.StatusCode != 404 {
						resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object (%s), got error: %s", i, err))
						return
					}
				}
			}
		} else {
			// NETCONF
			body := plan.toBodyXML(ctx)
			body = plan.addDeletedItemsXML(ctx, state, body)

			if err := helpers.EditConfig(ctx, device.NetconfClient, body, true); err != nil {
				resp.Diagnostics.AddError("Client Error", err.Error())
				return
			}
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Update finished successfully", plan.Id.ValueString()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

// End of section. //template:end update

// Section below is generated&owned by "gen/generator.go". //template:begin delete

func (r *BFDTemplateSingleHopResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state BFDTemplateSingleHop

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Delete", state.Id.ValueString()))

	device, ok := r.data.Devices[state.Device.ValueString()]
	if !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", state.Device.ValueString()))
		return
	}

	// Ensure NETCONF connection is closed after operation completes
	if device.Protocol == "netconf" && device.NetconfClient != nil {
		if device.NetconfClient.IsClosed() {
			if err := device.NetconfClient.Reopen(); err != nil {
				resp.Diagnostics.AddError("Connection Error", fmt.Sprintf("Failed to reopen NETCONF connection: %s", err))
				return
			}
		}
		defer func() {
			if err := device.NetconfClient.Close(); err != nil {
				tflog.Warn(ctx, fmt.Sprintf("Failed to close NETCONF connection: %s", err))
			}
		}()
	}

	if device.Managed {
		deleteMode := "all"

		if deleteMode == "all" {
			if device.Protocol == "restconf" {
				res, err := device.RestconfClient.DeleteData(state.Id.ValueString())
				if err != nil && res.StatusCode != 404 && res.StatusCode != 400 {
					resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object (%s), got error: %s", state.Id.ValueString(), err))
					return
				}
			} else {
				// NETCONF
				body := netconf.Body{}
				body = helpers.RemoveFromXPath(body, state.getXPath())

				if err := helpers.EditConfig(ctx, device.NetconfClient, body.Res(), true); err != nil {
					resp.Diagnostics.AddError("Client Error", err.Error())
					return
				}
			}
		} else {
			if device.Protocol == "restconf" {
				deletePaths := state.getDeletePaths(ctx)
				tflog.Debug(ctx, fmt.Sprintf("Paths to delete: %+v", deletePaths))

				if YangPatch {
					edits := []restconf.YangPatchEdit{}
					for _, i := range deletePaths {
						edits = append(edits, restconf.NewYangPatchEdit("remove", i, restconf.Body{}))
					}
					_, err := device.RestconfClient.YangPatchData("", "1", "", edits)
					if err != nil {
						resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object, got error: %s", err))
						return
					}
				} else {
					for _, i := range deletePaths {
						res, err := device.RestconfClient.DeleteData(i)
						if err != nil && res.StatusCode != 404 {
							resp.Diagnostics.AddWarning("Client Warning", fmt.Sprintf("Failed to delete object (%s), got error: %s", i, err))
						}
					}
				}
			} else {
				// NETCONF
				body := state.addDeletePathsXML(ctx, "")

				if err := helpers.EditConfig(ctx, device.NetconfClient, body, true); err != nil {
					resp.Diagnostics.AddError("Client Error", err.Error())
					return
				}
			}
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Delete finished successfully", state.Id.ValueString()))

	resp.State.RemoveResource(ctx)
}

// End of section. //template:end delete

// Section below is generated&owned by "gen/generator.go". //template:begin import

func (r *BFDTemplateSingleHopResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	idParts := strings.Split(req.ID, ",")
	idParts = helpers.RemoveEmptyStrings(idParts)

	if len(idParts) != 1 && len(idParts) != 2 {
		expectedIdentifier := "Expected import identifier with format: '<name>'"
		expectedIdentifier += " or '<name>,<device>'"
		resp.Diagnostics.AddError(
			"Unexpected Import Identifier",
			fmt.Sprintf("%s. Got: %q", expectedIdentifier, req.ID),
		)
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), idParts[0])...)
	if len(idParts) == 2 {
		resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("device"), idParts[len(idParts)-1])...)
	}

	// construct path for 'id' attribute
	var state BFDTemplateSingleHop
	diags := resp.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("id"), state.getPath())...)

	helpers.SetFlagImporting(ctx, true, resp.Private, &resp.Diagnostics)
}

// End of section. //template:end import
