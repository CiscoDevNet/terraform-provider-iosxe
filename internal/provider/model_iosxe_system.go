// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type System struct {
	Device                                      types.String                                        `tfsdk:"device"`
	Id                                          types.String                                        `tfsdk:"id"`
	Hostname                                    types.String                                        `tfsdk:"hostname"`
	IpBgpCommunityNewFormat                     types.Bool                                          `tfsdk:"ip_bgp_community_new_format"`
	IpRouting                                   types.Bool                                          `tfsdk:"ip_routing"`
	Ipv6UnicastRouting                          types.Bool                                          `tfsdk:"ipv6_unicast_routing"`
	Mtu                                         types.Int64                                         `tfsdk:"mtu"`
	IpSourceRoute                               types.Bool                                          `tfsdk:"ip_source_route"`
	IpDomainLookup                              types.Bool                                          `tfsdk:"ip_domain_lookup"`
	IpDomainName                                types.String                                        `tfsdk:"ip_domain_name"`
	LoginDelay                                  types.Int64                                         `tfsdk:"login_delay"`
	LoginOnFailure                              types.Bool                                          `tfsdk:"login_on_failure"`
	LoginOnFailureLog                           types.Bool                                          `tfsdk:"login_on_failure_log"`
	LoginOnSuccess                              types.Bool                                          `tfsdk:"login_on_success"`
	LoginOnSuccessLog                           types.Bool                                          `tfsdk:"login_on_success_log"`
	IpMulticastRouting                          types.Bool                                          `tfsdk:"ip_multicast_routing"`
	MulticastRoutingSwitch                      types.Bool                                          `tfsdk:"multicast_routing_switch"`
	IpMulticastRoutingDistributed               types.Bool                                          `tfsdk:"ip_multicast_routing_distributed"`
	MulticastRoutingVrfs                        []SystemMulticastRoutingVrfs                        `tfsdk:"multicast_routing_vrfs"`
	IpHttpAccessClass                           types.Int64                                         `tfsdk:"ip_http_access_class"`
	IpHttpAuthenticationAaa                     types.Bool                                          `tfsdk:"ip_http_authentication_aaa"`
	IpHttpAuthenticationAaaExecAuthorization    types.String                                        `tfsdk:"ip_http_authentication_aaa_exec_authorization"`
	IpHttpAuthenticationAaaLoginAuthentication  types.String                                        `tfsdk:"ip_http_authentication_aaa_login_authentication"`
	IpHttpAuthenticationAaaCommandAuthorization []SystemIpHttpAuthenticationAaaCommandAuthorization `tfsdk:"ip_http_authentication_aaa_command_authorization"`
	IpHttpAuthenticationLocal                   types.Bool                                          `tfsdk:"ip_http_authentication_local"`
	IpHttpServer                                types.Bool                                          `tfsdk:"ip_http_server"`
	IpHttpSecureServer                          types.Bool                                          `tfsdk:"ip_http_secure_server"`
	IpHttpSecureTrustpoint                      types.String                                        `tfsdk:"ip_http_secure_trustpoint"`
	IpHttpTlsVersion                            types.String                                        `tfsdk:"ip_http_tls_version"`
	IpHttpClientSecureTrustpoint                types.String                                        `tfsdk:"ip_http_client_secure_trustpoint"`
	IpHttpClientSourceInterface                 types.String                                        `tfsdk:"ip_http_client_source_interface"`
}

type SystemData struct {
	Device                                      types.String                                        `tfsdk:"device"`
	Id                                          types.String                                        `tfsdk:"id"`
	Hostname                                    types.String                                        `tfsdk:"hostname"`
	IpBgpCommunityNewFormat                     types.Bool                                          `tfsdk:"ip_bgp_community_new_format"`
	IpRouting                                   types.Bool                                          `tfsdk:"ip_routing"`
	Ipv6UnicastRouting                          types.Bool                                          `tfsdk:"ipv6_unicast_routing"`
	Mtu                                         types.Int64                                         `tfsdk:"mtu"`
	IpSourceRoute                               types.Bool                                          `tfsdk:"ip_source_route"`
	IpDomainLookup                              types.Bool                                          `tfsdk:"ip_domain_lookup"`
	IpDomainName                                types.String                                        `tfsdk:"ip_domain_name"`
	LoginDelay                                  types.Int64                                         `tfsdk:"login_delay"`
	LoginOnFailure                              types.Bool                                          `tfsdk:"login_on_failure"`
	LoginOnFailureLog                           types.Bool                                          `tfsdk:"login_on_failure_log"`
	LoginOnSuccess                              types.Bool                                          `tfsdk:"login_on_success"`
	LoginOnSuccessLog                           types.Bool                                          `tfsdk:"login_on_success_log"`
	IpMulticastRouting                          types.Bool                                          `tfsdk:"ip_multicast_routing"`
	MulticastRoutingSwitch                      types.Bool                                          `tfsdk:"multicast_routing_switch"`
	IpMulticastRoutingDistributed               types.Bool                                          `tfsdk:"ip_multicast_routing_distributed"`
	MulticastRoutingVrfs                        []SystemMulticastRoutingVrfs                        `tfsdk:"multicast_routing_vrfs"`
	IpHttpAccessClass                           types.Int64                                         `tfsdk:"ip_http_access_class"`
	IpHttpAuthenticationAaa                     types.Bool                                          `tfsdk:"ip_http_authentication_aaa"`
	IpHttpAuthenticationAaaExecAuthorization    types.String                                        `tfsdk:"ip_http_authentication_aaa_exec_authorization"`
	IpHttpAuthenticationAaaLoginAuthentication  types.String                                        `tfsdk:"ip_http_authentication_aaa_login_authentication"`
	IpHttpAuthenticationAaaCommandAuthorization []SystemIpHttpAuthenticationAaaCommandAuthorization `tfsdk:"ip_http_authentication_aaa_command_authorization"`
	IpHttpAuthenticationLocal                   types.Bool                                          `tfsdk:"ip_http_authentication_local"`
	IpHttpServer                                types.Bool                                          `tfsdk:"ip_http_server"`
	IpHttpSecureServer                          types.Bool                                          `tfsdk:"ip_http_secure_server"`
	IpHttpSecureTrustpoint                      types.String                                        `tfsdk:"ip_http_secure_trustpoint"`
	IpHttpTlsVersion                            types.String                                        `tfsdk:"ip_http_tls_version"`
	IpHttpClientSecureTrustpoint                types.String                                        `tfsdk:"ip_http_client_secure_trustpoint"`
	IpHttpClientSourceInterface                 types.String                                        `tfsdk:"ip_http_client_source_interface"`
}
type SystemMulticastRoutingVrfs struct {
	Vrf         types.String `tfsdk:"vrf"`
	Distributed types.Bool   `tfsdk:"distributed"`
}
type SystemIpHttpAuthenticationAaaCommandAuthorization struct {
	Level types.Int64  `tfsdk:"level"`
	Name  types.String `tfsdk:"name"`
}

func (data System) getPath() string {
	return "Cisco-IOS-XE-native:native"
}

func (data SystemData) getPath() string {
	return "Cisco-IOS-XE-native:native"
}

// if last path element has a key -> remove it
func (data System) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data System) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Hostname.IsNull() && !data.Hostname.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"hostname", data.Hostname.ValueString())
	}
	if !data.IpBgpCommunityNewFormat.IsNull() && !data.IpBgpCommunityNewFormat.IsUnknown() {
		if data.IpBgpCommunityNewFormat.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.bgp-community.new-format", map[string]string{})
		}
	}
	if !data.IpRouting.IsNull() && !data.IpRouting.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.routing-conf.routing", data.IpRouting.ValueBool())
	}
	if !data.Ipv6UnicastRouting.IsNull() && !data.Ipv6UnicastRouting.IsUnknown() {
		if data.Ipv6UnicastRouting.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ipv6.unicast-routing", map[string]string{})
		}
	}
	if !data.Mtu.IsNull() && !data.Mtu.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"system.Cisco-IOS-XE-switch:mtu.size", strconv.FormatInt(data.Mtu.ValueInt64(), 10))
	}
	if !data.IpSourceRoute.IsNull() && !data.IpSourceRoute.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.source-route", data.IpSourceRoute.ValueBool())
	}
	if !data.IpDomainLookup.IsNull() && !data.IpDomainLookup.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.domain.lookup", data.IpDomainLookup.ValueBool())
	}
	if !data.IpDomainName.IsNull() && !data.IpDomainName.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.domain.name", data.IpDomainName.ValueString())
	}
	if !data.LoginDelay.IsNull() && !data.LoginDelay.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"login.delay", strconv.FormatInt(data.LoginDelay.ValueInt64(), 10))
	}
	if !data.LoginOnFailure.IsNull() && !data.LoginOnFailure.IsUnknown() {
		if data.LoginOnFailure.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"login.on-failure", map[string]string{})
		}
	}
	if !data.LoginOnFailureLog.IsNull() && !data.LoginOnFailureLog.IsUnknown() {
		if data.LoginOnFailureLog.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"login.on-failure.log", map[string]string{})
		}
	}
	if !data.LoginOnSuccess.IsNull() && !data.LoginOnSuccess.IsUnknown() {
		if data.LoginOnSuccess.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"login.on-success", map[string]string{})
		}
	}
	if !data.LoginOnSuccessLog.IsNull() && !data.LoginOnSuccessLog.IsUnknown() {
		if data.LoginOnSuccessLog.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"login.on-success.log", map[string]string{})
		}
	}
	if !data.IpMulticastRouting.IsNull() && !data.IpMulticastRouting.IsUnknown() {
		if data.IpMulticastRouting.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-multicast:multicast-routing", map[string]string{})
		}
	}
	if !data.MulticastRoutingSwitch.IsNull() && !data.MulticastRoutingSwitch.IsUnknown() {
		if data.MulticastRoutingSwitch.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-multicast:mcr-conf.multicast-routing", map[string]string{})
		}
	}
	if !data.IpMulticastRoutingDistributed.IsNull() && !data.IpMulticastRoutingDistributed.IsUnknown() {
		if data.IpMulticastRoutingDistributed.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-multicast:multicast-routing.distributed", map[string]string{})
		}
	}
	if !data.IpHttpAccessClass.IsNull() && !data.IpHttpAccessClass.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-http:http.access-class", strconv.FormatInt(data.IpHttpAccessClass.ValueInt64(), 10))
	}
	if !data.IpHttpAuthenticationAaa.IsNull() && !data.IpHttpAuthenticationAaa.IsUnknown() {
		if data.IpHttpAuthenticationAaa.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-http:http.authentication.aaa", map[string]string{})
		}
	}
	if !data.IpHttpAuthenticationAaaExecAuthorization.IsNull() && !data.IpHttpAuthenticationAaaExecAuthorization.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-http:http.authentication.aaa.exec-authorization", data.IpHttpAuthenticationAaaExecAuthorization.ValueString())
	}
	if !data.IpHttpAuthenticationAaaLoginAuthentication.IsNull() && !data.IpHttpAuthenticationAaaLoginAuthentication.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-http:http.authentication.aaa.login-authentication", data.IpHttpAuthenticationAaaLoginAuthentication.ValueString())
	}
	if !data.IpHttpAuthenticationLocal.IsNull() && !data.IpHttpAuthenticationLocal.IsUnknown() {
		if data.IpHttpAuthenticationLocal.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-http:http.authentication.local", map[string]string{})
		}
	}
	if !data.IpHttpServer.IsNull() && !data.IpHttpServer.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-http:http.server", data.IpHttpServer.ValueBool())
	}
	if !data.IpHttpSecureServer.IsNull() && !data.IpHttpSecureServer.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-http:http.secure-server", data.IpHttpSecureServer.ValueBool())
	}
	if !data.IpHttpSecureTrustpoint.IsNull() && !data.IpHttpSecureTrustpoint.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-http:http.secure-trustpoint", data.IpHttpSecureTrustpoint.ValueString())
	}
	if !data.IpHttpTlsVersion.IsNull() && !data.IpHttpTlsVersion.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-http:http.tls-version", data.IpHttpTlsVersion.ValueString())
	}
	if !data.IpHttpClientSecureTrustpoint.IsNull() && !data.IpHttpClientSecureTrustpoint.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-http:http.client.secure-trustpoint", data.IpHttpClientSecureTrustpoint.ValueString())
	}
	if !data.IpHttpClientSourceInterface.IsNull() && !data.IpHttpClientSourceInterface.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-http:http.client.source-interface", data.IpHttpClientSourceInterface.ValueString())
	}
	if len(data.MulticastRoutingVrfs) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-multicast:multicast-routing.vrf", []interface{}{})
		for index, item := range data.MulticastRoutingVrfs {
			if !item.Vrf.IsNull() && !item.Vrf.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-multicast:multicast-routing.vrf"+"."+strconv.Itoa(index)+"."+"name", item.Vrf.ValueString())
			}
			if !item.Distributed.IsNull() && !item.Distributed.IsUnknown() {
				if item.Distributed.ValueBool() {
					body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-multicast:multicast-routing.vrf"+"."+strconv.Itoa(index)+"."+"distributed", map[string]string{})
				}
			}
		}
	}
	if len(data.IpHttpAuthenticationAaaCommandAuthorization) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-http:http.authentication.aaa.command-authorization", []interface{}{})
		for index, item := range data.IpHttpAuthenticationAaaCommandAuthorization {
			if !item.Level.IsNull() && !item.Level.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-http:http.authentication.aaa.command-authorization"+"."+strconv.Itoa(index)+"."+"level", strconv.FormatInt(item.Level.ValueInt64(), 10))
			}
			if !item.Name.IsNull() && !item.Name.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"ip.Cisco-IOS-XE-http:http.authentication.aaa.command-authorization"+"."+strconv.Itoa(index)+"."+"name", item.Name.ValueString())
			}
		}
	}
	return body
}

func (data *System) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "hostname"); value.Exists() && !data.Hostname.IsNull() {
		data.Hostname = types.StringValue(value.String())
	} else {
		data.Hostname = types.StringNull()
	}
	if value := res.Get(prefix + "ip.bgp-community.new-format"); !data.IpBgpCommunityNewFormat.IsNull() {
		if value.Exists() {
			data.IpBgpCommunityNewFormat = types.BoolValue(true)
		} else {
			data.IpBgpCommunityNewFormat = types.BoolValue(false)
		}
	} else {
		data.IpBgpCommunityNewFormat = types.BoolNull()
	}
	if value := res.Get(prefix + "ip.routing-conf.routing"); !data.IpRouting.IsNull() {
		if value.Exists() {
			data.IpRouting = types.BoolValue(value.Bool())
		}
	} else {
		data.IpRouting = types.BoolNull()
	}
	if value := res.Get(prefix + "ipv6.unicast-routing"); !data.Ipv6UnicastRouting.IsNull() {
		if value.Exists() {
			data.Ipv6UnicastRouting = types.BoolValue(true)
		} else {
			data.Ipv6UnicastRouting = types.BoolValue(false)
		}
	} else {
		data.Ipv6UnicastRouting = types.BoolNull()
	}
	if value := res.Get(prefix + "system.Cisco-IOS-XE-switch:mtu.size"); value.Exists() && !data.Mtu.IsNull() {
		data.Mtu = types.Int64Value(value.Int())
	} else {
		data.Mtu = types.Int64Null()
	}
	if value := res.Get(prefix + "ip.source-route"); !data.IpSourceRoute.IsNull() {
		if value.Exists() {
			data.IpSourceRoute = types.BoolValue(value.Bool())
		}
	} else {
		data.IpSourceRoute = types.BoolNull()
	}
	if value := res.Get(prefix + "ip.domain.lookup"); !data.IpDomainLookup.IsNull() {
		if value.Exists() {
			data.IpDomainLookup = types.BoolValue(value.Bool())
		}
	} else {
		data.IpDomainLookup = types.BoolNull()
	}
	if value := res.Get(prefix + "ip.domain.name"); value.Exists() && !data.IpDomainName.IsNull() {
		data.IpDomainName = types.StringValue(value.String())
	} else {
		data.IpDomainName = types.StringNull()
	}
	if value := res.Get(prefix + "login.delay"); value.Exists() && !data.LoginDelay.IsNull() {
		data.LoginDelay = types.Int64Value(value.Int())
	} else {
		data.LoginDelay = types.Int64Null()
	}
	if value := res.Get(prefix + "login.on-failure"); !data.LoginOnFailure.IsNull() {
		if value.Exists() {
			data.LoginOnFailure = types.BoolValue(true)
		} else {
			data.LoginOnFailure = types.BoolValue(false)
		}
	} else {
		data.LoginOnFailure = types.BoolNull()
	}
	if value := res.Get(prefix + "login.on-failure.log"); !data.LoginOnFailureLog.IsNull() {
		if value.Exists() {
			data.LoginOnFailureLog = types.BoolValue(true)
		} else {
			data.LoginOnFailureLog = types.BoolValue(false)
		}
	} else {
		data.LoginOnFailureLog = types.BoolNull()
	}
	if value := res.Get(prefix + "login.on-success"); !data.LoginOnSuccess.IsNull() {
		if value.Exists() {
			data.LoginOnSuccess = types.BoolValue(true)
		} else {
			data.LoginOnSuccess = types.BoolValue(false)
		}
	} else {
		data.LoginOnSuccess = types.BoolNull()
	}
	if value := res.Get(prefix + "login.on-success.log"); !data.LoginOnSuccessLog.IsNull() {
		if value.Exists() {
			data.LoginOnSuccessLog = types.BoolValue(true)
		} else {
			data.LoginOnSuccessLog = types.BoolValue(false)
		}
	} else {
		data.LoginOnSuccessLog = types.BoolNull()
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-multicast:multicast-routing"); !data.IpMulticastRouting.IsNull() {
		if value.Exists() {
			data.IpMulticastRouting = types.BoolValue(true)
		} else {
			data.IpMulticastRouting = types.BoolValue(false)
		}
	} else {
		data.IpMulticastRouting = types.BoolNull()
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-multicast:mcr-conf.multicast-routing"); !data.MulticastRoutingSwitch.IsNull() {
		if value.Exists() {
			data.MulticastRoutingSwitch = types.BoolValue(true)
		} else {
			data.MulticastRoutingSwitch = types.BoolValue(false)
		}
	} else {
		data.MulticastRoutingSwitch = types.BoolNull()
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-multicast:multicast-routing.distributed"); !data.IpMulticastRoutingDistributed.IsNull() {
		if value.Exists() {
			data.IpMulticastRoutingDistributed = types.BoolValue(true)
		} else {
			data.IpMulticastRoutingDistributed = types.BoolValue(false)
		}
	} else {
		data.IpMulticastRoutingDistributed = types.BoolNull()
	}
	for i := range data.MulticastRoutingVrfs {
		keys := [...]string{"name"}
		keyValues := [...]string{data.MulticastRoutingVrfs[i].Vrf.ValueString()}

		var r gjson.Result
		res.Get(prefix + "ip.Cisco-IOS-XE-multicast:multicast-routing.vrf").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("name"); value.Exists() && !data.MulticastRoutingVrfs[i].Vrf.IsNull() {
			data.MulticastRoutingVrfs[i].Vrf = types.StringValue(value.String())
		} else {
			data.MulticastRoutingVrfs[i].Vrf = types.StringNull()
		}
		if value := r.Get("distributed"); !data.MulticastRoutingVrfs[i].Distributed.IsNull() {
			if value.Exists() {
				data.MulticastRoutingVrfs[i].Distributed = types.BoolValue(true)
			} else {
				data.MulticastRoutingVrfs[i].Distributed = types.BoolValue(false)
			}
		} else {
			data.MulticastRoutingVrfs[i].Distributed = types.BoolNull()
		}
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.access-class"); value.Exists() && !data.IpHttpAccessClass.IsNull() {
		data.IpHttpAccessClass = types.Int64Value(value.Int())
	} else {
		data.IpHttpAccessClass = types.Int64Null()
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.authentication.aaa"); !data.IpHttpAuthenticationAaa.IsNull() {
		if value.Exists() {
			data.IpHttpAuthenticationAaa = types.BoolValue(true)
		} else {
			data.IpHttpAuthenticationAaa = types.BoolValue(false)
		}
	} else {
		data.IpHttpAuthenticationAaa = types.BoolNull()
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.authentication.aaa.exec-authorization"); value.Exists() && !data.IpHttpAuthenticationAaaExecAuthorization.IsNull() {
		data.IpHttpAuthenticationAaaExecAuthorization = types.StringValue(value.String())
	} else {
		data.IpHttpAuthenticationAaaExecAuthorization = types.StringNull()
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.authentication.aaa.login-authentication"); value.Exists() && !data.IpHttpAuthenticationAaaLoginAuthentication.IsNull() {
		data.IpHttpAuthenticationAaaLoginAuthentication = types.StringValue(value.String())
	} else {
		data.IpHttpAuthenticationAaaLoginAuthentication = types.StringNull()
	}
	for i := range data.IpHttpAuthenticationAaaCommandAuthorization {
		keys := [...]string{"level"}
		keyValues := [...]string{strconv.FormatInt(data.IpHttpAuthenticationAaaCommandAuthorization[i].Level.ValueInt64(), 10)}

		var r gjson.Result
		res.Get(prefix + "ip.Cisco-IOS-XE-http:http.authentication.aaa.command-authorization").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("level"); value.Exists() && !data.IpHttpAuthenticationAaaCommandAuthorization[i].Level.IsNull() {
			data.IpHttpAuthenticationAaaCommandAuthorization[i].Level = types.Int64Value(value.Int())
		} else {
			data.IpHttpAuthenticationAaaCommandAuthorization[i].Level = types.Int64Null()
		}
		if value := r.Get("name"); value.Exists() && !data.IpHttpAuthenticationAaaCommandAuthorization[i].Name.IsNull() {
			data.IpHttpAuthenticationAaaCommandAuthorization[i].Name = types.StringValue(value.String())
		} else {
			data.IpHttpAuthenticationAaaCommandAuthorization[i].Name = types.StringNull()
		}
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.authentication.local"); !data.IpHttpAuthenticationLocal.IsNull() {
		if value.Exists() {
			data.IpHttpAuthenticationLocal = types.BoolValue(true)
		} else {
			data.IpHttpAuthenticationLocal = types.BoolValue(false)
		}
	} else {
		data.IpHttpAuthenticationLocal = types.BoolNull()
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.server"); !data.IpHttpServer.IsNull() {
		if value.Exists() {
			data.IpHttpServer = types.BoolValue(value.Bool())
		}
	} else {
		data.IpHttpServer = types.BoolNull()
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.secure-server"); !data.IpHttpSecureServer.IsNull() {
		if value.Exists() {
			data.IpHttpSecureServer = types.BoolValue(value.Bool())
		}
	} else {
		data.IpHttpSecureServer = types.BoolNull()
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.secure-trustpoint"); value.Exists() && !data.IpHttpSecureTrustpoint.IsNull() {
		data.IpHttpSecureTrustpoint = types.StringValue(value.String())
	} else {
		data.IpHttpSecureTrustpoint = types.StringNull()
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.tls-version"); value.Exists() && !data.IpHttpTlsVersion.IsNull() {
		data.IpHttpTlsVersion = types.StringValue(value.String())
	} else {
		data.IpHttpTlsVersion = types.StringNull()
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.client.secure-trustpoint"); value.Exists() && !data.IpHttpClientSecureTrustpoint.IsNull() {
		data.IpHttpClientSecureTrustpoint = types.StringValue(value.String())
	} else {
		data.IpHttpClientSecureTrustpoint = types.StringNull()
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.client.source-interface"); value.Exists() && !data.IpHttpClientSourceInterface.IsNull() {
		data.IpHttpClientSourceInterface = types.StringValue(value.String())
	} else {
		data.IpHttpClientSourceInterface = types.StringNull()
	}
}

func (data *SystemData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "hostname"); value.Exists() {
		data.Hostname = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "ip.bgp-community.new-format"); value.Exists() {
		data.IpBgpCommunityNewFormat = types.BoolValue(true)
	} else {
		data.IpBgpCommunityNewFormat = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ip.routing-conf.routing"); value.Exists() {
		data.IpRouting = types.BoolValue(value.Bool())
	} else {
		data.IpRouting = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ipv6.unicast-routing"); value.Exists() {
		data.Ipv6UnicastRouting = types.BoolValue(true)
	} else {
		data.Ipv6UnicastRouting = types.BoolValue(false)
	}
	if value := res.Get(prefix + "system.Cisco-IOS-XE-switch:mtu.size"); value.Exists() {
		data.Mtu = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "ip.source-route"); value.Exists() {
		data.IpSourceRoute = types.BoolValue(value.Bool())
	} else {
		data.IpSourceRoute = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ip.domain.lookup"); value.Exists() {
		data.IpDomainLookup = types.BoolValue(value.Bool())
	} else {
		data.IpDomainLookup = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ip.domain.name"); value.Exists() {
		data.IpDomainName = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "login.delay"); value.Exists() {
		data.LoginDelay = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "login.on-failure"); value.Exists() {
		data.LoginOnFailure = types.BoolValue(true)
	} else {
		data.LoginOnFailure = types.BoolValue(false)
	}
	if value := res.Get(prefix + "login.on-failure.log"); value.Exists() {
		data.LoginOnFailureLog = types.BoolValue(true)
	} else {
		data.LoginOnFailureLog = types.BoolValue(false)
	}
	if value := res.Get(prefix + "login.on-success"); value.Exists() {
		data.LoginOnSuccess = types.BoolValue(true)
	} else {
		data.LoginOnSuccess = types.BoolValue(false)
	}
	if value := res.Get(prefix + "login.on-success.log"); value.Exists() {
		data.LoginOnSuccessLog = types.BoolValue(true)
	} else {
		data.LoginOnSuccessLog = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-multicast:multicast-routing"); value.Exists() {
		data.IpMulticastRouting = types.BoolValue(true)
	} else {
		data.IpMulticastRouting = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-multicast:mcr-conf.multicast-routing"); value.Exists() {
		data.MulticastRoutingSwitch = types.BoolValue(true)
	} else {
		data.MulticastRoutingSwitch = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-multicast:multicast-routing.distributed"); value.Exists() {
		data.IpMulticastRoutingDistributed = types.BoolValue(true)
	} else {
		data.IpMulticastRoutingDistributed = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-multicast:multicast-routing.vrf"); value.Exists() {
		data.MulticastRoutingVrfs = make([]SystemMulticastRoutingVrfs, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SystemMulticastRoutingVrfs{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Vrf = types.StringValue(cValue.String())
			}
			if cValue := v.Get("distributed"); cValue.Exists() {
				item.Distributed = types.BoolValue(true)
			} else {
				item.Distributed = types.BoolValue(false)
			}
			data.MulticastRoutingVrfs = append(data.MulticastRoutingVrfs, item)
			return true
		})
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.access-class"); value.Exists() {
		data.IpHttpAccessClass = types.Int64Value(value.Int())
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.authentication.aaa"); value.Exists() {
		data.IpHttpAuthenticationAaa = types.BoolValue(true)
	} else {
		data.IpHttpAuthenticationAaa = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.authentication.aaa.exec-authorization"); value.Exists() {
		data.IpHttpAuthenticationAaaExecAuthorization = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.authentication.aaa.login-authentication"); value.Exists() {
		data.IpHttpAuthenticationAaaLoginAuthentication = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.authentication.aaa.command-authorization"); value.Exists() {
		data.IpHttpAuthenticationAaaCommandAuthorization = make([]SystemIpHttpAuthenticationAaaCommandAuthorization, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := SystemIpHttpAuthenticationAaaCommandAuthorization{}
			if cValue := v.Get("level"); cValue.Exists() {
				item.Level = types.Int64Value(cValue.Int())
			}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			data.IpHttpAuthenticationAaaCommandAuthorization = append(data.IpHttpAuthenticationAaaCommandAuthorization, item)
			return true
		})
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.authentication.local"); value.Exists() {
		data.IpHttpAuthenticationLocal = types.BoolValue(true)
	} else {
		data.IpHttpAuthenticationLocal = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.server"); value.Exists() {
		data.IpHttpServer = types.BoolValue(value.Bool())
	} else {
		data.IpHttpServer = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.secure-server"); value.Exists() {
		data.IpHttpSecureServer = types.BoolValue(value.Bool())
	} else {
		data.IpHttpSecureServer = types.BoolValue(false)
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.secure-trustpoint"); value.Exists() {
		data.IpHttpSecureTrustpoint = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.tls-version"); value.Exists() {
		data.IpHttpTlsVersion = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.client.secure-trustpoint"); value.Exists() {
		data.IpHttpClientSecureTrustpoint = types.StringValue(value.String())
	}
	if value := res.Get(prefix + "ip.Cisco-IOS-XE-http:http.client.source-interface"); value.Exists() {
		data.IpHttpClientSourceInterface = types.StringValue(value.String())
	}
}

func (data *System) getDeletedItems(ctx context.Context, state System) []string {
	deletedItems := make([]string, 0)
	if !state.Hostname.IsNull() && data.Hostname.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/hostname", state.getPath()))
	}
	if !state.IpBgpCommunityNewFormat.IsNull() && data.IpBgpCommunityNewFormat.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/bgp-community/new-format", state.getPath()))
	}
	if !state.IpRouting.IsNull() && data.IpRouting.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/routing-conf/routing", state.getPath()))
	}
	if !state.Ipv6UnicastRouting.IsNull() && data.Ipv6UnicastRouting.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ipv6/unicast-routing", state.getPath()))
	}
	if !state.Mtu.IsNull() && data.Mtu.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/system/Cisco-IOS-XE-switch:mtu/size", state.getPath()))
	}
	if !state.IpSourceRoute.IsNull() && data.IpSourceRoute.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/source-route", state.getPath()))
	}
	if !state.IpDomainLookup.IsNull() && data.IpDomainLookup.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/domain/lookup", state.getPath()))
	}
	if !state.IpDomainName.IsNull() && data.IpDomainName.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/domain/name", state.getPath()))
	}
	if !state.LoginDelay.IsNull() && data.LoginDelay.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/login/delay", state.getPath()))
	}
	if !state.LoginOnFailure.IsNull() && data.LoginOnFailure.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/login/on-failure", state.getPath()))
	}
	if !state.LoginOnFailureLog.IsNull() && data.LoginOnFailureLog.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/login/on-failure/log", state.getPath()))
	}
	if !state.LoginOnSuccess.IsNull() && data.LoginOnSuccess.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/login/on-success", state.getPath()))
	}
	if !state.LoginOnSuccessLog.IsNull() && data.LoginOnSuccessLog.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/login/on-success/log", state.getPath()))
	}
	if !state.IpMulticastRouting.IsNull() && data.IpMulticastRouting.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-multicast:multicast-routing", state.getPath()))
	}
	if !state.MulticastRoutingSwitch.IsNull() && data.MulticastRoutingSwitch.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-multicast:mcr-conf/multicast-routing", state.getPath()))
	}
	if !state.IpMulticastRoutingDistributed.IsNull() && data.IpMulticastRoutingDistributed.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-multicast:multicast-routing/distributed", state.getPath()))
	}
	for i := range state.MulticastRoutingVrfs {
		stateKeyValues := [...]string{state.MulticastRoutingVrfs[i].Vrf.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.MulticastRoutingVrfs[i].Vrf.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.MulticastRoutingVrfs {
			found = true
			if state.MulticastRoutingVrfs[i].Vrf.ValueString() != data.MulticastRoutingVrfs[j].Vrf.ValueString() {
				found = false
			}
			if found {
				if !state.MulticastRoutingVrfs[i].Distributed.IsNull() && data.MulticastRoutingVrfs[j].Distributed.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-multicast:multicast-routing/vrf=%v/distributed", state.getPath(), strings.Join(stateKeyValues[:], ",")))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-multicast:multicast-routing/vrf=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	if !state.IpHttpAccessClass.IsNull() && data.IpHttpAccessClass.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/access-class", state.getPath()))
	}
	if !state.IpHttpAuthenticationAaa.IsNull() && data.IpHttpAuthenticationAaa.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/authentication/aaa", state.getPath()))
	}
	if !state.IpHttpAuthenticationAaaExecAuthorization.IsNull() && data.IpHttpAuthenticationAaaExecAuthorization.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/authentication/aaa/exec-authorization", state.getPath()))
	}
	if !state.IpHttpAuthenticationAaaLoginAuthentication.IsNull() && data.IpHttpAuthenticationAaaLoginAuthentication.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/authentication/aaa/login-authentication", state.getPath()))
	}
	for i := range state.IpHttpAuthenticationAaaCommandAuthorization {
		stateKeyValues := [...]string{strconv.FormatInt(state.IpHttpAuthenticationAaaCommandAuthorization[i].Level.ValueInt64(), 10)}

		emptyKeys := true
		if !reflect.ValueOf(state.IpHttpAuthenticationAaaCommandAuthorization[i].Level.ValueInt64()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.IpHttpAuthenticationAaaCommandAuthorization {
			found = true
			if state.IpHttpAuthenticationAaaCommandAuthorization[i].Level.ValueInt64() != data.IpHttpAuthenticationAaaCommandAuthorization[j].Level.ValueInt64() {
				found = false
			}
			if found {
				if !state.IpHttpAuthenticationAaaCommandAuthorization[i].Name.IsNull() && data.IpHttpAuthenticationAaaCommandAuthorization[j].Name.IsNull() {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/authentication/aaa/command-authorization=%v/name", state.getPath(), strings.Join(stateKeyValues[:], ",")))
				}
				break
			}
		}
		if !found {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/authentication/aaa/command-authorization=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	if !state.IpHttpAuthenticationLocal.IsNull() && data.IpHttpAuthenticationLocal.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/authentication/local", state.getPath()))
	}
	if !state.IpHttpServer.IsNull() && data.IpHttpServer.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/server", state.getPath()))
	}
	if !state.IpHttpSecureServer.IsNull() && data.IpHttpSecureServer.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/secure-server", state.getPath()))
	}
	if !state.IpHttpSecureTrustpoint.IsNull() && data.IpHttpSecureTrustpoint.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/secure-trustpoint", state.getPath()))
	}
	if !state.IpHttpTlsVersion.IsNull() && data.IpHttpTlsVersion.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/tls-version", state.getPath()))
	}
	if !state.IpHttpClientSecureTrustpoint.IsNull() && data.IpHttpClientSecureTrustpoint.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/client/secure-trustpoint", state.getPath()))
	}
	if !state.IpHttpClientSourceInterface.IsNull() && data.IpHttpClientSourceInterface.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/client/source-interface", state.getPath()))
	}
	return deletedItems
}

func (data *System) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.IpBgpCommunityNewFormat.IsNull() && !data.IpBgpCommunityNewFormat.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ip/bgp-community/new-format", data.getPath()))
	}
	if !data.Ipv6UnicastRouting.IsNull() && !data.Ipv6UnicastRouting.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ipv6/unicast-routing", data.getPath()))
	}
	if !data.LoginOnFailure.IsNull() && !data.LoginOnFailure.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/login/on-failure", data.getPath()))
	}
	if !data.LoginOnFailureLog.IsNull() && !data.LoginOnFailureLog.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/login/on-failure/log", data.getPath()))
	}
	if !data.LoginOnSuccess.IsNull() && !data.LoginOnSuccess.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/login/on-success", data.getPath()))
	}
	if !data.LoginOnSuccessLog.IsNull() && !data.LoginOnSuccessLog.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/login/on-success/log", data.getPath()))
	}
	if !data.IpMulticastRouting.IsNull() && !data.IpMulticastRouting.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ip/Cisco-IOS-XE-multicast:multicast-routing", data.getPath()))
	}
	if !data.MulticastRoutingSwitch.IsNull() && !data.MulticastRoutingSwitch.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ip/Cisco-IOS-XE-multicast:mcr-conf/multicast-routing", data.getPath()))
	}
	if !data.IpMulticastRoutingDistributed.IsNull() && !data.IpMulticastRoutingDistributed.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ip/Cisco-IOS-XE-multicast:multicast-routing/distributed", data.getPath()))
	}

	for i := range data.MulticastRoutingVrfs {
		keyValues := [...]string{data.MulticastRoutingVrfs[i].Vrf.ValueString()}
		if !data.MulticastRoutingVrfs[i].Distributed.IsNull() && !data.MulticastRoutingVrfs[i].Distributed.ValueBool() {
			emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ip/Cisco-IOS-XE-multicast:multicast-routing/vrf=%v/distributed", data.getPath(), strings.Join(keyValues[:], ",")))
		}
	}
	if !data.IpHttpAuthenticationAaa.IsNull() && !data.IpHttpAuthenticationAaa.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/authentication/aaa", data.getPath()))
	}

	if !data.IpHttpAuthenticationLocal.IsNull() && !data.IpHttpAuthenticationLocal.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/authentication/local", data.getPath()))
	}
	return emptyLeafsDelete
}

func (data *System) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.Hostname.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/hostname", data.getPath()))
	}
	if !data.IpBgpCommunityNewFormat.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/bgp-community/new-format", data.getPath()))
	}
	if !data.IpRouting.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/routing-conf/routing", data.getPath()))
	}
	if !data.Ipv6UnicastRouting.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ipv6/unicast-routing", data.getPath()))
	}
	if !data.Mtu.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/system/Cisco-IOS-XE-switch:mtu/size", data.getPath()))
	}
	if !data.IpSourceRoute.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/source-route", data.getPath()))
	}
	if !data.IpDomainLookup.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/domain/lookup", data.getPath()))
	}
	if !data.IpDomainName.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/domain/name", data.getPath()))
	}
	if !data.LoginDelay.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/login/delay", data.getPath()))
	}
	if !data.LoginOnFailure.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/login/on-failure", data.getPath()))
	}
	if !data.LoginOnFailureLog.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/login/on-failure/log", data.getPath()))
	}
	if !data.LoginOnSuccess.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/login/on-success", data.getPath()))
	}
	if !data.LoginOnSuccessLog.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/login/on-success/log", data.getPath()))
	}
	if !data.IpMulticastRouting.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/Cisco-IOS-XE-multicast:multicast-routing", data.getPath()))
	}
	if !data.MulticastRoutingSwitch.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/Cisco-IOS-XE-multicast:mcr-conf/multicast-routing", data.getPath()))
	}
	if !data.IpMulticastRoutingDistributed.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/Cisco-IOS-XE-multicast:multicast-routing/distributed", data.getPath()))
	}
	for i := range data.MulticastRoutingVrfs {
		keyValues := [...]string{data.MulticastRoutingVrfs[i].Vrf.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/Cisco-IOS-XE-multicast:multicast-routing/vrf=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	if !data.IpHttpAccessClass.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/access-class", data.getPath()))
	}
	if !data.IpHttpAuthenticationAaa.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/authentication/aaa", data.getPath()))
	}
	if !data.IpHttpAuthenticationAaaExecAuthorization.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/authentication/aaa/exec-authorization", data.getPath()))
	}
	if !data.IpHttpAuthenticationAaaLoginAuthentication.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/authentication/aaa/login-authentication", data.getPath()))
	}
	for i := range data.IpHttpAuthenticationAaaCommandAuthorization {
		keyValues := [...]string{strconv.FormatInt(data.IpHttpAuthenticationAaaCommandAuthorization[i].Level.ValueInt64(), 10)}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/authentication/aaa/command-authorization=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	if !data.IpHttpAuthenticationLocal.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/authentication/local", data.getPath()))
	}
	if !data.IpHttpServer.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/server", data.getPath()))
	}
	if !data.IpHttpSecureServer.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/secure-server", data.getPath()))
	}
	if !data.IpHttpSecureTrustpoint.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/secure-trustpoint", data.getPath()))
	}
	if !data.IpHttpTlsVersion.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/tls-version", data.getPath()))
	}
	if !data.IpHttpClientSecureTrustpoint.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/client/secure-trustpoint", data.getPath()))
	}
	if !data.IpHttpClientSourceInterface.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/ip/Cisco-IOS-XE-http:http/client/source-interface", data.getPath()))
	}
	return deletePaths
}
