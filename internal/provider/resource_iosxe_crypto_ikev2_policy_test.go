// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"fmt"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin testAcc

func TestAccIosxeCryptoIKEv2Policy(t *testing.T) {
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_crypto_ikev2_policy.test", "name", "policy1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_crypto_ikev2_policy.test", "match_address_local_ip.0", "1.2.3.4"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_crypto_ikev2_policy.test", "match_fvrf_any", "true"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_crypto_ikev2_policy.test", "proposals.0.proposals", "proposal123"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccIosxeCryptoIKEv2PolicyPrerequisitesConfig + testAccIosxeCryptoIKEv2PolicyConfig_minimum(),
			},
			{
				Config: testAccIosxeCryptoIKEv2PolicyPrerequisitesConfig + testAccIosxeCryptoIKEv2PolicyConfig_all(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
			{
				ResourceName:            "iosxe_crypto_ikev2_policy.test",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateIdFunc:       iosxeCryptoIKEv2PolicyImportStateIdFunc("iosxe_crypto_ikev2_policy.test"),
				ImportStateVerifyIgnore: []string{"match_inbound_only"},
				Check:                   resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

// End of section. //template:end testAcc

// Section below is generated&owned by "gen/generator.go". //template:begin importStateIdFunc

func iosxeCryptoIKEv2PolicyImportStateIdFunc(resourceName string) resource.ImportStateIdFunc {
	return func(s *terraform.State) (string, error) {
		primary := s.RootModule().Resources[resourceName].Primary
		Name := primary.Attributes["name"]

		return fmt.Sprintf("%s", Name), nil
	}
}

// End of section. //template:end importStateIdFunc

// Section below is generated&owned by "gen/generator.go". //template:begin testPrerequisites
const testAccIosxeCryptoIKEv2PolicyPrerequisitesConfig = `
resource "iosxe_restconf" "PreReq0" {
	path = "Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ikev2/proposal=proposal123"
	attributes = {
		"name" = "proposal123"
		"encryption/aes-cbc-256" = ""
		"group/sixteen" = ""
		"integrity/sha256" = ""
	}
}

`

// End of section. //template:end testPrerequisites

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigMinimal

func testAccIosxeCryptoIKEv2PolicyConfig_minimum() string {
	config := `resource "iosxe_crypto_ikev2_policy" "test" {` + "\n"
	config += `	name = "policy1"` + "\n"
	config += `	proposals = [{` + "\n"
	config += `		proposals = "proposal123"` + "\n"
	config += `	}]` + "\n"
	config += `	depends_on = [iosxe_restconf.PreReq0, ]` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigMinimal

// Section below is generated&owned by "gen/generator.go". //template:begin testAccConfigAll

func testAccIosxeCryptoIKEv2PolicyConfig_all() string {
	config := `resource "iosxe_crypto_ikev2_policy" "test" {` + "\n"
	config += `	name = "policy1"` + "\n"
	config += `	match_address_local_ip = ["1.2.3.4"]` + "\n"
	config += `	match_fvrf_any = true` + "\n"
	config += `	proposals = [{` + "\n"
	config += `		proposals = "proposal123"` + "\n"
	config += `	}]` + "\n"
	config += `	depends_on = [iosxe_restconf.PreReq0, ]` + "\n"
	config += `}` + "\n"
	return config
}

// End of section. //template:end testAccConfigAll
