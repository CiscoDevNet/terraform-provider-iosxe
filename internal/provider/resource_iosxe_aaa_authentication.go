// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-restconf"
)

func NewAAAAuthenticationResource() resource.Resource {
	return &AAAAuthenticationResource{}
}

type AAAAuthenticationResource struct {
	clients map[string]*restconf.Client
}

func (r *AAAAuthenticationResource) Metadata(_ context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_aaa_authentication"
}

func (r *AAAAuthenticationResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		// This description is used by the documentation generator and the language server.
		MarkdownDescription: "This resource can manage the AAA Authentication configuration.",

		Attributes: map[string]schema.Attribute{
			"device": schema.StringAttribute{
				MarkdownDescription: "A device name from the provider configuration.",
				Optional:            true,
			},
			"id": schema.StringAttribute{
				MarkdownDescription: "The path of the object.",
				Computed:            true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"delete_mode": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is. Default value is `all`.").AddStringEnumDescription("all", "attributes").String,
				Optional:            true,
				Validators: []validator.String{
					stringvalidator.OneOf("all", "attributes"),
				},
			},
			"logins": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Set authentication lists for logins.").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("").String,
							Required:            true,
						},
						"a1_none": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("NO authentication.").String,
							Optional:            true,
						},
						"a1_line": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use line password for authentication.").String,
							Optional:            true,
						},
						"a1_enable": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use enable password for authentication.").String,
							Optional:            true,
						},
						"a1_local": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use local username authentication.").String,
							Optional:            true,
						},
						"a1_group": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use Server-group").String,
							Optional:            true,
						},
						"a2_none": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("NO authentication.").String,
							Optional:            true,
						},
						"a2_line": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use line password for authentication.").String,
							Optional:            true,
						},
						"a2_enable": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use enable password for authentication.").String,
							Optional:            true,
						},
						"a2_local": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("").String,
							Optional:            true,
						},
						"a2_group": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use Server-group").String,
							Optional:            true,
						},
						"a3_none": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("NO authentication.").String,
							Optional:            true,
						},
						"a3_line": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use line password for authentication.").String,
							Optional:            true,
						},
						"a3_enable": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use enable password for authentication.").String,
							Optional:            true,
						},
						"a3_local": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("").String,
							Optional:            true,
						},
						"a3_group": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use Server-group").String,
							Optional:            true,
						},
						"a4_none": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("NO authentication.").String,
							Optional:            true,
						},
						"a4_line": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use line password for authentication.").String,
							Optional:            true,
						},
						"a4_enable": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use enable password for authentication.").String,
							Optional:            true,
						},
						"a4_local": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("").String,
							Optional:            true,
						},
						"a4_group": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use Server-group").String,
							Optional:            true,
						},
					},
				},
			},
			"dot1x": schema.ListNestedAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("").String,
				Optional:            true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"name": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Named authentication method list for dot1x service.").String,
							Required:            true,
						},
						"a1_group": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use Server-group").String,
							Optional:            true,
						},
						"a1_local": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use local username authentication").String,
							Optional:            true,
						},
						"a1_cache": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use Cached-group").String,
							Optional:            true,
						},
						"a1_radius": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use list of all Radius hosts").String,
							Optional:            true,
						},
						"a2_group": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use Server-group").String,
							Optional:            true,
						},
						"a2_local": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use local username authentication").String,
							Optional:            true,
						},
						"a2_cache": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use Cached-group").String,
							Optional:            true,
						},
						"a2_radius": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use list of all Radius hosts").String,
							Optional:            true,
						},
						"a3_group": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use Server-group").String,
							Optional:            true,
						},
						"a3_local": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use local username authentication").String,
							Optional:            true,
						},
						"a3_cache": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use Cached-group").String,
							Optional:            true,
						},
						"a3_radius": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use list of all Radius hosts").String,
							Optional:            true,
						},
						"a4_group": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use Server-group").String,
							Optional:            true,
						},
						"a4_local": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use local username authentication").String,
							Optional:            true,
						},
						"a4_cache": schema.StringAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use Cached-group").String,
							Optional:            true,
						},
						"a4_radius": schema.BoolAttribute{
							MarkdownDescription: helpers.NewAttributeDescription("Use list of all Radius hosts").String,
							Optional:            true,
						},
					},
				},
			},
			"dot1x_default_a1_group": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use Server-group").String,
				Optional:            true,
			},
			"dot1x_default_a1_local": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use local username authentication").String,
				Optional:            true,
			},
			"dot1x_default_a2_group": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use Server-group").String,
				Optional:            true,
			},
			"dot1x_default_a2_local": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use local username authentication").String,
				Optional:            true,
			},
			"dot1x_default_a3_group": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use Server-group").String,
				Optional:            true,
			},
			"dot1x_default_a3_local": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use local username authentication").String,
				Optional:            true,
			},
			"dot1x_default_a4_group": schema.StringAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use Server-group").String,
				Optional:            true,
			},
			"dot1x_default_a4_local": schema.BoolAttribute{
				MarkdownDescription: helpers.NewAttributeDescription("Use local username authentication").String,
				Optional:            true,
			},
		},
	}
}

func (r *AAAAuthenticationResource) Configure(_ context.Context, req resource.ConfigureRequest, _ *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	r.clients = req.ProviderData.(map[string]*restconf.Client)
}

func (r *AAAAuthenticationResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var plan AAAAuthentication

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	if _, ok := r.clients[plan.Device.ValueString()]; !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", plan.Device.ValueString()))
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Create", plan.getPath()))

	// Create object
	body := plan.toBody(ctx)

	emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
	tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

	if YangPatch {
		edits := []restconf.YangPatchEdit{restconf.NewYangPatchEdit("merge", plan.getPath(), restconf.Body{Str: body})}
		for _, i := range emptyLeafsDelete {
			edits = append(edits, restconf.NewYangPatchEdit("remove", i, restconf.Body{}))
		}
		_, err := r.clients[plan.Device.ValueString()].YangPatchData("", "1", "", edits)
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to configure object, got error: %s", err))
			return
		}
	} else {
		res, err := r.clients[plan.Device.ValueString()].PatchData(plan.getPathShort(), body)
		if len(res.Errors.Error) > 0 && res.Errors.Error[0].ErrorMessage == "patch to a nonexistent resource" {
			_, err = r.clients[plan.Device.ValueString()].PutData(plan.getPath(), body)
		}
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to configure object (PATCH), got error: %s", err))
			return
		}
		for _, i := range emptyLeafsDelete {
			res, err := r.clients[plan.Device.ValueString()].DeleteData(i)
			if err != nil && res.StatusCode != 404 {
				resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object, got error: %s", err))
				return
			}
		}
	}

	plan.Id = types.StringValue(plan.getPath())

	tflog.Debug(ctx, fmt.Sprintf("%s: Create finished successfully", plan.getPath()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

func (r *AAAAuthenticationResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var state AAAAuthentication

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	if _, ok := r.clients[state.Device.ValueString()]; !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", state.Device.ValueString()))
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Read", state.Id.ValueString()))

	res, err := r.clients[state.Device.ValueString()].GetData(state.Id.ValueString())
	if res.StatusCode == 404 {
		state = AAAAuthentication{Device: state.Device, Id: state.Id}
	} else {
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to retrieve object, got error: %s", err))
			return
		}

		state.updateFromBody(ctx, res.Res)
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Read finished successfully", state.Id.ValueString()))

	diags = resp.State.Set(ctx, &state)
	resp.Diagnostics.Append(diags...)
}

func (r *AAAAuthenticationResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var plan, state AAAAuthentication

	// Read plan
	diags := req.Plan.Get(ctx, &plan)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Read state
	diags = req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	if _, ok := r.clients[plan.Device.ValueString()]; !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", plan.Device.ValueString()))
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Update", plan.Id.ValueString()))

	body := plan.toBody(ctx)

	deletedItems := plan.getDeletedItems(ctx, state)
	tflog.Debug(ctx, fmt.Sprintf("Removed items to delete: %+v", deletedItems))

	emptyLeafsDelete := plan.getEmptyLeafsDelete(ctx)
	tflog.Debug(ctx, fmt.Sprintf("List of empty leafs to delete: %+v", emptyLeafsDelete))

	if YangPatch {
		edits := []restconf.YangPatchEdit{restconf.NewYangPatchEdit("merge", plan.getPath(), restconf.Body{Str: body})}
		for _, i := range deletedItems {
			edits = append(edits, restconf.NewYangPatchEdit("remove", i, restconf.Body{}))
		}
		for _, i := range emptyLeafsDelete {
			edits = append(edits, restconf.NewYangPatchEdit("remove", i, restconf.Body{}))
		}
		_, err := r.clients[plan.Device.ValueString()].YangPatchData("", "1", "", edits)
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to update object, got error: %s", err))
			return
		}
	} else {
		res, err := r.clients[plan.Device.ValueString()].PatchData(plan.getPathShort(), body)
		if len(res.Errors.Error) > 0 && res.Errors.Error[0].ErrorMessage == "patch to a nonexistent resource" {
			_, err = r.clients[plan.Device.ValueString()].PutData(plan.getPath(), body)
		}
		if err != nil {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to configure object (PATCH), got error: %s", err))
			return
		}
		for _, i := range deletedItems {
			res, err := r.clients[state.Device.ValueString()].DeleteData(i)
			if err != nil && res.StatusCode != 404 {
				resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object, got error: %s", err))
				return
			}
		}
		for _, i := range emptyLeafsDelete {
			res, err := r.clients[plan.Device.ValueString()].DeleteData(i)
			if err != nil && res.StatusCode != 404 {
				resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object, got error: %s", err))
				return
			}
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Update finished successfully", plan.Id.ValueString()))

	diags = resp.State.Set(ctx, &plan)
	resp.Diagnostics.Append(diags...)
}

func (r *AAAAuthenticationResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var state AAAAuthentication

	// Read state
	diags := req.State.Get(ctx, &state)
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	if _, ok := r.clients[state.Device.ValueString()]; !ok {
		resp.Diagnostics.AddAttributeError(path.Root("device"), "Invalid device", fmt.Sprintf("Device '%s' does not exist in provider configuration.", state.Device.ValueString()))
		return
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Beginning Delete", state.Id.ValueString()))
	deleteMode := "all"
	if state.DeleteMode.ValueString() == "all" {
		deleteMode = "all"
	} else if state.DeleteMode.ValueString() == "attributes" {
		deleteMode = "attributes"
	}

	if deleteMode == "all" {
		res, err := r.clients[state.Device.ValueString()].DeleteData(state.Id.ValueString())
		if err != nil && res.StatusCode != 404 && res.StatusCode != 400 {
			resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object, got error: %s", err))
			return
		}
	} else {
		deletePaths := state.getDeletePaths(ctx)
		tflog.Debug(ctx, fmt.Sprintf("Paths to delete: %+v", deletePaths))

		if YangPatch {
			edits := []restconf.YangPatchEdit{}
			for _, i := range deletePaths {
				edits = append(edits, restconf.NewYangPatchEdit("remove", i, restconf.Body{}))
			}
			_, err := r.clients[state.Device.ValueString()].YangPatchData("", "1", "", edits)
			if err != nil {
				resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object, got error: %s", err))
				return
			}
		} else {
			for _, i := range deletePaths {
				res, err := r.clients[state.Device.ValueString()].DeleteData(i)
				if err != nil && res.StatusCode != 404 {
					resp.Diagnostics.AddError("Client Error", fmt.Sprintf("Failed to delete object, got error: %s", err))
					return
				}
			}
		}
	}

	tflog.Debug(ctx, fmt.Sprintf("%s: Delete finished successfully", state.Id.ValueString()))

	resp.State.RemoveResource(ctx)
}

func (r *AAAAuthenticationResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("id"), req, resp)
}
