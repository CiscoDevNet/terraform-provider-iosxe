// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

// Section below is generated&owned by "gen/generator.go". //template:begin imports
import (
	"context"
	"fmt"
	"net/url"
	"regexp"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
	"github.com/netascode/go-netconf"
	"github.com/netascode/xmldot"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

// End of section. //template:end imports

// Section below is generated&owned by "gen/generator.go". //template:begin types
type VLANFilter struct {
	Device    types.String `tfsdk:"device"`
	Id        types.String `tfsdk:"id"`
	Word      types.String `tfsdk:"word"`
	VlanLists types.List   `tfsdk:"vlan_lists"`
}

type VLANFilterData struct {
	Device    types.String `tfsdk:"device"`
	Id        types.String `tfsdk:"id"`
	Word      types.String `tfsdk:"word"`
	VlanLists types.List   `tfsdk:"vlan_lists"`
}

// End of section. //template:end types

// Section below is generated&owned by "gen/generator.go". //template:begin getPath

func (data VLANFilter) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/vlan/Cisco-IOS-XE-vlan:filter=%s", url.QueryEscape(fmt.Sprintf("%v", data.Word.ValueString())))
}

func (data VLANFilterData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/vlan/Cisco-IOS-XE-vlan:filter=%s", url.QueryEscape(fmt.Sprintf("%v", data.Word.ValueString())))
}

// if last path element has a key -> remove it
func (data VLANFilter) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

// getXPath returns the XPath for NETCONF operations
func (data VLANFilter) getXPath() string {
	path := helpers.ConvertRestconfPathToXPath("Cisco-IOS-XE-native:native/vlan/Cisco-IOS-XE-vlan:filter=%s")
	path = fmt.Sprintf(path, "word", url.QueryEscape(fmt.Sprintf("%v", data.Word.ValueString())))
	return path
}

func (data VLANFilterData) getXPath() string {
	path := helpers.ConvertRestconfPathToXPath("Cisco-IOS-XE-native:native/vlan/Cisco-IOS-XE-vlan:filter=%s")
	path = fmt.Sprintf(path, "word", url.QueryEscape(fmt.Sprintf("%v", data.Word.ValueString())))
	return path
}

// End of section. //template:end getPath

// Section below is generated&owned by "gen/generator.go". //template:begin toBody

func (data VLANFilter) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Word.IsNull() && !data.Word.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"word", data.Word.ValueString())
	}
	if !data.VlanLists.IsNull() && !data.VlanLists.IsUnknown() {
		var values []int
		data.VlanLists.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"vlan-lists", values)
	}
	return body
}

// End of section. //template:end toBody

// Section below is generated&owned by "gen/generator.go". //template:begin toBodyXML

func (data VLANFilter) toBodyXML(ctx context.Context) string {
	body := netconf.Body{}
	if !data.Word.IsNull() && !data.Word.IsUnknown() {
		body = helpers.SetFromXPath(body, data.getXPath()+"/word", data.Word.ValueString())
	}
	if !data.VlanLists.IsNull() && !data.VlanLists.IsUnknown() {
		var values []int
		data.VlanLists.ElementsAs(ctx, &values, false)
		body = helpers.SetFromXPath(body, data.getXPath()+"/vlan-lists", values)
	}
	bodyString, err := body.String()
	if err != nil {
		tflog.Error(ctx, fmt.Sprintf("Error converting body to string: %s", err))
	}
	return bodyString
}

// End of section. //template:end toBodyXML

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBody

func (data *VLANFilter) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "word"); value.Exists() && !data.Word.IsNull() {
		data.Word = types.StringValue(value.String())
	} else {
		data.Word = types.StringNull()
	}
	if value := res.Get(prefix + "vlan-lists"); value.Exists() && !data.VlanLists.IsNull() {
		data.VlanLists = helpers.GetInt64List(value.Array())
	} else {
		data.VlanLists = types.ListNull(types.Int64Type)
	}
}

// End of section. //template:end updateFromBody

// Section below is generated&owned by "gen/generator.go". //template:begin updateFromBodyXML

func (data *VLANFilter) updateFromBodyXML(ctx context.Context, res xmldot.Result) {
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/word"); value.Exists() && !data.Word.IsNull() {
		data.Word = types.StringValue(value.String())
	} else {
		data.Word = types.StringNull()
	}
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/vlan-lists"); value.Exists() && !data.VlanLists.IsNull() {
		data.VlanLists = helpers.GetInt64ListXML(value.Array())
	} else {
		data.VlanLists = types.ListNull(types.Int64Type)
	}
}

// End of section. //template:end updateFromBodyXML

// Section below is generated&owned by "gen/generator.go". //template:begin fromBody

func (data *VLANFilter) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "vlan-lists"); value.Exists() {
		data.VlanLists = helpers.GetInt64List(value.Array())
	} else {
		data.VlanLists = types.ListNull(types.Int64Type)
	}
}

// End of section. //template:end fromBody

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyData

func (data *VLANFilterData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "vlan-lists"); value.Exists() {
		data.VlanLists = helpers.GetInt64List(value.Array())
	} else {
		data.VlanLists = types.ListNull(types.Int64Type)
	}
}

// End of section. //template:end fromBodyData

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyXML

func (data *VLANFilter) fromBodyXML(ctx context.Context, res xmldot.Result) {
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/vlan-lists"); value.Exists() {
		data.VlanLists = helpers.GetInt64ListXML(value.Array())
	} else {
		data.VlanLists = types.ListNull(types.Int64Type)
	}
}

// End of section. //template:end fromBodyXML

// Section below is generated&owned by "gen/generator.go". //template:begin fromBodyDataXML

func (data *VLANFilterData) fromBodyXML(ctx context.Context, res xmldot.Result) {
	if value := helpers.GetFromXPath(res, "data/"+data.getXPath()+"/vlan-lists"); value.Exists() {
		data.VlanLists = helpers.GetInt64ListXML(value.Array())
	} else {
		data.VlanLists = types.ListNull(types.Int64Type)
	}
}

// End of section. //template:end fromBodyDataXML

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletedItems

func (data *VLANFilter) getDeletedItems(ctx context.Context, state VLANFilter) []string {
	deletedItems := make([]string, 0)
	if !state.VlanLists.IsNull() {
		if data.VlanLists.IsNull() {
			deletedItems = append(deletedItems, fmt.Sprintf("%v/vlan-lists", state.getPath()))
		} else {
			var dataValues, stateValues []int
			data.VlanLists.ElementsAs(ctx, &dataValues, false)
			state.VlanLists.ElementsAs(ctx, &stateValues, false)
			for _, v := range stateValues {
				found := false
				for _, vv := range dataValues {
					if v == vv {
						found = true
						break
					}
				}
				if !found {
					deletedItems = append(deletedItems, fmt.Sprintf("%v/vlan-lists=%v", state.getPath(), v))
				}
			}
		}
	}

	return deletedItems
}

// End of section. //template:end getDeletedItems

// Section below is generated&owned by "gen/generator.go". //template:begin addDeletedItemsXML

func (data *VLANFilter) addDeletedItemsXML(ctx context.Context, state VLANFilter, body string) string {
	b := netconf.NewBody(body)
	if !state.VlanLists.IsNull() {
		if data.VlanLists.IsNull() {
			b = helpers.RemoveFromXPath(b, state.getXPath()+"/vlan-lists")
		} else {
			var dataValues, stateValues []int
			data.VlanLists.ElementsAs(ctx, &dataValues, false)
			state.VlanLists.ElementsAs(ctx, &stateValues, false)
			for _, v := range stateValues {
				found := false
				for _, vv := range dataValues {
					if v == vv {
						found = true
						break
					}
				}
				if !found {
					b = helpers.RemoveFromXPath(b, fmt.Sprintf(state.getXPath()+"/vlan-lists[.=%v]", v))
				}
			}
		}
	}

	return b.Res()
}

// End of section. //template:end addDeletedItemsXML

// Section below is generated&owned by "gen/generator.go". //template:begin getEmptyLeafsDelete

func (data *VLANFilter) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}

// End of section. //template:end getEmptyLeafsDelete

// Section below is generated&owned by "gen/generator.go". //template:begin getDeletePaths

func (data *VLANFilter) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.VlanLists.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/vlan-lists", data.getPath()))
	}

	return deletePaths
}

// End of section. //template:end getDeletePaths

// Section below is generated&owned by "gen/generator.go". //template:begin addDeletePathsXML

func (data *VLANFilter) addDeletePathsXML(ctx context.Context, body string) string {
	b := netconf.NewBody(body)
	if !data.VlanLists.IsNull() {
		b = helpers.RemoveFromXPath(b, data.getXPath()+"/vlan-lists")
	}

	return b.Res()
}

// End of section. //template:end addDeletePathsXML
