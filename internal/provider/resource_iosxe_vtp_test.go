// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

func TestAccIosxeVTP(t *testing.T) {
	if os.Getenv("C9000V") == "" {
		t.Skip("skipping test, set environment variable C9000V")
	}
	var checks []resource.TestCheckFunc
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_vtp.test", "file", "TEST"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_vtp.test", "version", "3"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_vtp.test", "interface", "GigabitEthernet1/0/1"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_vtp.test", "password", "test123"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_vtp.test", "password_hidden", "false"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_vtp.test", "domain", "TESTDOMAIN"))
	checks = append(checks, resource.TestCheckResourceAttr("iosxe_vtp.test", "mode_transparent", "true"))
	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		Steps: []resource.TestStep{
			{
				Config: testAccIosxeVTPConfig_minimum(),
			},
			{
				Config: testAccIosxeVTPConfig_all(),
				Check:  resource.ComposeTestCheckFunc(checks...),
			},
			{
				ResourceName:            "iosxe_vtp.test",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateId:           "Cisco-IOS-XE-native:native/vtp",
				ImportStateVerifyIgnore: []string{"interface_only", "password_secret", "pruning", "mode_client", "mode_client_mst", "mode_client_unknown", "mode_client_vlan", "mode_off", "mode_off_mst", "mode_off_unknown", "mode_off_vlan", "mode_server", "mode_server_mst", "mode_server_unknown", "mode_server_vlan", "mode_transparent_mst", "mode_transparent_unknown", "mode_transparent_vlan"},
				Check:                   resource.ComposeTestCheckFunc(checks...),
			},
		},
	})
}

func testAccIosxeVTPConfig_minimum() string {
	config := `resource "iosxe_vtp" "test" {` + "\n"
	config += `}` + "\n"
	return config
}

func testAccIosxeVTPConfig_all() string {
	config := `resource "iosxe_vtp" "test" {` + "\n"
	config += `	file = "TEST"` + "\n"
	config += `	version = 3` + "\n"
	config += `	interface = "GigabitEthernet1/0/1"` + "\n"
	config += `	password = "test123"` + "\n"
	config += `	password_hidden = false` + "\n"
	config += `	domain = "TESTDOMAIN"` + "\n"
	config += `	mode_transparent = true` + "\n"
	config += `}` + "\n"
	return config
}
