// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"net/url"
	"regexp"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type InterfaceMPLS struct {
	Device     types.String `tfsdk:"device"`
	Id         types.String `tfsdk:"id"`
	DeleteMode types.String `tfsdk:"delete_mode"`
	Type       types.String `tfsdk:"type"`
	Name       types.String `tfsdk:"name"`
	Ip         types.Bool   `tfsdk:"ip"`
	Mtu        types.String `tfsdk:"mtu"`
}

type InterfaceMPLSData struct {
	Device types.String `tfsdk:"device"`
	Id     types.String `tfsdk:"id"`
	Type   types.String `tfsdk:"type"`
	Name   types.String `tfsdk:"name"`
	Ip     types.Bool   `tfsdk:"ip"`
	Mtu    types.String `tfsdk:"mtu"`
}

func (data InterfaceMPLS) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/interface/%s=%v/mpls", url.QueryEscape(fmt.Sprintf("%v", data.Type.ValueString())), url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
}

func (data InterfaceMPLSData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/interface/%s=%v/mpls", url.QueryEscape(fmt.Sprintf("%v", data.Type.ValueString())), url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
}

// if last path element has a key -> remove it
func (data InterfaceMPLS) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data InterfaceMPLS) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Ip.IsNull() && !data.Ip.IsUnknown() {
		if data.Ip.ValueBool() {
			body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-mpls:ip", map[string]string{})
		}
	}
	if !data.Mtu.IsNull() && !data.Mtu.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"Cisco-IOS-XE-mpls:mtu", data.Mtu.ValueString())
	}
	return body
}

func (data *InterfaceMPLS) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-mpls:ip"); !data.Ip.IsNull() {
		if value.Exists() {
			data.Ip = types.BoolValue(true)
		} else {
			data.Ip = types.BoolValue(false)
		}
	} else {
		data.Ip = types.BoolNull()
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-mpls:mtu"); value.Exists() && !data.Mtu.IsNull() {
		data.Mtu = types.StringValue(value.String())
	} else {
		data.Mtu = types.StringNull()
	}
}

func (data *InterfaceMPLSData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-mpls:ip"); value.Exists() {
		data.Ip = types.BoolValue(true)
	} else {
		data.Ip = types.BoolValue(false)
	}
	if value := res.Get(prefix + "Cisco-IOS-XE-mpls:mtu"); value.Exists() {
		data.Mtu = types.StringValue(value.String())
	}
}

func (data *InterfaceMPLS) getDeletedItems(ctx context.Context, state InterfaceMPLS) []string {
	deletedItems := make([]string, 0)
	if !state.Ip.IsNull() && data.Ip.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XE-mpls:ip", state.getPath()))
	}
	if !state.Mtu.IsNull() && data.Mtu.IsNull() {
		deletedItems = append(deletedItems, fmt.Sprintf("%v/Cisco-IOS-XE-mpls:mtu", state.getPath()))
	}
	return deletedItems
}

func (data *InterfaceMPLS) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)
	if !data.Ip.IsNull() && !data.Ip.ValueBool() {
		emptyLeafsDelete = append(emptyLeafsDelete, fmt.Sprintf("%v/Cisco-IOS-XE-mpls:ip", data.getPath()))
	}
	return emptyLeafsDelete
}

func (data *InterfaceMPLS) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	if !data.Ip.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-mpls:ip", data.getPath()))
	}
	if !data.Mtu.IsNull() {
		deletePaths = append(deletePaths, fmt.Sprintf("%v/Cisco-IOS-XE-mpls:mtu", data.getPath()))
	}
	return deletePaths
}
