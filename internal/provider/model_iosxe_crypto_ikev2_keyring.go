// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"net/url"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type CryptoIKEv2Keyring struct {
	Device types.String             `tfsdk:"device"`
	Id     types.String             `tfsdk:"id"`
	Name   types.String             `tfsdk:"name"`
	Peer   []CryptoIKEv2KeyringPeer `tfsdk:"peer"`
}

type CryptoIKEv2KeyringData struct {
	Device types.String             `tfsdk:"device"`
	Id     types.String             `tfsdk:"id"`
	Name   types.String             `tfsdk:"name"`
	Peer   []CryptoIKEv2KeyringPeer `tfsdk:"peer"`
}
type CryptoIKEv2KeyringPeer struct {
	Name                                                          types.String `tfsdk:"name"`
	Ipv4Address                                                   types.String `tfsdk:"ipv4_address"`
	Ipv4Mask                                                      types.String `tfsdk:"ipv4_mask"`
	IdentityIdentityKeyIdKeyIdNumber                              types.String `tfsdk:"identity_identity_key_id_key_id_number"`
	PreSharedKeyLocalOptionEncryptionHexEncryptionCaseEncryption  types.String `tfsdk:"pre_shared_key_local_option_encryption_hex_encryption_case_encryption"`
	PreSharedKeyLocalOptionEncryptionHexEncryptionCaseKey         types.String `tfsdk:"pre_shared_key_local_option_encryption_hex_encryption_case_key"`
	PreSharedKeyRemoteOptionEncryptionHexEncryptionCaseEncryption types.String `tfsdk:"pre_shared_key_remote_option_encryption_hex_encryption_case_encryption"`
	PreSharedKeyRemoteOptionEncryptionHexEncryptionCaseKey        types.String `tfsdk:"pre_shared_key_remote_option_encryption_hex_encryption_case_key"`
}

func (data CryptoIKEv2Keyring) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ikev2/keyring=%v", url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
}

func (data CryptoIKEv2KeyringData) getPath() string {
	return fmt.Sprintf("Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ikev2/keyring=%v", url.QueryEscape(fmt.Sprintf("%v", data.Name.ValueString())))
}

// if last path element has a key -> remove it
func (data CryptoIKEv2Keyring) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data CryptoIKEv2Keyring) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if !data.Name.IsNull() && !data.Name.IsUnknown() {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"name", data.Name.ValueString())
	}
	if len(data.Peer) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"peer", []interface{}{})
		for index, item := range data.Peer {
			if !item.Name.IsNull() && !item.Name.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"peer"+"."+strconv.Itoa(index)+"."+"name", item.Name.ValueString())
			}
			if !item.Ipv4Address.IsNull() && !item.Ipv4Address.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"peer"+"."+strconv.Itoa(index)+"."+"address.ipv4.ipv4-address", item.Ipv4Address.ValueString())
			}
			if !item.Ipv4Mask.IsNull() && !item.Ipv4Mask.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"peer"+"."+strconv.Itoa(index)+"."+"address.ipv4.ipv4-mask", item.Ipv4Mask.ValueString())
			}
			if !item.IdentityIdentityKeyIdKeyIdNumber.IsNull() && !item.IdentityIdentityKeyIdKeyIdNumber.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"peer"+"."+strconv.Itoa(index)+"."+"identity.key-id-number", item.IdentityIdentityKeyIdKeyIdNumber.ValueString())
			}
			if !item.PreSharedKeyLocalOptionEncryptionHexEncryptionCaseEncryption.IsNull() && !item.PreSharedKeyLocalOptionEncryptionHexEncryptionCaseEncryption.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"peer"+"."+strconv.Itoa(index)+"."+"pre-shared-key.local-option.encryption", item.PreSharedKeyLocalOptionEncryptionHexEncryptionCaseEncryption.ValueString())
			}
			if !item.PreSharedKeyLocalOptionEncryptionHexEncryptionCaseKey.IsNull() && !item.PreSharedKeyLocalOptionEncryptionHexEncryptionCaseKey.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"peer"+"."+strconv.Itoa(index)+"."+"pre-shared-key.local-option.key", item.PreSharedKeyLocalOptionEncryptionHexEncryptionCaseKey.ValueString())
			}
			if !item.PreSharedKeyRemoteOptionEncryptionHexEncryptionCaseEncryption.IsNull() && !item.PreSharedKeyRemoteOptionEncryptionHexEncryptionCaseEncryption.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"peer"+"."+strconv.Itoa(index)+"."+"pre-shared-key.remote-option.encryption", item.PreSharedKeyRemoteOptionEncryptionHexEncryptionCaseEncryption.ValueString())
			}
			if !item.PreSharedKeyRemoteOptionEncryptionHexEncryptionCaseKey.IsNull() && !item.PreSharedKeyRemoteOptionEncryptionHexEncryptionCaseKey.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"peer"+"."+strconv.Itoa(index)+"."+"pre-shared-key.remote-option.key", item.PreSharedKeyRemoteOptionEncryptionHexEncryptionCaseKey.ValueString())
			}
		}
	}
	return body
}

func (data *CryptoIKEv2Keyring) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "name"); value.Exists() && !data.Name.IsNull() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	for i := range data.Peer {
		keys := [...]string{"name"}
		keyValues := [...]string{data.Peer[i].Name.ValueString()}

		var r gjson.Result
		res.Get(prefix + "peer").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("name"); value.Exists() && !data.Peer[i].Name.IsNull() {
			data.Peer[i].Name = types.StringValue(value.String())
		} else {
			data.Peer[i].Name = types.StringNull()
		}
		if value := r.Get("address.ipv4.ipv4-address"); value.Exists() && !data.Peer[i].Ipv4Address.IsNull() {
			data.Peer[i].Ipv4Address = types.StringValue(value.String())
		} else {
			data.Peer[i].Ipv4Address = types.StringNull()
		}
		if value := r.Get("address.ipv4.ipv4-mask"); value.Exists() && !data.Peer[i].Ipv4Mask.IsNull() {
			data.Peer[i].Ipv4Mask = types.StringValue(value.String())
		} else {
			data.Peer[i].Ipv4Mask = types.StringNull()
		}
		if value := r.Get("identity.key-id-number"); value.Exists() && !data.Peer[i].IdentityIdentityKeyIdKeyIdNumber.IsNull() {
			data.Peer[i].IdentityIdentityKeyIdKeyIdNumber = types.StringValue(value.String())
		} else {
			data.Peer[i].IdentityIdentityKeyIdKeyIdNumber = types.StringNull()
		}
		if value := r.Get("pre-shared-key.local-option.encryption"); value.Exists() && !data.Peer[i].PreSharedKeyLocalOptionEncryptionHexEncryptionCaseEncryption.IsNull() {
			data.Peer[i].PreSharedKeyLocalOptionEncryptionHexEncryptionCaseEncryption = types.StringValue(value.String())
		} else {
			data.Peer[i].PreSharedKeyLocalOptionEncryptionHexEncryptionCaseEncryption = types.StringNull()
		}
		if value := r.Get("pre-shared-key.local-option.key"); value.Exists() && !data.Peer[i].PreSharedKeyLocalOptionEncryptionHexEncryptionCaseKey.IsNull() {
			data.Peer[i].PreSharedKeyLocalOptionEncryptionHexEncryptionCaseKey = types.StringValue(value.String())
		} else {
			data.Peer[i].PreSharedKeyLocalOptionEncryptionHexEncryptionCaseKey = types.StringNull()
		}
		if value := r.Get("pre-shared-key.remote-option.encryption"); value.Exists() && !data.Peer[i].PreSharedKeyRemoteOptionEncryptionHexEncryptionCaseEncryption.IsNull() {
			data.Peer[i].PreSharedKeyRemoteOptionEncryptionHexEncryptionCaseEncryption = types.StringValue(value.String())
		} else {
			data.Peer[i].PreSharedKeyRemoteOptionEncryptionHexEncryptionCaseEncryption = types.StringNull()
		}
		if value := r.Get("pre-shared-key.remote-option.key"); value.Exists() && !data.Peer[i].PreSharedKeyRemoteOptionEncryptionHexEncryptionCaseKey.IsNull() {
			data.Peer[i].PreSharedKeyRemoteOptionEncryptionHexEncryptionCaseKey = types.StringValue(value.String())
		} else {
			data.Peer[i].PreSharedKeyRemoteOptionEncryptionHexEncryptionCaseKey = types.StringNull()
		}
	}
}

func (data *CryptoIKEv2KeyringData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "peer"); value.Exists() {
		data.Peer = make([]CryptoIKEv2KeyringPeer, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := CryptoIKEv2KeyringPeer{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			if cValue := v.Get("address.ipv4.ipv4-address"); cValue.Exists() {
				item.Ipv4Address = types.StringValue(cValue.String())
			}
			if cValue := v.Get("address.ipv4.ipv4-mask"); cValue.Exists() {
				item.Ipv4Mask = types.StringValue(cValue.String())
			}
			if cValue := v.Get("identity.key-id-number"); cValue.Exists() {
				item.IdentityIdentityKeyIdKeyIdNumber = types.StringValue(cValue.String())
			}
			if cValue := v.Get("pre-shared-key.local-option.encryption"); cValue.Exists() {
				item.PreSharedKeyLocalOptionEncryptionHexEncryptionCaseEncryption = types.StringValue(cValue.String())
			}
			if cValue := v.Get("pre-shared-key.local-option.key"); cValue.Exists() {
				item.PreSharedKeyLocalOptionEncryptionHexEncryptionCaseKey = types.StringValue(cValue.String())
			}
			if cValue := v.Get("pre-shared-key.remote-option.encryption"); cValue.Exists() {
				item.PreSharedKeyRemoteOptionEncryptionHexEncryptionCaseEncryption = types.StringValue(cValue.String())
			}
			if cValue := v.Get("pre-shared-key.remote-option.key"); cValue.Exists() {
				item.PreSharedKeyRemoteOptionEncryptionHexEncryptionCaseKey = types.StringValue(cValue.String())
			}
			data.Peer = append(data.Peer, item)
			return true
		})
	}
}

func (data *CryptoIKEv2Keyring) getDeletedListItems(ctx context.Context, state CryptoIKEv2Keyring) []string {
	deletedListItems := make([]string, 0)
	for i := range state.Peer {
		stateKeyValues := [...]string{state.Peer[i].Name.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Peer[i].Name.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Peer {
			found = true
			if state.Peer[i].Name.ValueString() != data.Peer[j].Name.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/peer=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *CryptoIKEv2Keyring) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}

func (data *CryptoIKEv2Keyring) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	for i := range data.Peer {
		keyValues := [...]string{data.Peer[i].Name.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/peer=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	return deletePaths
}
