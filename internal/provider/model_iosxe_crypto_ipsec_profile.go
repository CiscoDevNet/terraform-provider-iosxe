// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"reflect"
	"regexp"
	"strconv"
	"strings"

	"github.com/CiscoDevNet/terraform-provider-iosxe/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

type CryptoIPSecProfile struct {
	Device  types.String                `tfsdk:"device"`
	Id      types.String                `tfsdk:"id"`
	Profile []CryptoIPSecProfileProfile `tfsdk:"profile"`
}

type CryptoIPSecProfileData struct {
	Device  types.String                `tfsdk:"device"`
	Id      types.String                `tfsdk:"id"`
	Profile []CryptoIPSecProfileProfile `tfsdk:"profile"`
}
type CryptoIPSecProfileProfile struct {
	Name                                                     types.String `tfsdk:"name"`
	SetTransformSet                                          types.List   `tfsdk:"set_transform_set"`
	SetIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile types.String `tfsdk:"set_isakmp_profile_ikev2_profile_ikev2_profile_case_ikev2_profile"`
}

func (data CryptoIPSecProfile) getPath() string {
	return "Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ipsec"
}

func (data CryptoIPSecProfileData) getPath() string {
	return "Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ipsec"
}

// if last path element has a key -> remove it
func (data CryptoIPSecProfile) getPathShort() string {
	path := data.getPath()
	re := regexp.MustCompile(`(.*)=[^\/]*$`)
	matches := re.FindStringSubmatch(path)
	if len(matches) <= 1 {
		return path
	}
	return matches[1]
}

func (data CryptoIPSecProfile) toBody(ctx context.Context) string {
	body := `{"` + helpers.LastElement(data.getPath()) + `":{}}`
	if len(data.Profile) > 0 {
		body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"profile", []interface{}{})
		for index, item := range data.Profile {
			if !item.Name.IsNull() && !item.Name.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"profile"+"."+strconv.Itoa(index)+"."+"name", item.Name.ValueString())
			}
			if !item.SetTransformSet.IsNull() && !item.SetTransformSet.IsUnknown() {
				var values []string
				item.SetTransformSet.ElementsAs(ctx, &values, false)
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"profile"+"."+strconv.Itoa(index)+"."+"set.transform-set", values)
			}
			if !item.SetIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile.IsNull() && !item.SetIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile.IsUnknown() {
				body, _ = sjson.Set(body, helpers.LastElement(data.getPath())+"."+"profile"+"."+strconv.Itoa(index)+"."+"set.ikev2-profile", item.SetIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile.ValueString())
			}
		}
	}
	return body
}

func (data *CryptoIPSecProfile) updateFromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	for i := range data.Profile {
		keys := [...]string{"name"}
		keyValues := [...]string{data.Profile[i].Name.ValueString()}

		var r gjson.Result
		res.Get(prefix + "profile").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("name"); value.Exists() && !data.Profile[i].Name.IsNull() {
			data.Profile[i].Name = types.StringValue(value.String())
		} else {
			data.Profile[i].Name = types.StringNull()
		}
		if value := r.Get("set.transform-set"); value.Exists() && !data.Profile[i].SetTransformSet.IsNull() {
			data.Profile[i].SetTransformSet = helpers.GetStringList(value.Array())
		} else {
			data.Profile[i].SetTransformSet = types.ListNull(types.StringType)
		}
		if value := r.Get("set.ikev2-profile"); value.Exists() && !data.Profile[i].SetIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile.IsNull() {
			data.Profile[i].SetIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile = types.StringValue(value.String())
		} else {
			data.Profile[i].SetIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile = types.StringNull()
		}
	}
}

func (data *CryptoIPSecProfileData) fromBody(ctx context.Context, res gjson.Result) {
	prefix := helpers.LastElement(data.getPath()) + "."
	if res.Get(helpers.LastElement(data.getPath())).IsArray() {
		prefix += "0."
	}
	if value := res.Get(prefix + "profile"); value.Exists() {
		data.Profile = make([]CryptoIPSecProfileProfile, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := CryptoIPSecProfileProfile{}
			if cValue := v.Get("name"); cValue.Exists() {
				item.Name = types.StringValue(cValue.String())
			}
			if cValue := v.Get("set.transform-set"); cValue.Exists() {
				item.SetTransformSet = helpers.GetStringList(cValue.Array())
			} else {
				item.SetTransformSet = types.ListNull(types.StringType)
			}
			if cValue := v.Get("set.ikev2-profile"); cValue.Exists() {
				item.SetIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile = types.StringValue(cValue.String())
			}
			data.Profile = append(data.Profile, item)
			return true
		})
	}
}

func (data *CryptoIPSecProfile) getDeletedListItems(ctx context.Context, state CryptoIPSecProfile) []string {
	deletedListItems := make([]string, 0)
	for i := range state.Profile {
		stateKeyValues := [...]string{state.Profile[i].Name.ValueString()}

		emptyKeys := true
		if !reflect.ValueOf(state.Profile[i].Name.ValueString()).IsZero() {
			emptyKeys = false
		}
		if emptyKeys {
			continue
		}

		found := false
		for j := range data.Profile {
			found = true
			if state.Profile[i].Name.ValueString() != data.Profile[j].Name.ValueString() {
				found = false
			}
			if found {
				break
			}
		}
		if !found {
			deletedListItems = append(deletedListItems, fmt.Sprintf("%v/profile=%v", state.getPath(), strings.Join(stateKeyValues[:], ",")))
		}
	}
	return deletedListItems
}

func (data *CryptoIPSecProfile) getEmptyLeafsDelete(ctx context.Context) []string {
	emptyLeafsDelete := make([]string, 0)

	return emptyLeafsDelete
}

func (data *CryptoIPSecProfile) getDeletePaths(ctx context.Context) []string {
	var deletePaths []string
	for i := range data.Profile {
		keyValues := [...]string{data.Profile[i].Name.ValueString()}

		deletePaths = append(deletePaths, fmt.Sprintf("%v/profile=%v", data.getPath(), strings.Join(keyValues[:], ",")))
	}
	return deletePaths
}
